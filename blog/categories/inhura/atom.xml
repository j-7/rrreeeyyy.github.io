<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: インフラ | rrreeeyyy.com]]></title>
  <link href="https://rrreeeyyy.github.io/blog/categories/inhura/atom.xml" rel="self"/>
  <link href="https://rrreeeyyy.github.io/"/>
  <updated>2016-01-01T00:49:29+09:00</updated>
  <id>https://rrreeeyyy.github.io/</id>
  <author>
    <name><![CDATA[rrreeeyyy]]></name>
    <email><![CDATA[yoshikawa@rrreeeyyy.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[#7 nagios+lighttpd]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2011/12/29/7-nagioslighttpd/"/>
    <updated>2011-12-29T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2011/12/29/7-nagioslighttpd</id>
    <content type="html"><![CDATA[<p>今日はさくっと設定の紹介をして終わりです。</p>

<p>nagiosをlighttpdで動かすときの設定例です。</p>

<!--more-->


<p>アレコレ説明するのは面倒なので、はりつけちゃいます</p>

<p>```
$HTTP[&ldquo;url&rdquo;] =~ &ldquo;^/nagios&rdquo; {</p>

<pre><code>    server.document-root = "/usr/local/nagios-3.2.3/share/"
    server.indexfiles    = ( "index.php" )
    var.servername = "coco-01"
    accesslog.filename = "/var/log/lighttpd/" + var.servername + "_nagios_access.log"
    server.errorlog = "/var/log/lighttpd/" + var.servername + "_nagios_error.log"

    cgi.assign = ( ".cgi" =&gt; "" ,
    )
    fastcgi.server = (
            ".php" =&gt; (
                    "localhost" =&gt; (
                             "host" =&gt; "127.0.0.1",
                            "port" =&gt; "9000"
                            )))

    alias.url = (
    "/nagios/cgi-bin" =&gt; "/usr/local/nagios-3.2.3/sbin/",
    "/nagios" =&gt; "/usr/local/nagios-3.2.3/share/"
    )

    auth.backend = "htpasswd"
    auth.backend.htpasswd.userfile = "/usr/local/lighttpd-1.4.29/.nagiospw"
    auth.require = ( "/" =&gt;
    (
    "method" =&gt; "basic",
    "realm" =&gt; "Nagios Secret Zone",
    "require" =&gt; "valid-user"
    )
</code></pre>

<p> )    <br/>
}</p>

<p>```</p>

<p>大体こんな感じです。<br/>
nagiosは3.2.3をソースから入れてます<br/>
prefixを/usr/local/nagios-3.2.3でconfigureしてます。</p>

<p>lighttpdはprefixを/usr/local/lighttpd-1.4.29でconfigureしてます</p>

<p>phpはphp-fpmを使って、localhostの9000番ポートがlistenしてる状態です。</p>

<p>標準のlighttpdのconfigの書式を知っている人なら、そんなに難しくないでしょう。</p>

<p>ポイントは2点ぐらいです。</p>

<p>```
alias.url = (
   &ldquo;/nagios/cgi-bin&rdquo; => &ldquo;/usr/local/nagios-3.2.3/sbin/&rdquo;,
   &ldquo;/nagios&rdquo; => &ldquo;/usr/local/nagios-3.2.3/share/&rdquo;
 )</p>

<p>```</p>

<p>ここと、</p>

<p>```
cgi.assign = ( &ldquo;.cgi&rdquo; => &ldquo;&rdquo; ,
 )</p>

<p>```</p>

<p>ここだけです。<br/>
nagiosは、サイト自体を表示する部分が<br/>
/usr/local/nagios-3.2.3/share/<br/>
に置いてあって、<br/>
cgiを司る部分が、<br/>
/usr/local/nagios-3.2.3/sbin/<br/>
に置いてあります、ので、<br/>
/nagios/cgi-binのディレクトリにアクセスされた場合にはcgiの方を読みに行き、<br/>
/nagiosのサイト表示部分にアクセスされたら普通のindex.php等が置いてあるフォルダを読みに行くように設定しているだけです。</p>

<p>次いでcgi.assignの設定ですが、少々お行儀が悪い設定です。<br/>
が、しかし、nagiosのcgiを見て頂ければ分かる通り、<br/>
(/usr/local/nagios-3.2.3/sbin/の中身を見てみてね)<br/>
nagiosのcgiは何とバイナリファイルです。<br/>
ソースを見てみると、C言語です。<br/>
(ソースのフォルダの中のnagios-3.2.3/cgi配下にあります)</p>

<p>と言う事で、関連づけせずにそのままlighttpdのcgiモジュールに投げてます。</p>

<p>…これで実行出来るから驚きなのですが…。</p>

<p>他にも、mailmanとかのコンパイル済みのバイナリファイル等のcgiをlighttpd上で実行したい場合は、<br/>
上のような設定にすると動作します。<br/>
(友人はUPSのWeb設定画面をこの方法で動かしていたような気がします。。。)</p>

<p>実は脱apacheでnagiosを動かしたい！と思い立ってから、<br/>
nginxで動かそうと試行錯誤して1週間程度やっていましたが、結局あきらめてlighttpdに乗り換えたら、こんな簡単な設定で出来たので正直拍子抜けしました。<br/>
(nginxで動かそうとしたときは、nagiosのcgiのソースコードをfcgi化してfcgiwrapperで動かそうとして結局失敗&#8230;)</p>

<p>なので、apacheじゃないwebサーバを検討している方々で、apacheみたいにcgiを動かしたい！って方は、lighttpdがオススメなんじゃないでしょうか。<br/>
nginxは確かに軽量で高速なwebサーバなのですが、cgiの実行に関しては全く外部委託せざるを得ないので…<br/>
(fcgiwrapperやphp-fpm,spawn-fcgiなど)</p>

<p>速度に関して言えば、nginxとlighttpdでほぼ大差はないように感じます(実際に厳密なベンチを取ったわけではないですが&#8230;)</p>

<p>これからはもしかしたら、nginx+lighttpdなんていう構成が流行るかもしれませんね？</p>

<p>設定ファイルもそこそこ簡単なので、lighttpdは割とオススメです！</p>

<p>そんな感じで、次回はもっとちゃんとした事を書こうと思います。<br/>
(恐らく時期的に自サーバの再構築が終わってるので、その構成とかについて書きたいなあなんて考えてます…)</p>

<p>それでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#6 20歳までにやりたいこと]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2011/12/15/6-20th-infra/"/>
    <updated>2011-12-15T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2011/12/15/6-20th-infra</id>
    <content type="html"><![CDATA[<p>こんばんわ、れいです。<br/>
今日は20歳までにやってみたい事について書こうと思います。<br/>
(あと1ヶ月+αで20歳なので)</p>

<!--more-->


<p>構成<br/>
物理サーバ3台 + 仮想サーバ</p>

<p>rrreeeyyy.com(P) &#8211; coco-01(V)<br/>
nari64.com(P) &#8211; webdb02(V)<br/>
bonjour-01(P) &#8211; &#8230;9 hosts(V)</p>

<p>やりたい:<br/>
いわゆる HAクラスタ と言うやつを組みたい</p>

<p>やらなきゃいけない:<br/>
今現在2台の物理サーバで動いているサービスをそのまま、再構築してHAクラスタ化。</p>

<p>→ NagiosとかMuninとかblogとかmailを一晩程度止める事はご勘弁願いたい&#8230;<br/>
(誰も使ってないし)</p>

<p>そもそも出来るかどうか分かりませんが、<br/>
想定手順をちょっと書いてみました。</p>

<p>想定手順:</p>

<h2>(0) &#8211; 準備編 &ndash;</h2>

<p>(0-1) rrreeeyyy.com上で動作しているnagios,munin,blog,mail,svn等のほぼ同様の環境をcoco-01上に構築する</p>

<p>(0-2)[必要なら] nari64.com上で動作しているblog,mail等のほぼ同様の環境をwebdb02上に構築する</p>

<h2>(1) &#8211; nari64.com再構築編 &ndash;</h2>

<p>(1-1)[必要なら] nari64.com上のwebdb02のimg,xmlファイルをrrreeeyyy.com上に退避(scp or rsync等&#8230;)させ、nari64.comを再インストール</p>

<p>(1-2) nari64.comにNICを実装</p>

<p>(1-3)[必要なら] nari64.com上でKVMを再構築し、img,xmlファイルを差し戻し、起動を確認する。</p>

<p>(1-4) nari64.com上でルータ化できるような構成にしておく(dhcpd,pppoe等)</p>

<h2>(2) &#8211; rrreeeyyy.com再構築編 &ndash;</h2>

<p>(2-1) rrreeeyyy.com上のiptables,pppoe接続等の設定ファイルを確認し、使用出来そうなファイルはnari64.com上に転送しておく。</p>

<p>(2-2) rrreeeyyy.com上のcoco-01のimg,xmlファイルをnari64.com上に退避させる。</p>

<p>(2-3) rrreeeyyy.comをシャットダウンし、nari64.comにてpppoe接続、iptables,dhcp等のルータ化設定を実施</p>

<p>(2-4) rrreeeyyy.comのOSを再インストールし、KVMを再構築する。[必要があればcoco-01のimg,xmlを差し戻して動作確認]</p>

<p>&#8211;(ここからHAクラスタの構築)&#8211;</p>

<h2>(3) &#8211; keepalivedの構築編 &ndash;</h2>

<p>(3-1) nari64.com上でkeepalivedの構築を実施</p>

<p>(3-2) nari64.com上でkeepalivedの振り分け設定を実施</p>

<p>(3-3) rrreeeyyy.com上でkeepalivedの構築を実施</p>

<p>(3-4) rrreeeyyy.com上で (3-2) の設定ファイルを持ってくる</p>

<p>(3-5) master-slaveの設定を実施</p>

<p>(3-6) failover-failbackの確認</p>

<h2>(4) &#8211; glusterFSの構築編</h2>

<p>(4-1) rrreeeyyy.com上でglusterFSの構築</p>

<p>(4-2) nari64.com上でglusterFSの構築</p>

<p>(4-3) 上記2サーバでdistributeの構成を取る</p>

<p>(4-4) bonjour-01上でglusterFSの構築</p>

<p>(4-5) rrreeeyyy.com,nari64.comの両サーバのファイルをbonjour-01上にreplica構成(geo-replica?)を取る</p>

<p>&#8211;出来るか分からない所&#8211;</p>

<p>(4-6) rrreeeyyy.com(or nari64.com)上にHDDを実装</p>

<p>(4-7) bonjour-01,rrreeeyyy.com,nari64の3サーバでdistributeの構成を取る</p>

<p>(4-8) rrreeeyyy.com,nari64,bonjour-01のそれぞれのhostで実装したHDDにreplicaを取る</p>

<p>&#8211;出来るか分からない所&#8211;</p>

<p>(4-9) 色々確認</p>

<p>(終了)</p>

<p>/<em> 最後の方ちょっと面倒になって適当…<br/>
* もしかしたら仮想サーバ周りも色々いじるのかも…<br/>
* そもそも出来るか分からない<br/>
* 3,4の工程の鬼畜度がすごい<br/>
</em>/</p>

<p>(買うもの)<br/>
・[必要なら]HDD1〜2台 洪水…<br/>
・スイッチングハブ(Gigabitで) 3000円くらいらしい<br/>
・LANケーブル数本(Gigabitで) たぶんやすい<br/>
・NIC1枚 3000円ぐらいだと思う</p>

<p>他にははもっといろんな人と仲良くなりたいです！<br/>
みなさんよろしくお願いします！！</p>

<p>なんかこうした方がもっとよろしげな構成だよとかあったら教えてください…</p>

<p>あと仲良くなってくださる方もよろしくお願いします…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#5 KeepAlivedを入れる(おまけ付)]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2011/12/14/5-keepalived-install/"/>
    <updated>2011-12-14T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2011/12/14/5-keepalived-install</id>
    <content type="html"><![CDATA[<p>入れる。<br/>
(単なる作業メモ…)</p>

<p>作業手順<br/>
CentOS6系</p>

<p>カーネルのバージョン</p>

<p>2.6.32-71.29.1.el6.x86_64</p>

<p><a href="http://www.keepalived.org/software/keepalived-1.2.2.tar.gz">http://www.keepalived.org/software/keepalived-1.2.2.tar.gz</a></p>

<!--more-->


<p>カーネル組み込みのIPVSのバージョン確認</p>

<p>```</p>

<h1>grep VERSION_CODE /usr/include/linux/ip_vs.h</h1>

<h1>define IP_VS_VERSION_CODE      0x010201</h1>

<p>```</p>

<p>=>1.2.1であることを確認</p>

<p>yum install ipvsadmする際に、<br/>
上で確認したカーネル組み込みのIPVSのバージョンより、<br/>
yumで入れるipvsadmのバージョンが新しい事を確認すること。</p>

<p>ipvsadm入れてkeepalivedをおもむろにconfigure</p>

<p><code>``
[root@rrreeeyyy keepalived-1.2.2]# yum install ipvsadm
[root@rrreeeyyy src]# wget http://www.keepalived.org/software/keepalived-1.2.2.tar.gz
[root@rrreeeyyy src]# tar zxfv keepalived-1.2.2.tar.gz
[root@rrreeeyyy src]# cd keepalived-1.2.2
[root@rrreeeyyy keepalived-1.2.2]# ./configure --with-kernel-dir=/lib/modules/</code>uname -r`/build</p>

<p>configure: error: Popt libraries is required
```</p>

<p>popt librariesがないので入れておもむろにconfigure</p>

<p>```
[root@rrreeeyyy keepalived-1.2.2]# yum install popt-devel</p>

<p>[root@rrreeeyyy keepalived-1.2.2]# ./configure &mdash;with-kernel-dir=/lib/modules/<code>uname -r</code>/build</p>

<p>Keepalived version       : 1.2.2
Compiler                 : gcc
Compiler flags           : -g -O2
Extra Lib                : -lpopt -lssl -lcrypto
Use IPVS Framework       : Yes
IPVS sync daemon support : Yes
IPVS use libnl           : No
Use VRRP Framework       : Yes
Use Debug flags          : No
```</p>

<p>IPVS use libnlがNoになってるので入れておもむろに</p>

<p>```
[root@rrreeeyyy keepalived-1.2.2]# yum install libnl-devel</p>

<p>[root@rrreeeyyy keepalived-1.2.2]# ./configure &mdash;with-kernel-dir=/lib/modules/<code>uname -r</code></p>

<h2>Keepalived configuration</h2>

<p>Keepalived version       : 1.2.2
Compiler                 : gcc
Compiler flags           : -g -O2
Extra Lib                : -lpopt -lssl -lcrypto  -lnl
Use IPVS Framework       : Yes
IPVS sync daemon support : Yes
IPVS use libnl           : Yes
Use VRRP Framework       : Yes
Use Debug flags          : No</p>

<p>[root@rrreeeyyy keepalived-1.2.2]# make</p>

<p>Make complete
[root@rrreeeyyy keepalived-1.2.2]# make install</p>

<p>```</p>

<p>起動スクリプトの類をなんとか</p>

<p>```
[root@rrreeeyyy bin]# ln -s /usr/local/src/keepalived-1.2.2/bin/keepalived /usr/sbin/keepalived
[root@rrreeeyyy bin]# cp -a /usr/local/src/keepalived-1.2.2/keepalived/etc/init.d/keepalived.rh.init /etc/init.d/keepalived
[root@rrreeeyyy bin]# cp -a /usr/local/src/keepalived-1.2.2/keepalived/etc/init.d/keepalived.sysconfig /etc/sysconfig/keepalived</p>

<p>```</p>

<p>```
mkdir /etc/keepalived</p>

<p>```</p>

<p>をしてあげてその下にkeepalived.conf等の設定ファイルを置く。<br/>
設定ファイルのsample</p>

<p>```
/usr/local/src/keepalived-1.2.2/keepalived/etc/keepalived/keepalived.conf</p>

<p>```</p>

<p>においてあるので、/etc/keepalived配下にコピーする。</p>

<p>```</p>

<h1>ip addr show</h1>

<pre><code>inet 192.168.200.16/32 scope global eth0
inet 192.168.200.17/32 scope global eth0
inet 192.168.200.18/32 scope global eth0
</code></pre>

<h1>ipvsadm -Ln</h1>

<p>IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  &ndash;> RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.200.100:443 rr persistent 50
TCP  192.168.201.100:1358 rr persistent 50
  &ndash;> 192.168.200.200:1358         Masq    1      0          0
TCP  10.10.10.3:1358 rr persistent 50</p>

<p>```</p>

<p>こんなかんじで、VIPとipvsadmの振り分けが一応設定されていれば恐らくインストール成功。<br/>
あとは頑張ってkeepalived.confを書く。</p>

<p>おわり</p>

<h1>おまけ:</h1>

<h1>仮想ホストにruby入れる</h1>

<p>おもむろに</p>

<p><code>
[root@coco-01 ruby-1.9.3-p0]# wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p0.tar.gz
[root@coco-01 ruby-1.9.3-p0]# tar zxfv ruby-1.9.3-p0.tar.gz
[root@coco-01 ruby-1.9.3-p0]# ./configure --prefix=/usr/local/ruby-1.9.3/
[root@coco-01 ruby-1.9.3-p0]# make
[root@coco-01 ruby-1.9.3-p0]# make install
</code></p>

<p>おわり</p>

<p>と思いきや</p>

<p><code>
[root@coco-01 ruby-1.9.3]# gem install sinatra
/usr/local/ruby-1.9.3/lib/ruby/1.9.1/yaml.rb:56:in `':
It seems your ruby installation is missing psych (for YAML output).
To eliminate this warning, please install libyaml and reinstall your ruby.
</code></p>

<p>こんなエラーが出たので、libyamlを入れる事に。<br/>
CentOSはyumでレポジトリ追加しなきゃいけないぽくて面倒だったのでビルドした。</p>

<p>```
[root@coco-01 src]# wget <a href="http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz">http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz</a>
[root@coco-01 src]# tar zxfv yaml-0.1.4.tar.gz
[root@coco-01 yaml-0.1.4]# ./configure
[root@coco-01 yaml-0.1.4]# make
[root@coco-01 yaml-0.1.4]# make install
[root@coco-01 bin]# vim /etc/ld.so.conf.d/libyaml.conf</p>

<p>(+) /usr/local/lib</p>

<p>[root@coco-01 yaml-0.1.4]# ldconfig
```</p>

<p>rubyを再度上の手順でリコンパイルしてmake&amp;&amp;make install</p>

<p>gemのエラーが無事消える</p>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#4 GlusterFSのinstall]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2011/12/08/glusterfs-install/"/>
    <updated>2011-12-08T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2011/12/08/glusterfs-install</id>
    <content type="html"><![CDATA[<p>こんばんわ、れいです。<br/>
今日は社内勉強会に参加してきました〜。<br/>
MySQLの話とか、CTOのscreen捌きとか、readコマンドについてとか、サーバ移設についてとか色々あったのですが、<br/>
(僕は昨日構築したscreenについて本当に初歩的な部分だけLTしました;)<br/>
その中で最も興味を惹かれた &#8220;GlusterFS&#8221; についてちょっとだけ書きたいと思います。</p>

<!--more-->


<h1>ナニサ？</h1>

<p id="firstHeading">
  GlusterFSってなにさ？って話から。
</p>




<p id="firstHeading">
  GlusterFSについて知ったのは実は今日が初めてだったのですが、要は分散ファイルシステムですね。
</p>


<p>こんなことが出来るらしいです。</p>

<ul>
<li>ファイルベースのミラーリングとレプリケーション</li>
<li>ファイルベースのストライピング</li>
<li>ファイルベースの負荷分散</li>
<li>ボリュームのフェイルオーバー</li>
<li>スケジューリングとディスクキャッシュ</li>
<li>ディスククオータ</li>
</ul>


<div>
  (Wikipediaからの引用です:)
</div>




<div>
  詳しくは、検索して調べてみてください。
</div>




<div>
  日本語で解説している所もちょっとありますよ〜。
</div>




<div>
  さて、本日僕がやろうとしてるのは、そのGlusterFSのinstallです。
</div>




<div>
  もし上手くいったら、そのうち実際の設定とかも書いて行きたいですね。
</div>




<div>
  GlusterFSのインストールですが、
</div>


<h2>yumではいります。</h2>

<p>epelかなにかのレポジトリを追加すれば</p>

<p><code>
yum install glusterfs-server glusterfs-fuse
</code></p>

<p>これで入るんじゃないかな、たぶん。(試してません。)</p>

<h1></h1>

<p>&#8211; おわり &#8211;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>えっと嘘です。</p>

<p>&nbsp;</p>

<h1>やってみよう！</h1>

<p>ところで、yumで入るのはちょっと古いです。</p>

<p>最新バージョンの方がいいですよね？</p>

<p>&nbsp;</p>

<p>さて、</p>

<p>お手軽なのはrpmです。</p>

<p>2011年12/8現在の最新バージョンの3.2.5ですが、rpmがあります。</p>

<p>今回はそいつを使う事にしましょう。</p>

<p>```</p>

<h1>cat /etc/redhat-release</h1>

<p>CentOS Linux release 6.0 (Final)
```</p>

<p>CentOS6系です。</p>

<p>```</p>

<h1>wget <a href="http://download.gluster.com/pub/gluster/glusterfs/3.2/LATEST/CentOS/6/glusterfs-core-3.2.5-2.el6.x86_64.rpm">http://download.gluster.com/pub/gluster/glusterfs/3.2/LATEST/CentOS/6/glusterfs-core-3.2.5-2.el6.x86_64.rpm</a></h1>

<h1>wget <a href="http://download.gluster.com/pub/gluster/glusterfs/3.2/LATEST/CentOS/6/glusterfs-fuse-3.2.5-2.el6.x86_64.rpm">http://download.gluster.com/pub/gluster/glusterfs/3.2/LATEST/CentOS/6/glusterfs-fuse-3.2.5-2.el6.x86_64.rpm</a></h1>

<h1>wget <a href="http://download.gluster.com/pub/gluster/glusterfs/3.2/LATEST/CentOS/6/glusterfs-geo-replication-3.2.5-2.el6.x86_64.rpm">http://download.gluster.com/pub/gluster/glusterfs/3.2/LATEST/CentOS/6/glusterfs-geo-replication-3.2.5-2.el6.x86_64.rpm</a></h1>

<p>```</p>

<p>そんな感じでrpmをダウンロードします。</p>

<p>```</p>

<h1>rpm -ivh glusterfs-*</h1>

<p>```</p>

<p>インストールします。</p>

<p>終わりです。</p>

<p>ワオ、お手軽！！！！</p>

<p>(こんなに上手く行かない事もありそうですが&#8230;)</p>

<p>```</p>

<h1>/etc/init.d/glusterd start</h1>

<p>Starting glusterd:                                         [  OK  ]
```</p>

<p>```</p>

<h1>ps aufx|grep [g]luster</h1>

<p>root     14995  0.0  0.1  45056  7880 ?        Ssl  02:29   0:00 /opt/glusterfs/3.2.5/sbin/glusterd
```</p>

<p>```</p>

<h1>/usr/sbin/gluster -V</h1>

<p>glusterfs 3.2.5 built on Nov 15 2011 08:43:14
Repository revision: git://git.gluster.com/glusterfs.git
Copyright &copy; 2006-2011 Gluster Inc. &lt;<a href="http://www.gluster.com&amp;gt;">http://www.gluster.com&amp;gt;</a>
GlusterFS comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of GlusterFS under the terms of the GNU General Public License.
```</p>

<p>無事、起動した感じですね。</p>

<p>さて、ちょっと内容が薄いですが、今晩中に動作確認とか使用感を書ききる自信があまりないので<br/>
(設定ファイルとかよくわかってないので&#8230;)<br/>
それは次回以降の記事にしたいと思います。<br/>
仮想サーバでのインストールも先ほど終えたので、これからちょっと色々弄くってみたいとおもいます！</p>

<p>glusterfsについてとか他にも面白いネタがあれば是非教えてください:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#2 nginxのインストール記]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2011/11/12/2-nginx-install/"/>
    <updated>2011-11-12T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2011/11/12/2-nginx-install</id>
    <content type="html"><![CDATA[<p>どうもこんにちわ。れいです。</p>

<p>今回は、やっぱり技術的な事を一応書いてから公開したいなと思ったので、<br/>
とりあえず出来そうなnginxのインストール記を書きます</p>

<!--more-->


<p>(本当はredisのビルド、起動スクリプト作成、<br/>
php-redis関数のインストールとそのテスト、ぐらいを書きたかったのですが次回へ)</p>

<blockquote><p>nginxとは<br/>
HTTP とリバースプロキシのサーバで、<br/>
メールプロキシサーバでもあります。</p></blockquote>

<p>と書いてあります。要はapacheのようなWebサーバですね<br/>
(こんな適当な説明してると怒られちゃいますけど)。<br/>
メールプロキシサーバでもあるらしいですが。</p>

<p>プロキシサーバ、リバースプロキシサーバについての説明とかはしないので、<br/>
気になったらググってください。</p>

<p>と言っていますが、作業メモなどはないし、<br/>
なんなら今(3:06)現在にソースコードを落としてきただけなので、<br/>
作業メモと同時にこの記事を書き進める事になります。</p>

<p>ちなみにnginx、<br/>
「エンジンエックス」と読むぽいので覚えておくと得をするかもしれませんね。</p>

<p>用意したもの：100%オレンジジュース、パソコン、あきらめない心、眠くない体</p>

<p>まず、ソースコードのダウンロードからです。</p>

<p>nginxのページ<br/>
<a title="nginxのページ" href="http://nginx.org/en/download.html" target="_blank"><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></a><br/>
からソースコードをダウンロードしてきます。</p>

<p># wget <a href="http://nginx.org/download/nginx-1.1.7.tar.gz">http://nginx.org/download/nginx-1.1.7.tar.gz</a></p>

<p>解凍します。</p>

<p># tar zxfv nginx-1.1.7.tar.gz</p>

<p>中へ入ってconfigureオプションを見てみる</p>

<p># cd nginx-1.1.7</p>

<p># ./configure &#8211;help</p>

<p>色々オプションがありますが、諸々は後でリビルドしようと決め込んで、おもむろにconfigure</p>

<p># ./configure</p>

<p>.<br/>
.<br/>
.</p>

<p>./configure: error: the HTTP rewrite module requires the PCRE library.<br/>
You can either disable the module by using &#8211;without-http_rewrite_module<br/>
option, or install the PCRE library into the system, or build the PCRE library<br/>
statically from the source with nginx by using &#8211;with-pcre= option.</p>

<p>先方ぶちぎれ、曰く</p>

<p>「rewrite moduleを使うためのPCREライブラリねーけど！！<br/>
PCREライブラリ入れるかrewrite module使わねーかどっちかにしろ！！」</p>

<p>さて、rewrite moduleがないとお話にならないのでPCREライブラリを用意します。<br/>
(PCREライブラリはperlの正規表現のライブラリだと記憶しています)</p>

<p>楽をしたいのでyumでパッケージがないか探す</p>

<p># yum search pcre</p>

<p>pcre-devel.x86_64 : Development files for pcre<br/>
pcre.x86_64 : Perl-compatible regular expression library</p>

<p>多分これとかこれとか入れるといいと思います。<br/>
僕の場合はpcre-develがなかったので怒られていたようです。<br/>
(そういえばperlの正規表現のライブラリだという記憶は正しかったようです…)</p>

<p>と言うわけでインストール</p>

<p># yum install pcre-devel</p>

<p>そしておもむろにconigure</p>

<p># ./configure</p>

<p>めでたく成功</p>

<p>makeしましょう</p>

<p>おもむろにmake</p>

<p># make</p>

<p>なんだか通ったような気がするのでmake install</p>

<p># make install</p>

<p>無事/usr/local/nginx配下に色々置かれたようです。楽しかったですね。</p>

<p>さて起動しましょう。</p>

<p># /usr/local/nginx/sbin/nginx</p>

<p>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</p>

<p>との事。<br/>
当然ですね、今ブログを書いてるこいつはいったい何番ポートを使ってるんだという話ですよ。</p>

<p>取り急ぎ起動したいので/usr/local/nginx/conf/nginx.confをいじることに</p>

<p>serverの設定のlistenポートを8080にして起動すると起動できました。</p>

<p>rrreeeyyy.com:8080にアクセスすると<br/>
「Welcome to nginx!」と迎えられました、優しい子です。</p>

<p>と言う事で取り急ぎnginxを入れてみたわけです(3:38)<br/>
(ブログのネタにするためだけに)<br/>
次回以降はこいつをちゃんと使って行きたいですね、<br/>
それについても色々書ければいいなと思っています。</p>

<p>完成したもの：100%オレンジジュースの空き容器、nginx、眠い体</p>

<p>と言うわけでここまで読んでくださった方はありがとうございます。</p>

<p>何かビルドしてみて欲しいソフトウェアとか、<br/>
書いてみてほしいプログラムとかあったら<br/>
コメント欄で募集して、出来る限りの事をやってブログにあげようと思うので、<br/>
何かあれば。</p>

<p>あ、あとここ間違ってるよとかこうした方がいいよとかあれば、<br/>
僕とみなさんの為に是非書いてもらえるとありがたいです。</p>

<p>それではおやすみなさい。</p>
]]></content>
  </entry>
  
</feed>
