<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | rrreeeyyy.com]]></title>
  <link href="http://rrreeeyyy.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://rrreeeyyy.github.io/"/>
  <updated>2015-05-25T10:32:41+09:00</updated>
  <id>http://rrreeeyyy.github.io/</id>
  <author>
    <name><![CDATA[rrreeeyyy]]></name>
    <email><![CDATA[yoshikawa@rrreeeyyy.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[July Tech Festa 2014 ( #techfesta ) に行きました]]></title>
    <link href="http://rrreeeyyy.github.io/blog/2014/06/23/techfesta/"/>
    <updated>2014-06-23T00:00:00+09:00</updated>
    <id>http://rrreeeyyy.github.io/blog/2014/06/23/techfesta</id>
    <content type="html"><![CDATA[<p>昨年に引き続き、July Tech Festa (2014) に行ったのでそれとなくまとめを書きます。</p>

<p>そうは言っても Twitter で全部メモを取っていたので、</p>

<p>ダラダラ Tweet を振り返りながら所感を書きます。</p>

<p>Script タグが多くてレンダリングに時間が掛かるかも。ご容赦下さい。</p>

<!--more-->


<hr />

<p>おさらい: <a href="http://2014.techfesta.jp/">July Tech Festa (JTF)</a> とは</p>

<blockquote><p>開催趣旨</p>

<p>クラウド環境が普及し、関連した話題が盛り上がり、これにしたがい、これらを裏側で実現する開発者の技術修得の意欲が高まってきています。また、各種ITトレンドが凄まじい速度で移り変わり、技術者同士が活発に交流し、情報交換と人脈構築をしようという動きが顕著にみられます。これらの意欲と活動に応じるため、ITに係るエンジニアの知的興味を満足するための夏の祭典として当イベントを開催いたします。</p></blockquote>

<p>とのこと。講演がいくつかあり、一日を通じて回っていく形式でした。</p>

<p><a href="http://2014.techfesta.jp/p/program.html">JTF の講演一覧はこちら</a>で、僕は以下の講演を聞きました。</p>

<ul>
<li><a href="http://2014.techfesta.jp/p/program.html#keynote">基調講演: Serverspecに見る技術トレンドを生み出すヒント</a></li>
<li><a href="http://2014.techfesta.jp/p/program.html#specialnote">特別講演: Google Cloud Platform 最新動向</a></li>
<li><a href="http://2014.techfesta.jp/p/program.html#specialnote2">特別講演: Dockerのエンタープライズ開発での活用モデル</a></li>
<li><a href="http://2014.techfesta.jp/p/program.html#b30">B30: フロントエンドで普及が進むビルドツールたち</a></li>
<li><a href="http://2014.techfesta.jp/p/program.html#f40">F40: Serfでシステム監視と運用を楽しくする話</a></li>
<li><a href="http://2014.techfesta.jp/p/program.html#d51">D51: Docker ― 俺の環境ではその不具合は起きないを撲滅する</a></li>
<li><a href="http://2014.techfesta.jp/p/program.html#d52">D52: Dockerで考えるマルチクラウドの未来</a></li>
<li><a href="http://2014.techfesta.jp/p/program.html#invitednote">招待講演: 大規模エンターテイメントサイトを支える技術</a></li>
</ul>


<p>それぞれツイートと所感を振り返ります。</p>

<hr />

<h1><a href="http://2014.techfesta.jp/p/program.html#keynote">基調講演: Serverspecに見る技術トレンドを生み出すヒント</a></h1>

<p><a href="http://serverspec.org/">Serverspec</a> 作者の <a href="http://mizzy.org/">@mizzy</a> さんによる、</p>

<p>Serverspec をどのようにして生み出したかに関する講演でした。</p>

<p>スライドはこちら。</p>

<script async class="speakerdeck-embed" data-id="a0f99a20dbe00131d9c52a008baf6e6b" data-ratio="1.77777777777778" src="http://rrreeeyyy.github.io//speakerdeck.com/assets/embed.js"></script>


<p>そして僕のツイート。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Serverspec に見る技術トレンドを生み出すヒント <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480516192323387392">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>おおおお Deckset だ！！ <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480516058487328768">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>このスライドでも使われている Deckset、Markdown でカッコイイ良いプレゼンを作れるので皆さんオススメです (1700JPY)  <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480517822204760065">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>アプリケーションレイヤでは一般的に行われてた事をインフラレイヤに持ってきたという事が Serverspec のコードと同等かそれ以上に価値があるなあと思ってる <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480520270289985536">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Serverspec のスペルは Serverspec/serverspec/SERVERSPEC のいずれかを使ってね！(重要) (僕は Serverspec 派) <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480520841411559424">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>KISS の原則って大事だなーと言う話なんだよなーこれ、僕も色々詰め込もうとしすぎる癖があるからちゃんと意識しないといけない <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480522368905797632">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>別領域で成功しているプラクティスを持ち込むという話、やはり出てきた。ここは本当に大きいと個人的に思う。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480527120112693248">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>名前重要。直球、覚えやすい、何するものか類推しやすい。基本だけど大事だよね。 (あれ、でも Chef？Sensu？Puppet？...) <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480527458412662786">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>メジャーなキーワード/プロダクトに乗っかる、なんかちょっと卑怯な感じがしちゃうけど大事だよね <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480527749556092928">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>ドキュメントのわかりやすさ、大事。ドキュメントを書け。ウッ... <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480527875624300545">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>ツール自体のシンプルさ Keep it simple, stupid だ <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480527979294892032">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>エージェントレスとても重要。分かる。「いくら便利でも、サーバに色々入れるのはイヤですよね？」→ めっちゃ嫌です。だからこそインフラツールの Go 製が進んでる気がする。python 2.4 とかは嫌なんや... <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480528848497299456">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>使うまでの敷居を下げる、とりあえず試せる、動かせるっていうのは大事 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480529088088522752">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>自分一人でやりすぎない、欲しい機能があれば自分で実装してくれという気概、でもこれはどちらかと言えば若干流行ってからじゃないと難しいね <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480529251523772416">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>技術トレンドを生もうと思わない、自分がほしいもの、面白いと思うものを自分のために作ってみる。「人類の技術発展のための無償開発」(笑) というスタンスではいいものは出来ない。そうやな。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480530362804617217">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>まとめ：「技術トレンドを生み出す近道はない」自分がほしいもの、面白いと思うものを作る/公開する。積み重ねると素晴らしい物が生める、かもしれない <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480530587820625920">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>「Shut the fuck up and write some code」！！！！ <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480530800857714688">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>「Openness is our driver for excellence」<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480530885997891585">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>「知之者不如好之者、好之者不如楽之者」孔子の言葉やんな <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480531225111584768">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>僕が (そして恐らくみんなが) Serverspec のいいなあと思っている所が余すところ無く紹介されてた気がする。</p>

<p>他レイヤでの成功事例を別レイヤに持ってくるとか、</p>

<p>KISS の法則を守るとか、とりあえず動かせるようにするっていうのがやはり大きい気がしてる。</p>

<p>これから先は多分 Go 製の監視エージェントとか、</p>

<p>サービスディスカバリツール (は一応既にあるか) とかインベントリツールとか、</p>

<p>モニタリングツールとかが流行るんじゃないかなあ。</p>

<p>Go で書くと「とりあえず動かせる」の部分を容易に解決できる気がしている。</p>

<p>インフラ自動化とかコードで管理っていうのはこれから更に進行する気がしていて、</p>

<p>今丁度弱いのが上で挙げた辺りなんじゃないかなあと思っている。もう既に誰か開発してそう。</p>

<p>そういう意味では僕とか (僕と同列に語るのは大変失礼なんだけど)、<a href="https://twitter.com/matsumotory">@matsumotory</a> さんなんかは、</p>

<p>mruby を用いてインフラ自動化を達成しようとしてる。とはいえ mruby は若干導入の敷居が高かったりするので、</p>

<p>その辺りもなんとかしないといけないのかな、と思ったりもした。</p>

<p>あと個人的な目標というか、まあ僕以外にも当てはまる人もいると思うんだけど、とにかく</p>

<p>「Shut the fuck up and write some code」 であって、</p>

<p>僕はまだまだたくさんコードを書かなきゃいけないフェーズにいる。</p>

<p>mizzy さんは少なくとも 100 は種々世に出してるわけで、</p>

<p>とにかく自分/他人に便利な物をもっと作らなきゃいかんなという事だった。</p>

<hr />

<h1><a href="http://2014.techfesta.jp/p/program.html#specialnote">特別講演: Google Cloud Platform 最新動向</a></h1>

<p>スライド無いのかな。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Google Cloud Platform で実現する Google スケールのアプリケーション開発 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480535169561284608">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Google Cloud SQL、中身 MySQL なんだね <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480537320307699712">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Google App Engine が処理するリクエスト件数 280 億件/日 ヤバイ。Cloud Datastore 6.3 兆件。桁が違う。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480537721744535552">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Google App Engine、XMPP の機能があったり Task Queue の機能があるの知らなかった。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480538112058068992">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>AKB48 のイベントサイト、最大 23000QPS きてたらしい、ワールドカップのコカ・コーラ公式のモザイクサイトも GAE。GAE なら捌けるよ！とのこと <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480540069145477122">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>GCE、安定したディスク・ネットワークI/O、安定性が売りとのこと。高速なインスタンス起動、VM あたり 20 〜 40 秒とのこと。僕が使ってみた感じでも本当に早く起動する。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480540550626439168">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>GCE、高速なネットワークが売り。リージョンをまたいだ通信も早いらしい。ロードバランサは google の検索サイトと全く同じインフラを使用してるらしい。暖機運転なしで 100 万 QPS が捌ける。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480541295220228096">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>GCE、使い続けると勝手に割引が適用される！知らなかった。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480541574607032320">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>BigQuery、簡単な SQL を書けば数億というオーダのデータを数秒〜数十秒で捌ける。らしい。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480542120567009281">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>出、出ー fluent-plugin-bigquery <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480543621288976384">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>GCE、最近弊社内で割と流行っている？というか検証が進んでいて、</p>

<p><a href="http://heartbeats.jp/hbblog/gcp/">いくつか会社ブログに記事が書かれてたりしてる。</a></p>

<p>調べてみれば分かるんだけど本当に情報がなくて、</p>

<p>これからまさに盛り上がっていく？んじゃないかなと言う感じがある。</p>

<p>やっぱり後発の利点なんだけど、AWS の痒い所に手が届く系のクラウドなんじゃないかなと思ったり、</p>

<p>天下の Google 様のインフラはやっぱすげーと感じさせてくれるオーバーテクノロジーみたいなのが味わえる。</p>

<p>BigQuery とか GCE の起動の早さなんかはその典型で、</p>

<p>Docker を build するより GCE で仮想マシン build した方が場合によっては早く起動してしまう…。</p>

<p>色々サービスの詳解とか BigQuery のデモとかもあったので、</p>

<p>使ってみて色々アウトプットすると先駆者になれる気がする。</p>

<p>僕も検証やら個人の CI 環境やらで使い始めた途中なので、何かあればアウトプットしたい。</p>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p>お昼 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a> <a href="http://t.co/YDc4PEY6l3">pic.twitter.com/YDc4PEY6l3</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480547343108820993">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<hr />

<blockquote class="twitter-tweet" lang="ja"><p>Oisix さんの Vegeel 。去年の カジュール (だっけ？) がめっちゃ美味しかったからそれ系かと思ったら割としっかり野菜ジュースだった。でも野菜ジュースにしては飲みやすい可能性がある。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a> <a href="http://t.co/D7IQoCOop8">pic.twitter.com/D7IQoCOop8</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480557120350195713">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<hr />

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a> <a href="http://t.co/ALWHSSXux7">pic.twitter.com/ALWHSSXux7</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480516408187432960">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>朝無料で配ってた。あとお菓子もめっちゃあった。太っ腹。</p>

<hr />

<p>次、Docker 聞いたんだけど Docker いくつも聞いたからまとめて後ろの方に書きます。</p>

<hr />

<h1><a href="http://2014.techfesta.jp/p/program.html#b30">B30: フロントエンドで普及が進むビルドツールたち</a></h1>

<p><a href="http://www.osscafe.net/ja/">下北沢オープンソースカフェ</a> の <a href="https://twitter.com/cognitom">@cognitom</a> さんの講演。</p>

<script async class="speakerdeck-embed" data-id="9da6bf20dc020131d9c52a008baf6e6b" data-ratio="1.77777777777778" src="http://rrreeeyyy.github.io//speakerdeck.com/assets/embed.js"></script>


<p>本職はインフラエンジニアなんだけど、趣味でフロント開発やってて割と好きでなので、つい聞きに行ってしまった。</p>

<blockquote class="twitter-tweet" lang="ja"><p>本業はインフラエンジニアですが趣味でフロントエンド開発やってるのでフロントエンドの話を聞きにきました。フロントエンドで普及が進むビルドツールたち - Grunt、glup ほか <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480570586700054528">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>割と最近 JavaScript 書きたくてたまらないんだけど特に対象物がないので Python 書いてることが多い。今日ここでモチベーション上げたい。</p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480571751135318017">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>弊社、リブライズの導入事例っぽいものとして一瞬紹介されました <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480573261567102976">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>フルスタックエンジニアになるべく野菜工場を始めた。！？ <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480573379464806400">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>スライドもデモサイトもいちいち全てオシャレですごい。あのセンス欲しい。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480574146623983616">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>glupfile、gruntfile に比べてなんかパイプラインっぽいメソッドチェインで書けててめっちゃ良さそう <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480574912147361792">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>BrowserSync めっちゃすごいな。これは感動的だ。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480576364752297984">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Gulp に感動して「おぉ〜」とか言いまくってる <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480576530699911168">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>僕のフロントエンド開発脳みそは 7 ヶ月前に Gruntfile を書いた所で終わってました。Gulpfile めっちゃ簡潔すぎる。素晴らしい。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480577632551968768">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Web Fundamentals by Google もタスクランナーに gulp を採用している <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480578528484671488">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>incremental build や変更箇所を見てだけのビルド。出力先を複数にするビルド。複数から入力するビルド。順番を指定したビルド。Grunt でも出来てたけど Gulp だととても綺麗に書けてる感じがして良い。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480580574956896256">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>uncss、使われていない CSS コンポーネントを除外してくれるらしい。知らなかった。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480581132753203200">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Browserify 便利だよねえ <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480581273094615041">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>glup-styledocco、glup-iconfont などなど便利そう... <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480581452438847488">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>あくまで趣味だし最近は時間も使えてなかったので、単純に知らないことばっかで「おおー」って言いっぱなしだった。</p>

<p>個人的にはサーバエンジニアもフロントエンジニアが何やってんのかぐらいは知ってないと行けないと思っていて、</p>

<p>そういうのを知るとってもいい機会だったなあと思っている。会場のみなさんも割と「おおー」って言ってたし。</p>

<p>JavaScript、時間を見つけてもっと書いていきたい。</p>

<hr />

<h1><a href="http://2014.techfesta.jp/p/program.html#f40">F40: Serfでシステム監視と運用を楽しくする話</a></h1>

<p>界隈では有名も有名、<a href="https://twitter.com/zembutsu">@zembutsu</a> さんの講演。</p>

<p>スライドまだっぽい。上げるとおっしゃっていたので待ちます。</p>

<p>ちなみにめっっっっっっっっちゃ濃い資料で、中身も多くて発表中は 5 割ぐらい飛ばしてた感覚あるので、</p>

<p>僕もまだ読むのが楽しみです。</p>

<blockquote class="twitter-tweet" lang="ja"><p>F 会場の椅子が斬新なシステムで 1 秒程度困惑したが割と快適な椅子だった <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480585638622687232">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>「ご注文は監視自動化ですか？ Serf と Consul を使って運用を楽しくする話」zembutsu さん節が出てる <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480586769495126016">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>今日のまとめ(早)：Serf, Consul は軽量シンプルでありながら様々なシーンに利用できる。他の類似ツールより利用の敷居が低い。使うことで煩雑な業務から開放され、人間しか出来ない仕事に集中でき、仕事が楽しく出来る。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480590857418985473">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>zembutsu さん「Docker の話はどっかでやります」<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480592177819447297">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Serf、軽量オーケストレーションツール。Go 言語製なので wget してきてすぐ使える。メンバ一覧、イベント発生を管理、しかもめっちゃ早い。障害検知・フェイルオーバ機能。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480592907733172224">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Serf、Gossip Protocol を使ってノード間を連携。互いに定期的に情報を送り合う。クラスタに新しくノードを追加する時はどれか 1 つのノードに対して join すれば伝達してくれる。確か Amazon S3 も Gossip Protocol <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480594376469389312">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>パァ( ᐛ ) <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480595181473767424">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>consul の障害検知、/etc/consul.d 配下に json の設定ファイルを書く。check の所にスクリプトを指定する。ちなみに consul の WebUI はこんな感じ <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a> <a href="http://t.co/rkYBY5jKSP">pic.twitter.com/rkYBY5jKSP</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480598332717268992">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>consul の KVS は WebUI からもいじれる <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a> <a href="http://t.co/CSabhMCR3n">pic.twitter.com/CSabhMCR3n</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480598592017539072">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Multi Data-center にすると WebUI がこんな感じになって DC ごとに選べるようになる <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a> <a href="http://t.co/NeX8HViUD1">pic.twitter.com/NeX8HViUD1</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480598749970849792">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>でも僕の所感では Consul の Multi Data-center はあんまり安定してない。設定が悪い気もするけどたまに切断されてしまう。詳しく見れてないので誰か検証して。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480599061351780352">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>envconsul 知らなかった。consul のイベント等をトリガーとして環境変数をいじれる。これを使って障害対応の自動化ができるのでは？と言う話 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480600799324545026">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Serf と Consul には前から注目していて、色々検証はしていたので、</p>

<p>特にとても新しい！ということは無かった。envconsul はあんまり知らなかった。</p>

<p>どちらかといえば @zembutsu さんの頭の中にある Serf や Consul を使ったソリューションみたいなのに興味があって、</p>

<p>スライドはほぼ飛ばされてしまったので、早く上がってくるのを待っている。</p>

<p>あと Multi DC な Consul ちゃんと検証しようかなと思いました。</p>

<p>Serf, Consul を使った自動化の検証もやりたい。</p>

<p>そういえば、オーケストレーションツールの Google Group を @zembutsu さんが作ってました。</p>

<p><a href="https://groups.google.com/forum/?nomobile=true#!forum/orchestration-tech">こちらに参加すると良いと思います！！！</a></p>

<hr />

<h1><a href="http://2014.techfesta.jp/p/program.html#specialnote2">特別講演: Dockerのエンタープライズ開発での活用モデル</a></h1>

<h1><a href="http://2014.techfesta.jp/p/program.html#d51">D51: Docker ― 俺の環境ではその不具合は起きないを撲滅する</a></h1>

<h1><a href="http://2014.techfesta.jp/p/program.html#d52">D52: Dockerで考えるマルチクラウドの未来</a></h1>

<p>Docker, 3 つ一気に。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Docker エンタープライズ活用モデル <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480557870941868032">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Docker のパフォーマンス計測、ハードウェア仮想化と物理と Docker で比較した時、物理と Docker はほぼ同等の速度が出ていたそうで <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480560209140539392">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/search?q=%23ljstudy&amp;src=hash">#ljstudy</a> に出た人はこのへんのかなりディープな話を聞いてしまったので、この辺のやや抽象化された話に気持ち悪さを感じてしまうかもしれないなー、初めて聞いた人には分かりやすい気がするけど。色々説明するのって難しいなー。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480562925615083521">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Docker、軽くて使いやすい！だけじゃなくてハードウェア仮想化じゃないのでディスク周りとか NIC 周りとか割と色々大変な事があるけどその辺ちゃんと気をつければそれなりに使いやすくて便利だよ。という認識でしか無い。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480564169880514560">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Docker が実運用されて Docker 上でサイトを運営してるよ！とか Blue-Green Deployment してるよ！とかそういう話かと思ったら特にそういうわけではなかった <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480568274451566592">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>D51･D52 で座席難民と化した <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480605511008542721">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>カーネル 2.6 の Docker は割と地獄感ある。分かる。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480607181599830018">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>このへんで Mac の電池がもたなさそうだったので全然つぶやけなかった。</p>

<p>6/19 の <a href="http://ljstudy.connpass.com/event/6318/">#ljstudy Docker 勉強会</a> に出てたのもあるし、</p>

<p>Docker 割と触ってたので、とっても新しいということは無かった。</p>

<p>ljstudy の内容が Docker をオーバーキルしてたので、</p>

<p>ljstudy に参加していた人はもしかしたら物足りなかったかもしれない。</p>

<p>Docker に入門する人には良いセッションだったのかも。</p>

<p>みんなどちらかと言うと、</p>

<p>タイトルから、「Docker の本番運用！？」って感じで期待して聞きに来てたかもしれない。</p>

<p>(僕もそのクチだったんだけど。)</p>

<p>でも混乱してきて、Docker を本番運用するメリットみたいなのがあまりよく分からなくなってきてたりもする。</p>

<p>クラウドサービスの一環的な話なら分かる気がするけど、普通のサイトやるにはどうなのかな。</p>

<p>CoreOS の fleet とか etcd とか systemd とかと組み合わせるというのなら未来感ありそうだし、</p>

<p>その辺ももうちょっと色々考える必要がありそう。</p>

<p>流行ってるのですぐ本番運用みたいなのは怖い。(割と痛い目見た)</p>

<p>とはいえ検証環境とか CI 環境とかには本当に本当に便利なので、そういう用途ならどんどん使っていくべきだと思った。</p>

<hr />

<h1><a href="http://2014.techfesta.jp/p/program.html#invitednote">招待講演: 大規模エンターテイメントサイトを支える技術</a></h1>

<p>ツチノコと噂の DMM.com の中の人による講演。</p>

<p>トラフィックが異常に多い大規模インフラの裏の話が聞けるのは大変おもしろかった。</p>

<blockquote class="twitter-tweet" lang="ja"><p>最後。大規模エンターテイメントサイトを支える技術 〜<a href="http://t.co/Ng1Ih0AUit">http://t.co/Ng1Ih0AUit</a> の裏側をお見せします〜 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480621323303923712">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p><a href="http://t.co/Ng1Ih0AUit">http://t.co/Ng1Ih0AUit</a> 東京に三拠点、九州に一拠点、ダークファイバーで DC 感接続。対外接続合計  180Gbps。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480624135513468928">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>物理サーバ 2500〜、仮想サーバ 2000〜、LB 50〜。HyperVisor は VMWare, KVM, Xen... <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480624369492705280">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>最近オープンしたシステム、全て仮想インスタンス。HyperVisor は VMWare。DB 部は LVS 使った冗長構成。プロビジョニングツールは Ansible。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480625251986841602">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>負荷分散。DC 間は GSLB・DNS。Web は SNAT でバランシング。一部 URL マッチによる L7 バランシング。DB サーバは基本的に L2DSR を使っている。A10 や LVS を使っているケースがある。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480626155100184576">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>動画配信の難しさ。ファイルサイズが大きい (大きいストレージが必要)。マルチデバイス対応 (エンコーディングの種類が多い)。負荷予測の困難さ (ロングテールである)。 <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480626991377297409">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>大容量分散ファイルシステム GlusterFS！大容量・拡張性・対障害性・低コスト。苦手な部分があるがちゃんと動いてる。毎日 2TB ずつ増えてる。こわ。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480627315068530688">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>エンコーディング、サーバ 300 台が並列で 24 時間延々とエンコーディング作業を行ってるらしい。ひえー <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480627692983693312">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>メンバ 2 名ぐらいが監視して、コンテンツの負荷に応じてサーバ移動やキャッシュの移動を手動で行っているらしい。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480627896759746561">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>艦◯れのイベント開始時で API サーバの Load が異常に跳ね上がってる。認証画面のトラフィック増で負荷増。Web サーバを増やして対応したらしい。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480628658239836160">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>画像専用サーバに NAND フラッシュメモリを使うことで、低コスト+速さを実現したらしい。<a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480629242196004866">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>ログ収集+解析、fluentd→elasticsearch(json)→kibana (ビジュアライゼーション) <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480629492533059584">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>うちのチームの朝会メニューとほぼ一緒だ <a href="https://twitter.com/search?q=%23techfesta&amp;src=hash">#techfesta</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/statuses/480630731094241280">2014, 6月 22</a></blockquote>


<script async src="http://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ちなみにここで電池が切れた。</p>

<p>DMM 程大きくても、使ってるツールや機器が被ってたり、</p>

<p>朝会のメニューが一緒だったりで、遠くて近い未来という感じがした。</p>

<p>セミナーとか勉強会とか講演とか聞くと、</p>

<p>他の会社はアレコレ自動化されてて便利で一方自分はア〜〜〜という感じになるのだが、</p>

<p>その実、全然遠いというわけでもなくて、とはいえ近いというわけでもないのだけど、</p>

<p>無理ではない程度には近い範囲にいて、すごい努力すると登壇者の領域まで行けるのかもしれないと思った。</p>

<hr />

<h1>懇親会</h1>

<p>ビールのんだ。iPad とか MacBookAir とか貰ってる人が居た。</p>

<hr />

<h1>まとめ</h1>

<p>遠くて近い未来の話を聞いた。</p>

<p>多分大事なのは遠いと思わない事なんだと思う。</p>

<p>とはいえ近いわけでもないので、色々頑張る必要がある。</p>

<p>具体的にはコードを書くとか、同じ作業は三回以上やらない、とか。それはもう基本的な事なんだけど。</p>

<p><a href="http://rrreeeyyy.com/blog/2013/07/15/15-techfesta/">去年参加した時に書いた稚拙な記事</a> に比べると、</p>

<p>ほぼ全てのセッションについていくことが出来たし、自分なりに色々考えることも出来た。</p>

<p>(去年はまさにインフラコード化みたいな領域にまさに踏み込んだ段階で雑魚だった)</p>

<p>そうはいってもまだ雑魚なので、来年参加するときにはもっと進化しておきたい。</p>

<p>LT ぐらいは出来るような実績ができてるといいね。あくまで目標で。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverspec と Infrataster でサーバのテストをする]]></title>
    <link href="http://rrreeeyyy.github.io/blog/2014/05/12/serverspec-and-infrataster/"/>
    <updated>2014-05-12T00:00:00+09:00</updated>
    <id>http://rrreeeyyy.github.io/blog/2014/05/12/serverspec-and-infrataster</id>
    <content type="html"><![CDATA[<p>サーバの構築・運用の効率化の為に Test-Driven Infrastructure をする手法として、</p>

<p><a href="http://serverspec.org/">Serverspec</a> が登場して 1 年近く経ちました。</p>

<p>そして最近、Infrastructure Behavior Testing Framework として、</p>

<p><a href="https://github.com/ryotarai/infrataster">Infrataster</a> が登場しました。</p>

<p>今日は、上記で紹介した 2 つを組み合わせて使用し、</p>

<p>実際にどのようにサーバのテストを行うかについて書きます。</p>

<!--more-->


<hr />

<h1>書くこと・書かないこと</h1>

<h2>&ndash; 書くこと</h2>

<ul>
<li>Serverspec と Infrataster を両方使った Test-Driven Infrastructure の一手法に関して</li>
</ul>


<p>今日書くのは、Serverspec と Infrataster を組み合わせることで、</p>

<p>Serverspec がカバーしている領域と Infrataster がカバーしている領域の両方をテストする一手法に関してです。</p>

<h2>&ndash; 書かないこと</h2>

<ul>
<li>Test-Driven Infrastructure についてのベストプラクティス</li>
<li>TDD や BDD と言ったそもそものテスト手法について</li>
</ul>


<p>これらは、個々人やプロジェクト単位で、ベストプラクティス・手法が異なると思っています。</p>

<p>その為、ここに書いてある事が必ずもベストではありません。(もちろん、マッチする人も居るかもしれません)</p>

<p>また、そもそもの言葉の定義や、Test-Driven Infrastructure のあり方について等は書きません。</p>

<h1>前提</h1>

<ul>
<li>Ruby がインストールされていること <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>bundler がインストールされていること <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ul>


<h1>インストール</h1>

<p>まずは、テストを行うプロジェクト用のディレクトリを用意し、</p>

<p>Serverspec と Infrataster をインストールします。</p>

<p>また、Infrataster で MySQL のテストを行うため、</p>

<p><a href="https://github.com/ryotarai/infrataster-plugin-mysql">infrataster-plugin-mysql</a> も同時にインストールします。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p><code>bash
mkdir servertest
cd servertest
</code></p>

<p>```bash
bundle init
echo &lsquo;gem &ldquo;rake&rdquo;&rsquo; >> Gemfile
echo &lsquo;gem &ldquo;serverspec&rdquo;&rsquo; >> Gemfile
echo &lsquo;gem &ldquo;infrataster&rdquo;&rsquo; >> Gemfile
echo &lsquo;gem &ldquo;infrataster-plugin-mysql&rdquo;&rsquo; >> Gemfile</p>

<p>bundle install &mdash;path vendor/bundle
```</p>

<h1>設定</h1>

<p>ホスト固有の設定値等を用いるために、</p>

<p>Serverspec のテストの実行を、</p>

<p><a href="http://serverspec.org/advanced_tips.html">advanced_tips</a> の &ldquo;How to use host specific properties&rdquo; に沿ったものにします。</p>

<p>Rakefile を以下のように書きます。</p>

<h2>&ndash; Rakefile</h2>

<p><code>bash
$EDITOR Rakefile
</code></p>

<p>```ruby
require &lsquo;rake&rsquo;
require &lsquo;rspec/core/rake_task&rsquo;
require &lsquo;yaml&rsquo;</p>

<p>properties = YAML.load_file(&lsquo;properties.yml&rsquo;)</p>

<p>desc &ldquo;Run serverspec to all hosts&rdquo;
task :spec => &lsquo;serverspec:all&rsquo;</p>

<p>namespace :serverspec do
  task :all => properties.keys.map {|key| &lsquo;serverspec:&rsquo; + key.split(&lsquo;.&rsquo;)[0] }
  properties.keys.each do |key|</p>

<pre><code>desc "Run serverspec to #{key}"
RSpec::Core::RakeTask.new(key.split('.')[0].to_sym) do |t|
  ENV['TARGET_HOST'] = key
  t.pattern = 'spec/{' + properties[key][:roles].join(',') + '}/*_spec.rb'
end
</code></pre>

<p>  end
end
```</p>

<h2>spec_helper.rb</h2>

<p>次に spec というディレクトリを作成しておき、</p>

<p>spec 配下に spec_helper.rb を生成します。</p>

<p><code>bash
mkdir spec
$EDITOR spec/spec_helper.rb
</code></p>

<p>ここで、Serverspec の設定と Infrataster のサーバ定義を同時に行います。</p>

<p>```ruby
require &lsquo;serverspec&rsquo;
require &lsquo;pathname&rsquo;
require &lsquo;net/ssh&rsquo;
require &lsquo;yaml&rsquo;
require &lsquo;infrataster/rspec&rsquo;
require &lsquo;infrataster-plugin-mysql&rsquo;</p>

<p>include Serverspec::Helper::Ssh
include Serverspec::Helper::DetectOS
include Serverspec::Helper::Properties</p>

<p>properties = YAML.load_file(&lsquo;properties.yml&rsquo;)</p>

<p>properties.keys.each do |host|
  Infrataster::Server.define(</p>

<pre><code>properties[host][:name],
host,
ssh: {host_name: host, user: properties[host][:user], keys: ['~/.ssh/id_rsa']},
from: properties[host][:from],
mysql: {user: properties[host][:mysql_user], password: properties[host][:mysql_password]}
</code></pre>

<p>  )
end</p>

<p>RSpec.configure do |c|
  c.host  = ENV[&lsquo;TARGET_HOST&rsquo;]
  set_property properties[c.host]
  options = Net::SSH::Config.for(c.host)
  user    = options[:user] || Etc.getlogin
  c.ssh   = Net::SSH.start(c.host, user, options)
  c.os    = backend.check_os
end
```</p>

<h2>&ndash; properties.yml</h2>

<p>ホスト毎の定義や設定値を書く yaml ですが、</p>

<p>ここでは以下のような例にします。</p>

<p><code>bash
$EDITOR properties.yml
</code></p>

<p>``` yaml
rrreeeyyy.com:
  :roles:</p>

<pre><code>- base
</code></pre>

<p>  :name: :proxy
  :user: :rrreeeyyy</p>

<p>web-01.rrreeeyyy.com:
  :roles:</p>

<pre><code>- base
- web
</code></pre>

<p>  :name: :web
  :user: :rrreeeyyy</p>

<p>db-01.rrreeeyyy.com:
  :roles:</p>

<pre><code>- base
- db
</code></pre>

<p>  :name: :db
  :user: :rrreeeyyy
  :from: :web
  :mysql_user: &lsquo;username&rsquo;
  :mysql_password: &lsquo;password&rsquo;
```</p>

<p>こうすることで、Serverspec では以下のホストに対し任意のテストを実行します。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<ul>
<li>rrreeeyyy.com</li>
<li>web-01.rrreeeyyy.com</li>
<li>db-01.rrreeeyyy.com</li>
</ul>


<p>また、Infrataster 側では、以下のホストが定義されたことになります。</p>

<ul>
<li>:proxy</li>
<li>:web</li>
<li>:db</li>
</ul>


<h1>テストを書く</h1>

<p>先ほど yaml ファイルで定義した role 毎にディレクトリを作成します。</p>

<p>その配下に置かれた *_spec.rb というファイルは、テスト実行時に全て実行されます。</p>

<p>spec 配下のディレクトリ構成を以下のようにします。</p>

<p>```
.
├── base
│   └── base_spec.rb
├── db
│   └── db_spec.rb
├── spec_helper.rb
└── web</p>

<pre><code>└── web_spec.rb
</code></pre>

<p>```</p>

<p>それぞれの spec ファイルについて見ていきます。</p>

<h2>&ndash; base_spec.rb</h2>

<p>全てのホストの role に base がついているので、</p>

<p>この spec ファイルに書いてあるテストは、定義した全てのホストで実行されます。</p>

<p>そのため、22 番ポートが Listen しているかをテストしています。</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe port(22) do
  it { should be_listening }
end
```</p>

<p>他にも、ntp や sysctl の設定などで、全ホストで共通するものを書いていくと良いと思います。</p>

<p>もちろん、ディレクトリ内にある *_spec.rb ファイルは全て実行されるため、</p>

<p>ntp_spec.rb, sshd_spec.rb, sysctl_spec.rb 等に分けても問題ありません。</p>

<p>むしろ、テストが肥大化してきたらファイルを分割するべきかと思います。</p>

<p>にも、ntp や sysctl の設定などで、全ホストで共通するものを書いていくと良いと思います。</p>

<p>もちろん、ディレクトリ内にある *_spec.rb ファイルは全て実行されるため、</p>

<p>ntp_spec.rb, sshd_spec.rb, sysctl_spec.rb 等に分けても問題ありません。</p>

<p>むしろ、テストが肥大化してきたらファイルを分割するべきかと思います。</p>

<h2>&ndash; web_spec.rb</h2>

<p>web_spec.rb は web ディレクトリ配下にあるため、</p>

<p>role に web がついている、web-01.rrreeeyyy.com サーバでのみ実行されます。</p>

<p>80 番ポートが Listen していることに加えて、</p>

<p>rrreeeyyy.com へアクセスし、レスポンスに &lsquo;rrreeeyyy &ndash; Powered by&rsquo; が含まれていること、</p>

<p>レスポンスヘッダの content-type が text/html であることをテストしています。</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe port(80) do
  it { should be_listening }
end</p>

<p>describe server(property[:name]) do
  describe http(&lsquo;<a href="http://">http://</a>&rsquo; + ENV[&lsquo;TARGET_HOST&rsquo;].gsub(&lsquo;web-01.&rsquo;,&lsquo;&rsquo;)) do</p>

<pre><code>it "responds content including 'rrreeeyyy - Powered by'" do
  expect(response.body).to include('rrreeeyyy - Powered by')
end
it "responds as 'text/html'" do
  expect(response.headers['content-type']).to match(%r{^text/html})
end
</code></pre>

<p>  end
end
```</p>

<p>なお、Infrataster の http は Ruby HTTP クライアントライブラリである Faraday を使用しています。</p>

<p>後述の :from を用いると、特定のホストからアクセスした時にどのように表示されるか、などもテスト可能です。</p>

<p>また、Web アプリケーションのテストフレームワークである Capybara を使用することも可能なので、</p>

<p>複雑な Web アプリケーションのルーティング等もテスト可能だと思われます。</p>

<h2>&ndash; db_spec.rb</h2>

<p>db_spec.rb は db ディレクトリ配下にあるため、</p>

<p>role に db がついている、db-01.rrreeeyyy.com サーバでのみ実行されます。</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe port(3306) do
  it { should be_listening }
end</p>

<p>describe server(:db) do
  describe mysql_query(&lsquo;SHOW STATUS&rsquo;) do</p>

<pre><code>it 'returns positive uptime' do
  row = results.find {|r| r['Variable_name'] == 'Uptime' }
  expect(row['Value'].to_i).to be &gt; 0
end
</code></pre>

<p>  end
end
```</p>

<p>Infrataster は :from が付いていると、定義されたサーバからの振る舞いをテストします。</p>

<p>今回の場合、db サーバには :from :web が付いている為、</p>

<p>web-01 サーバから db-01 サーバへ MySQL で接続できるかをテストします。</p>

<p>仕組みとしては、db-01 サーバの 3306 番ポートを、</p>

<p>web-01 サーバを経由してローカルへ SSH ポートフォワードします。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<p>その後、Ruby の mysql2 ライブラリを用いて、クエリを発行します。</p>

<p>なお、3306 番ポートが LISTEN しているかどうかテストする部分に関しては、</p>

<p>Serverspec の管轄内になるので、内部的には db-01 サーバに SSH して、</p>

<p>netstat の結果を取得してテストしています。</p>

<h1>何がいいか、どんな風にテストを書いていくかの例</h1>

<h2>&ndash; 何がいいか</h2>

<p>Serverspec と Infrataster はテスト対象のレイヤーが少々異なっています。</p>

<p>Infrataster は 次の記事のように、nginx のルーティングをテストしたり、</p>

<ul>
<li><a href="http://apehuci-kitaitimakoto.sqale.jp/apehuci/?date=20140505">[Infrataster] InfratasterでNginxのルーティングのテスト書いてる</a></li>
</ul>


<p>MySQL のクエリを発行し、その結果をテストするなど、</p>

<p>かなりアプリケーションに近いレイヤーでのテストを行います。</p>

<p>その一方で、サーバ内にインストール済のパッケージや、設定ファイルの詳細をテストするのはやや困難です。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>

<p>Serverspec では、サーバ内の設定や、導入済みのパッケージなど、</p>

<p>Infrataster よりやや低いレイヤーにフォーカスしてテストを行うのが得意なように見えます。</p>

<p>その一方で、MySQL のクエリを発行した結果をテストするのはやや困難です。</p>

<p>この 2 つを組み合わせて使用することにより、サーバのより広いレイヤーに対してテストを行うことが可能になります。</p>

<h2>&ndash; どんな風にテストを書いていくかの例</h2>

<p>あくまで一例ですが、頭の整理的にこんな使い方も出来ます。</p>

<h3>&ndash; Web アプリをデプロイする対象のサーバ構築をテストしたい</h3>

<ul>
<li>デプロイする Web アプリは &lsquo;Hello World&rsquo; と画面に出力する</li>
</ul>


<p>まずこれを書く</p>

<p>``` ruby
describe http(&lsquo;<a href="http://app">http://app</a>&rsquo;) do
  it &ldquo;responds content including &lsquo;Hello World&rsquo;&rdquo; do</p>

<pre><code>expect(response.body).to include('Hello World')
</code></pre>

<p>  end
end
```</p>

<p>当然失敗するわけです。</p>

<ul>
<li>そうだ、Web アプリがレスポンスを返すためには 80 番ポートを Listen する必要があるなあ</li>
</ul>


<p>``` ruby
describe port(80) do
  it { should be_listening }
end</p>

<p>describe http(&lsquo;<a href="http://app">http://app</a>&rsquo;) do
  it &ldquo;responds content including &lsquo;Hello World&rsquo;&rdquo; do</p>

<pre><code>expect(response.body).to include('Hello World')
</code></pre>

<p>  end
end
```</p>

<p>上にテストを書きます。</p>

<ul>
<li>そうだ、80 番ポートを Listen するためには httpd が入っている必要があるなあ</li>
</ul>


<p>``` ruby
describe package(&lsquo;httpd&rsquo;) do
  it { should be_installed }
end</p>

<p>describe port(80) do
  it { should be_listening }
end</p>

<p>describe http(&lsquo;<a href="http://app">http://app</a>&rsquo;) do
  it &ldquo;responds content including &lsquo;Hello World&rsquo;&rdquo; do</p>

<pre><code>expect(response.body).to include('Hello World')
</code></pre>

<p>  end
end
```</p>

<p>更に上にテストを書きます。</p>

<p>ここで初めて、ansible や chef の playbook や cookbook を書き始めます。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p>そしてテストをすると、一番上のテストは通るわけです、じゃあ次は 80 番ポートの Listen ,</p>

<p>じゃあ次は index.html の設置 &hellip; 等とコードベースでテストをしながらサーバを構築していく。</p>

<p>&hellip; なんて方法も、ありじゃないでしょうか？</p>

<h1>まとめ</h1>

<ul>
<li>サーバ構築のテストツールである Serverspec と Infrataster を一緒に使うテスト手法について説明

<ul>
<li>広いレイヤーでテストが出来る

<ul>
<li>Nginx のルーティングや、MySQL のクエリ実行結果 (Infrataster)</li>
<li>特定のホストから見た、他のテストの振る舞い (Infrataster)</li>
<li>サーバにインストールされているプロダクトの設定ファイルの詳細 (Serverspec)</li>
<li>サーバの iptables の設定値 (Serverspec)</li>
</ul>
</li>
</ul>
</li>
<li>Serverspec と Infrataster を使ったテスト駆動インフラ構築の一例

<ul>
<li>目的からトップダウンでテストを書いて、ボトムアップで構築していく方法</li>
<li>あくまで一例なので、合う合わないは当然ある</li>
</ul>
</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>本記事では 2.1.2 で検証しましたが、1.9 以降なら恐らく正常動作するでしょう。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>gem install bundler で入ります。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Ruby の mysql ライブラリのインストール時に、mysql-devel のようなライブラリを必要とします。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>もちろん、この時点ではまだテストを書いていないので、何も実行されません。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>ポート番号は、Infrataster::Server.define の mysql に port オプションを与えれば変更可能です。<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>ssh.exec を用いれば可能に見えます。それは serverspec の command で mysql クエリを発行すれば infrataster のテストが出来るのと同じように。<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>あるいは、涙を流しながら手で yum install httpd を実行します。<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#18 mruby-ipvs を実装し卒業論文を書きました]]></title>
    <link href="http://rrreeeyyy.github.io/blog/2014/03/17/mruby-ipvs/"/>
    <updated>2014-03-17T00:00:00+09:00</updated>
    <id>http://rrreeeyyy.github.io/blog/2014/03/17/mruby-ipvs</id>
    <content type="html"><![CDATA[<p>Linux の L4 ロードバランサ機能である IPVS を、</p>

<p>mruby から利用できるようにする mruby-ipvs という mrbgem を実装し、</p>

<p>その mruby-ipvs に関して卒業論文を書きました。</p>

<!--more-->


<hr />

<h1>動機</h1>

<p><a href="http://www.uec.ac.jp/">電気通信大学</a> という大学の 4 年生に無事進級できた為、</p>

<p>卒業論文を書く必要がありました。</p>

<p>大学に通いながら、<a href="http://heartbeats.jp/">株式会社ハートビーツ</a> で学生スタッフとして働いていた経験上、</p>

<p>Linux カーネル内に実装されている L4 ロードバランサ機能である <a href="http://www.linuxvirtualserver.org/software/ipvs.html">IP Virtual Server</a> (IPVS) の、</p>

<p>インタフェースに不便しており、なんとかしたいという気持ちがありました。</p>

<p>個人的に Ruby が好きであることに加え、<a href="http://www.getchef.com/chef/">Chef</a> に代表されるような、</p>

<p>インフラストラクチャ自動化フレームワークが Ruby で書かれ始めていること、</p>

<p>更に、<a href="https://github.com/matsumoto-r/mod_mruby">mod_mruby</a> といった <a href="http://forum.mruby.org/">mruby</a> を用いたインタフェースの登場もあり、</p>

<p>卒業論文のテーマとして、IPVS のインタフェースを mruby で実装することを選択しました。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<hr />

<h1>mruby-ipvs について</h1>

<p>mruby-ipvs は、先述の通り Linux の L4 ロードバランサ機能である IPVS を、</p>

<p>mruby から操作できるようにした mrbgem です。</p>

<p>今のところ、mgem コマンドからインストールすることが出来ないため、<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>build_config.rb や gembox を直接編集し、任意の場所に下記を追記するなどしてください。</p>

<p><code>
  conf.gem :git =&gt; 'https://github.com/rrreeeyyy/mruby-ipvs'
</code></p>

<p>リポジトリの example にありますが、下記のように記述することが出来ます。</p>

<p>```ruby
s = IPVS::Service.new({
  &lsquo;addr&rsquo; => &lsquo;10.0.0.1:80&rsquo;,
  &lsquo;port&rsquo; => 80,
  &lsquo;sched_name&rsquo; => &lsquo;wrr&rsquo;
}).add_service
d1 = IPVS::Dest.new({
  &lsquo;addr&rsquo; => &lsquo;192.168.0.1&rsquo;,
  &lsquo;port&rsquo; => 80,
  &lsquo;weight&rsquo; => 1
})
d2 = IPVS::Dest.new({
  &lsquo;addr&rsquo; => &lsquo;192.168.0.2&rsquo;,
  &lsquo;port&rsquo; => 80,
  &lsquo;weight&rsquo; => 1
})
s.add_dest(d1)
s.add_dest(d2)</p>

<p>d1.weight = 3
```</p>

<p>Service と Destination をそれぞれインスタンスとして生成します。</p>

<p>Service は add_service や del_service することで、</p>

<p>IPVS に登録したり削除したりすることが出来ます。</p>

<p>Destination は Service インスタンスの add_dest メソッドの引数に渡すことで、</p>

<p>その Service の Destination として IPVS に登録されます。</p>

<p>インスタンスを作る際の引数の与え方で、振り分けメソッドや重みなどを変更できます。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p><a href="https://github.com/rrreeeyyy/mruby-ipvs/blob/master/example/keepalived.rb">こんな感じ</a> に書くことで、Keepalived のような構文で書くことも出来たりします。</p>

<p>将来的には、他の mrbgem を用いてヘルスチェックを行いながら、</p>

<p>動的に振り分け先を追加したり、重みを変更したり、何らかのスクリプトを実行したり…など、</p>

<p>IPVS にまつわる操作を自動化する一助になればいいなと思っています。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<hr />

<h1>リポジトリ</h1>

<p><a href="https://github.com/rrreeeyyy/mruby-ipvs">mruby-ipvs</a></p>

<p>正直、コードの質が良くなかったり、未実装な部分がかなりあるのですが、</p>

<p>使えることには使えるので公開します。</p>

<p>今月で無事に大学を卒業出来るようですが、実装は続けようと思っているので、</p>

<p>pull-request やバグ報告などあれば頂けると幸いです。</p>

<p>今後にご期待ください。</p>

<p>近日中に mgem からインストールできるように pull-request を出したいと思っています。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<hr />

<h1>論文</h1>

<p><a href="http://rrreeeyyy.com/thesis/thesis.pdf">論文</a></p>

<p><a href="http://rrreeeyyy.com/thesis/GraduationSlide.pdf">発表スライド</a></p>

<p>論文に関しては、構成がめちゃくちゃだったり、</p>

<p>誤りがあるような気がする箇所がそれなりにあるのですが、</p>

<p>読めることには読めるので公開します。(あんまり見ないで下さい)</p>

<hr />

<h1>謝辞</h1>

<p>所属していた <a href="http://ipl-www.cs.uec.ac.jp/dokuwiki/public/start">岩崎・中野・鵜川研究室</a> の皆様には大変お世話になりました。</p>

<p>(特に、指導教員の皆様や、助言を頂いた諸先輩方、更に僕の論文の誤りを最も多く検出してくれた <a href="https://twitter.com/nari_ex">@nari_ex</a> さん)</p>

<p>また、<a href="http://heartbeats.jp/">株式会社ハートビーツ</a> の皆様にも大変お世話になりました。</p>

<p>(特に、誕生日プレゼントと称して研究室に物資を送り届けてくれた <a href="https://twitter.com/ka_maekawa/">@ka_maekawa</a> さん)</p>

<p>更に、<a href="https://github.com/matsumoto-r/mod_mruby">mod_mruby</a> の作者である <a href="https://twitter.com/matsumotory">@matsumotory</a> さんに、</p>

<p>直接の面識やお話したことはないものの、研究の動機を与えてくださったことに感謝申し上げます。</p>

<p>また、mruby に関する様々な情報を Web 上に公開してくださってるみなさん、大変参考になりました。</p>

<p>ありがとうございました。</p>

<hr />

<p>2014/3/18 0:16 追記</p>

<p>無事、mgem-list に pull-request を出し、<a href="https://github.com/mruby/mgem-list/pull/72">mergeされました</a></p>

<p>ので、今後は mgem コマンドから build_config.rb の追記分を生成することが出来ます。</p>

<p>mgem の使い方に関しては、<a href="http://blog.matsumoto-r.jp/?p=3310">今日からmrubyをはじめる人へ</a> が大変参考になるので、</p>

<p>そちらをご覧ください。"mruby-ipvs" という名前で登録してあります。</p>

<hr />

<p>※このブログの内容は個人の見解であり、所属する組織の公式見解でも組織を代表するものでもありません※</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>更に、C 言語で書かれた libipvs を使用するのに、mruby で実装することが都合がよかったのです<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>すみません！ ※2014/3/18 に追加されました<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>未実装のパラメータがいくつもあります<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>そのためには未実装の箇所が多すぎます<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>大阪行きの新幹線の中で書いているので、大阪から帰ってきたらにします。<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
