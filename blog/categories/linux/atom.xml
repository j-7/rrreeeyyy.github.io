<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | rrreeeyyy.com]]></title>
  <link href="https://rrreeeyyy.com//blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://rrreeeyyy.com//"/>
  <updated>2016-01-04T17:33:55+09:00</updated>
  <id>https://rrreeeyyy.com//</id>
  <author>
    <name><![CDATA[rrreeeyyy]]></name>
    <email><![CDATA[yoshikawa@rrreeeyyy.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[July Tech Festa 2015 ( #jtf2015 ) に行って #wakateinfra として喋りました]]></title>
    <link href="https://rrreeeyyy.com//blog/2014/06/23/techfesta/"/>
    <updated>2014-06-23T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.com//blog/2014/06/23/techfesta</id>
    <content type="html"><![CDATA[<p>一昨年、昨年に引き続き、July Tech Festa (2015) に行きました。</p>

<p>今年は登壇側でした。</p>

<!--more-->


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverspec と Infrataster でサーバのテストをする]]></title>
    <link href="https://rrreeeyyy.com//blog/2014/05/12/serverspec-and-infrataster/"/>
    <updated>2014-05-12T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.com//blog/2014/05/12/serverspec-and-infrataster</id>
    <content type="html"><![CDATA[<p>サーバの構築・運用の効率化の為に Test-Driven Infrastructure をする手法として、</p>

<p><a href="http://serverspec.org/">Serverspec</a> が登場して 1 年近く経ちました。</p>

<p>そして最近、Infrastructure Behavior Testing Framework として、</p>

<p><a href="https://github.com/ryotarai/infrataster">Infrataster</a> が登場しました。</p>

<p>今日は、上記で紹介した 2 つを組み合わせて使用し、</p>

<p>実際にどのようにサーバのテストを行うかについて書きます。</p>

<!--more-->


<hr />

<h1>書くこと・書かないこと</h1>

<h2>&ndash; 書くこと</h2>

<ul>
<li>Serverspec と Infrataster を両方使った Test-Driven Infrastructure の一手法に関して</li>
</ul>


<p>今日書くのは、Serverspec と Infrataster を組み合わせることで、</p>

<p>Serverspec がカバーしている領域と Infrataster がカバーしている領域の両方をテストする一手法に関してです。</p>

<h2>&ndash; 書かないこと</h2>

<ul>
<li>Test-Driven Infrastructure についてのベストプラクティス</li>
<li>TDD や BDD と言ったそもそものテスト手法について</li>
</ul>


<p>これらは、個々人やプロジェクト単位で、ベストプラクティス・手法が異なると思っています。</p>

<p>その為、ここに書いてある事が必ずもベストではありません。(もちろん、マッチする人も居るかもしれません)</p>

<p>また、そもそもの言葉の定義や、Test-Driven Infrastructure のあり方について等は書きません。</p>

<h1>前提</h1>

<ul>
<li>Ruby がインストールされていること <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>bundler がインストールされていること <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ul>


<h1>インストール</h1>

<p>まずは、テストを行うプロジェクト用のディレクトリを用意し、</p>

<p>Serverspec と Infrataster をインストールします。</p>

<p>また、Infrataster で MySQL のテストを行うため、</p>

<p><a href="https://github.com/ryotarai/infrataster-plugin-mysql">infrataster-plugin-mysql</a> も同時にインストールします。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p><code>bash
mkdir servertest
cd servertest
</code></p>

<p>```bash
bundle init
echo &lsquo;gem &ldquo;rake&rdquo;&rsquo; >> Gemfile
echo &lsquo;gem &ldquo;serverspec&rdquo;&rsquo; >> Gemfile
echo &lsquo;gem &ldquo;infrataster&rdquo;&rsquo; >> Gemfile
echo &lsquo;gem &ldquo;infrataster-plugin-mysql&rdquo;&rsquo; >> Gemfile</p>

<p>bundle install &mdash;path vendor/bundle
```</p>

<h1>設定</h1>

<p>ホスト固有の設定値等を用いるために、</p>

<p>Serverspec のテストの実行を、</p>

<p><a href="http://serverspec.org/advanced_tips.html">advanced_tips</a> の &ldquo;How to use host specific properties&rdquo; に沿ったものにします。</p>

<p>Rakefile を以下のように書きます。</p>

<h2>&ndash; Rakefile</h2>

<p><code>bash
$EDITOR Rakefile
</code></p>

<p>```ruby
require &lsquo;rake&rsquo;
require &lsquo;rspec/core/rake_task&rsquo;
require &lsquo;yaml&rsquo;</p>

<p>properties = YAML.load_file(&lsquo;properties.yml&rsquo;)</p>

<p>desc &ldquo;Run serverspec to all hosts&rdquo;
task :spec => &lsquo;serverspec:all&rsquo;</p>

<p>namespace :serverspec do
  task :all => properties.keys.map {|key| &lsquo;serverspec:&rsquo; + key.split(&lsquo;.&rsquo;)[0] }
  properties.keys.each do |key|</p>

<pre><code>desc "Run serverspec to #{key}"
RSpec::Core::RakeTask.new(key.split('.')[0].to_sym) do |t|
  ENV['TARGET_HOST'] = key
  t.pattern = 'spec/{' + properties[key][:roles].join(',') + '}/*_spec.rb'
end
</code></pre>

<p>  end
end
```</p>

<h2>spec_helper.rb</h2>

<p>次に spec というディレクトリを作成しておき、</p>

<p>spec 配下に spec_helper.rb を生成します。</p>

<p><code>bash
mkdir spec
$EDITOR spec/spec_helper.rb
</code></p>

<p>ここで、Serverspec の設定と Infrataster のサーバ定義を同時に行います。</p>

<p>```ruby
require &lsquo;serverspec&rsquo;
require &lsquo;pathname&rsquo;
require &lsquo;net/ssh&rsquo;
require &lsquo;yaml&rsquo;
require &lsquo;infrataster/rspec&rsquo;
require &lsquo;infrataster-plugin-mysql&rsquo;</p>

<p>include Serverspec::Helper::Ssh
include Serverspec::Helper::DetectOS
include Serverspec::Helper::Properties</p>

<p>properties = YAML.load_file(&lsquo;properties.yml&rsquo;)</p>

<p>properties.keys.each do |host|
  Infrataster::Server.define(</p>

<pre><code>properties[host][:name],
host,
ssh: {host_name: host, user: properties[host][:user], keys: ['~/.ssh/id_rsa']},
from: properties[host][:from],
mysql: {user: properties[host][:mysql_user], password: properties[host][:mysql_password]}
</code></pre>

<p>  )
end</p>

<p>RSpec.configure do |c|
  c.host  = ENV[&lsquo;TARGET_HOST&rsquo;]
  set_property properties[c.host]
  options = Net::SSH::Config.for(c.host)
  user    = options[:user] || Etc.getlogin
  c.ssh   = Net::SSH.start(c.host, user, options)
  c.os    = backend.check_os
end
```</p>

<h2>&ndash; properties.yml</h2>

<p>ホスト毎の定義や設定値を書く yaml ですが、</p>

<p>ここでは以下のような例にします。</p>

<p><code>bash
$EDITOR properties.yml
</code></p>

<p>``` yaml
rrreeeyyy.com:
  :roles:</p>

<pre><code>- base
</code></pre>

<p>  :name: :proxy
  :user: :rrreeeyyy</p>

<p>web-01.rrreeeyyy.com:
  :roles:</p>

<pre><code>- base
- web
</code></pre>

<p>  :name: :web
  :user: :rrreeeyyy</p>

<p>db-01.rrreeeyyy.com:
  :roles:</p>

<pre><code>- base
- db
</code></pre>

<p>  :name: :db
  :user: :rrreeeyyy
  :from: :web
  :mysql_user: &lsquo;username&rsquo;
  :mysql_password: &lsquo;password&rsquo;
```</p>

<p>こうすることで、Serverspec では以下のホストに対し任意のテストを実行します。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<ul>
<li>rrreeeyyy.com</li>
<li>web-01.rrreeeyyy.com</li>
<li>db-01.rrreeeyyy.com</li>
</ul>


<p>また、Infrataster 側では、以下のホストが定義されたことになります。</p>

<ul>
<li>:proxy</li>
<li>:web</li>
<li>:db</li>
</ul>


<h1>テストを書く</h1>

<p>先ほど yaml ファイルで定義した role 毎にディレクトリを作成します。</p>

<p>その配下に置かれた *_spec.rb というファイルは、テスト実行時に全て実行されます。</p>

<p>spec 配下のディレクトリ構成を以下のようにします。</p>

<p>```
.
├── base
│   └── base_spec.rb
├── db
│   └── db_spec.rb
├── spec_helper.rb
└── web</p>

<pre><code>└── web_spec.rb
</code></pre>

<p>```</p>

<p>それぞれの spec ファイルについて見ていきます。</p>

<h2>&ndash; base_spec.rb</h2>

<p>全てのホストの role に base がついているので、</p>

<p>この spec ファイルに書いてあるテストは、定義した全てのホストで実行されます。</p>

<p>そのため、22 番ポートが Listen しているかをテストしています。</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe port(22) do
  it { should be_listening }
end
```</p>

<p>他にも、ntp や sysctl の設定などで、全ホストで共通するものを書いていくと良いと思います。</p>

<p>もちろん、ディレクトリ内にある *_spec.rb ファイルは全て実行されるため、</p>

<p>ntp_spec.rb, sshd_spec.rb, sysctl_spec.rb 等に分けても問題ありません。</p>

<p>むしろ、テストが肥大化してきたらファイルを分割するべきかと思います。</p>

<p>にも、ntp や sysctl の設定などで、全ホストで共通するものを書いていくと良いと思います。</p>

<p>もちろん、ディレクトリ内にある *_spec.rb ファイルは全て実行されるため、</p>

<p>ntp_spec.rb, sshd_spec.rb, sysctl_spec.rb 等に分けても問題ありません。</p>

<p>むしろ、テストが肥大化してきたらファイルを分割するべきかと思います。</p>

<h2>&ndash; web_spec.rb</h2>

<p>web_spec.rb は web ディレクトリ配下にあるため、</p>

<p>role に web がついている、web-01.rrreeeyyy.com サーバでのみ実行されます。</p>

<p>80 番ポートが Listen していることに加えて、</p>

<p>rrreeeyyy.com へアクセスし、レスポンスに &lsquo;rrreeeyyy &ndash; Powered by&rsquo; が含まれていること、</p>

<p>レスポンスヘッダの content-type が text/html であることをテストしています。</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe port(80) do
  it { should be_listening }
end</p>

<p>describe server(property[:name]) do
  describe http(&lsquo;<a href="http://">http://</a>&rsquo; + ENV[&lsquo;TARGET_HOST&rsquo;].gsub(&lsquo;web-01.&rsquo;,&lsquo;&rsquo;)) do</p>

<pre><code>it "responds content including 'rrreeeyyy - Powered by'" do
  expect(response.body).to include('rrreeeyyy - Powered by')
end
it "responds as 'text/html'" do
  expect(response.headers['content-type']).to match(%r{^text/html})
end
</code></pre>

<p>  end
end
```</p>

<p>なお、Infrataster の http は Ruby HTTP クライアントライブラリである Faraday を使用しています。</p>

<p>後述の :from を用いると、特定のホストからアクセスした時にどのように表示されるか、などもテスト可能です。</p>

<p>また、Web アプリケーションのテストフレームワークである Capybara を使用することも可能なので、</p>

<p>複雑な Web アプリケーションのルーティング等もテスト可能だと思われます。</p>

<h2>&ndash; db_spec.rb</h2>

<p>db_spec.rb は db ディレクトリ配下にあるため、</p>

<p>role に db がついている、db-01.rrreeeyyy.com サーバでのみ実行されます。</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe port(3306) do
  it { should be_listening }
end</p>

<p>describe server(:db) do
  describe mysql_query(&lsquo;SHOW STATUS&rsquo;) do</p>

<pre><code>it 'returns positive uptime' do
  row = results.find {|r| r['Variable_name'] == 'Uptime' }
  expect(row['Value'].to_i).to be &gt; 0
end
</code></pre>

<p>  end
end
```</p>

<p>Infrataster は :from が付いていると、定義されたサーバからの振る舞いをテストします。</p>

<p>今回の場合、db サーバには :from :web が付いている為、</p>

<p>web-01 サーバから db-01 サーバへ MySQL で接続できるかをテストします。</p>

<p>仕組みとしては、db-01 サーバの 3306 番ポートを、</p>

<p>web-01 サーバを経由してローカルへ SSH ポートフォワードします。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<p>その後、Ruby の mysql2 ライブラリを用いて、クエリを発行します。</p>

<p>なお、3306 番ポートが LISTEN しているかどうかテストする部分に関しては、</p>

<p>Serverspec の管轄内になるので、内部的には db-01 サーバに SSH して、</p>

<p>netstat の結果を取得してテストしています。</p>

<h1>何がいいか、どんな風にテストを書いていくかの例</h1>

<h2>&ndash; 何がいいか</h2>

<p>Serverspec と Infrataster はテスト対象のレイヤーが少々異なっています。</p>

<p>Infrataster は 次の記事のように、nginx のルーティングをテストしたり、</p>

<ul>
<li><a href="http://apehuci-kitaitimakoto.sqale.jp/apehuci/?date=20140505">[Infrataster] InfratasterでNginxのルーティングのテスト書いてる</a></li>
</ul>


<p>MySQL のクエリを発行し、その結果をテストするなど、</p>

<p>かなりアプリケーションに近いレイヤーでのテストを行います。</p>

<p>その一方で、サーバ内にインストール済のパッケージや、設定ファイルの詳細をテストするのはやや困難です。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>

<p>Serverspec では、サーバ内の設定や、導入済みのパッケージなど、</p>

<p>Infrataster よりやや低いレイヤーにフォーカスしてテストを行うのが得意なように見えます。</p>

<p>その一方で、MySQL のクエリを発行した結果をテストするのはやや困難です。</p>

<p>この 2 つを組み合わせて使用することにより、サーバのより広いレイヤーに対してテストを行うことが可能になります。</p>

<h2>&ndash; どんな風にテストを書いていくかの例</h2>

<p>あくまで一例ですが、頭の整理的にこんな使い方も出来ます。</p>

<h3>&ndash; Web アプリをデプロイする対象のサーバ構築をテストしたい</h3>

<ul>
<li>デプロイする Web アプリは &lsquo;Hello World&rsquo; と画面に出力する</li>
</ul>


<p>まずこれを書く</p>

<p>``` ruby
describe http(&lsquo;<a href="http://app">http://app</a>&rsquo;) do
  it &ldquo;responds content including &lsquo;Hello World&rsquo;&rdquo; do</p>

<pre><code>expect(response.body).to include('Hello World')
</code></pre>

<p>  end
end
```</p>

<p>当然失敗するわけです。</p>

<ul>
<li>そうだ、Web アプリがレスポンスを返すためには 80 番ポートを Listen する必要があるなあ</li>
</ul>


<p>``` ruby
describe port(80) do
  it { should be_listening }
end</p>

<p>describe http(&lsquo;<a href="http://app">http://app</a>&rsquo;) do
  it &ldquo;responds content including &lsquo;Hello World&rsquo;&rdquo; do</p>

<pre><code>expect(response.body).to include('Hello World')
</code></pre>

<p>  end
end
```</p>

<p>上にテストを書きます。</p>

<ul>
<li>そうだ、80 番ポートを Listen するためには httpd が入っている必要があるなあ</li>
</ul>


<p>``` ruby
describe package(&lsquo;httpd&rsquo;) do
  it { should be_installed }
end</p>

<p>describe port(80) do
  it { should be_listening }
end</p>

<p>describe http(&lsquo;<a href="http://app">http://app</a>&rsquo;) do
  it &ldquo;responds content including &lsquo;Hello World&rsquo;&rdquo; do</p>

<pre><code>expect(response.body).to include('Hello World')
</code></pre>

<p>  end
end
```</p>

<p>更に上にテストを書きます。</p>

<p>ここで初めて、ansible や chef の playbook や cookbook を書き始めます。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p>そしてテストをすると、一番上のテストは通るわけです、じゃあ次は 80 番ポートの Listen ,</p>

<p>じゃあ次は index.html の設置 &hellip; 等とコードベースでテストをしながらサーバを構築していく。</p>

<p>&hellip; なんて方法も、ありじゃないでしょうか？</p>

<h1>まとめ</h1>

<ul>
<li>サーバ構築のテストツールである Serverspec と Infrataster を一緒に使うテスト手法について説明

<ul>
<li>広いレイヤーでテストが出来る

<ul>
<li>Nginx のルーティングや、MySQL のクエリ実行結果 (Infrataster)</li>
<li>特定のホストから見た、他のテストの振る舞い (Infrataster)</li>
<li>サーバにインストールされているプロダクトの設定ファイルの詳細 (Serverspec)</li>
<li>サーバの iptables の設定値 (Serverspec)</li>
</ul>
</li>
</ul>
</li>
<li>Serverspec と Infrataster を使ったテスト駆動インフラ構築の一例

<ul>
<li>目的からトップダウンでテストを書いて、ボトムアップで構築していく方法</li>
<li>あくまで一例なので、合う合わないは当然ある</li>
</ul>
</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>本記事では 2.1.2 で検証しましたが、1.9 以降なら恐らく正常動作するでしょう。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>gem install bundler で入ります。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Ruby の mysql ライブラリのインストール時に、mysql-devel のようなライブラリを必要とします。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>もちろん、この時点ではまだテストを書いていないので、何も実行されません。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>ポート番号は、Infrataster::Server.define の mysql に port オプションを与えれば変更可能です。<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>ssh.exec を用いれば可能に見えます。それは serverspec の command で mysql クエリを発行すれば infrataster のテストが出来るのと同じように。<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>あるいは、涙を流しながら手で yum install httpd を実行します。<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#18 mruby-ipvs を実装し卒業論文を書きました]]></title>
    <link href="https://rrreeeyyy.com//blog/2014/03/17/mruby-ipvs/"/>
    <updated>2014-03-17T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.com//blog/2014/03/17/mruby-ipvs</id>
    <content type="html"><![CDATA[<p>Linux の L4 ロードバランサ機能である IPVS を、</p>

<p>mruby から利用できるようにする mruby-ipvs という mrbgem を実装し、</p>

<p>その mruby-ipvs に関して卒業論文を書きました。</p>

<!--more-->


<hr />

<h1>動機</h1>

<p><a href="http://www.uec.ac.jp/">電気通信大学</a> という大学の 4 年生に無事進級できた為、</p>

<p>卒業論文を書く必要がありました。</p>

<p>大学に通いながら、<a href="http://heartbeats.jp/">株式会社ハートビーツ</a> で学生スタッフとして働いていた経験上、</p>

<p>Linux カーネル内に実装されている L4 ロードバランサ機能である <a href="http://www.linuxvirtualserver.org/software/ipvs.html">IP Virtual Server</a> (IPVS) の、</p>

<p>インタフェースに不便しており、なんとかしたいという気持ちがありました。</p>

<p>個人的に Ruby が好きであることに加え、<a href="http://www.getchef.com/chef/">Chef</a> に代表されるような、</p>

<p>インフラストラクチャ自動化フレームワークが Ruby で書かれ始めていること、</p>

<p>更に、<a href="https://github.com/matsumoto-r/mod_mruby">mod_mruby</a> といった <a href="http://forum.mruby.org/">mruby</a> を用いたインタフェースの登場もあり、</p>

<p>卒業論文のテーマとして、IPVS のインタフェースを mruby で実装することを選択しました。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<hr />

<h1>mruby-ipvs について</h1>

<p>mruby-ipvs は、先述の通り Linux の L4 ロードバランサ機能である IPVS を、</p>

<p>mruby から操作できるようにした mrbgem です。</p>

<p>今のところ、mgem コマンドからインストールすることが出来ないため、<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>build_config.rb や gembox を直接編集し、任意の場所に下記を追記するなどしてください。</p>

<p><code>
  conf.gem :git =&gt; 'https://github.com/rrreeeyyy/mruby-ipvs'
</code></p>

<p>リポジトリの example にありますが、下記のように記述することが出来ます。</p>

<p>```ruby
s = IPVS::Service.new({
  &lsquo;addr&rsquo; => &lsquo;10.0.0.1:80&rsquo;,
  &lsquo;port&rsquo; => 80,
  &lsquo;sched_name&rsquo; => &lsquo;wrr&rsquo;
}).add_service
d1 = IPVS::Dest.new({
  &lsquo;addr&rsquo; => &lsquo;192.168.0.1&rsquo;,
  &lsquo;port&rsquo; => 80,
  &lsquo;weight&rsquo; => 1
})
d2 = IPVS::Dest.new({
  &lsquo;addr&rsquo; => &lsquo;192.168.0.2&rsquo;,
  &lsquo;port&rsquo; => 80,
  &lsquo;weight&rsquo; => 1
})
s.add_dest(d1)
s.add_dest(d2)</p>

<p>d1.weight = 3
```</p>

<p>Service と Destination をそれぞれインスタンスとして生成します。</p>

<p>Service は add_service や del_service することで、</p>

<p>IPVS に登録したり削除したりすることが出来ます。</p>

<p>Destination は Service インスタンスの add_dest メソッドの引数に渡すことで、</p>

<p>その Service の Destination として IPVS に登録されます。</p>

<p>インスタンスを作る際の引数の与え方で、振り分けメソッドや重みなどを変更できます。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p><a href="https://github.com/rrreeeyyy/mruby-ipvs/blob/master/example/keepalived.rb">こんな感じ</a> に書くことで、Keepalived のような構文で書くことも出来たりします。</p>

<p>将来的には、他の mrbgem を用いてヘルスチェックを行いながら、</p>

<p>動的に振り分け先を追加したり、重みを変更したり、何らかのスクリプトを実行したり…など、</p>

<p>IPVS にまつわる操作を自動化する一助になればいいなと思っています。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<hr />

<h1>リポジトリ</h1>

<p><a href="https://github.com/rrreeeyyy/mruby-ipvs">mruby-ipvs</a></p>

<p>正直、コードの質が良くなかったり、未実装な部分がかなりあるのですが、</p>

<p>使えることには使えるので公開します。</p>

<p>今月で無事に大学を卒業出来るようですが、実装は続けようと思っているので、</p>

<p>pull-request やバグ報告などあれば頂けると幸いです。</p>

<p>今後にご期待ください。</p>

<p>近日中に mgem からインストールできるように pull-request を出したいと思っています。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<hr />

<h1>論文</h1>

<p><a href="http://rrreeeyyy.com/thesis/thesis.pdf">論文</a></p>

<p><a href="http://rrreeeyyy.com/thesis/GraduationSlide.pdf">発表スライド</a></p>

<p>論文に関しては、構成がめちゃくちゃだったり、</p>

<p>誤りがあるような気がする箇所がそれなりにあるのですが、</p>

<p>読めることには読めるので公開します。(あんまり見ないで下さい)</p>

<hr />

<h1>謝辞</h1>

<p>所属していた <a href="http://ipl-www.cs.uec.ac.jp/dokuwiki/public/start">岩崎・中野・鵜川研究室</a> の皆様には大変お世話になりました。</p>

<p>(特に、指導教員の皆様や、助言を頂いた諸先輩方、更に僕の論文の誤りを最も多く検出してくれた <a href="https://twitter.com/nari_ex">@nari_ex</a> さん)</p>

<p>また、<a href="http://heartbeats.jp/">株式会社ハートビーツ</a> の皆様にも大変お世話になりました。</p>

<p>(特に、誕生日プレゼントと称して研究室に物資を送り届けてくれた <a href="https://twitter.com/ka_maekawa/">@ka_maekawa</a> さん)</p>

<p>更に、<a href="https://github.com/matsumoto-r/mod_mruby">mod_mruby</a> の作者である <a href="https://twitter.com/matsumotory">@matsumotory</a> さんに、</p>

<p>直接の面識やお話したことはないものの、研究の動機を与えてくださったことに感謝申し上げます。</p>

<p>また、mruby に関する様々な情報を Web 上に公開してくださってるみなさん、大変参考になりました。</p>

<p>ありがとうございました。</p>

<hr />

<p>2014/3/18 0:16 追記</p>

<p>無事、mgem-list に pull-request を出し、<a href="https://github.com/mruby/mgem-list/pull/72">mergeされました</a></p>

<p>ので、今後は mgem コマンドから build_config.rb の追記分を生成することが出来ます。</p>

<p>mgem の使い方に関しては、<a href="http://blog.matsumoto-r.jp/?p=3310">今日からmrubyをはじめる人へ</a> が大変参考になるので、</p>

<p>そちらをご覧ください。"mruby-ipvs" という名前で登録してあります。</p>

<hr />

<p>※このブログの内容は個人の見解であり、所属する組織の公式見解でも組織を代表するものでもありません※</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>更に、C 言語で書かれた libipvs を使用するのに、mruby で実装することが都合がよかったのです<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>すみません！ ※2014/3/18 に追加されました<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>未実装のパラメータがいくつもあります<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>そのためには未実装の箇所が多すぎます<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>大阪行きの新幹線の中で書いているので、大阪から帰ってきたらにします。<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
