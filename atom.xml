<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[rrreeeyyy.com]]></title>
  <link href="https://rrreeeyyy.github.io/atom.xml" rel="self"/>
  <link href="https://rrreeeyyy.github.io/"/>
  <updated>2016-01-01T00:49:29+09:00</updated>
  <id>https://rrreeeyyy.github.io/</id>
  <author>
    <name><![CDATA[rrreeeyyy]]></name>
    <email><![CDATA[yoshikawa@rrreeeyyy.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2015 年振り返り]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2015/12/31/2015/"/>
    <updated>2015-12-31T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2015/12/31/2015</id>
    <content type="html"><![CDATA[<p>2015 年もありがとうございました。2016 年も皆様よろしくお願いします。</p>

<!--more-->


<hr />

<h1>2015 年振り返り</h1>

<h2>技術</h2>

<h3>読んだ本・買ったもの</h3>

<ul>
<li>新年早々 Kindle Voyage を買ってた

<ul>
<li>買ってよかった</li>
<li>Paperwhite は人に譲った</li>
<li>Voyage はさくさく動いて便利</li>
</ul>
</li>
</ul>


<p><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/B00GMUPAIO/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00GMUPAIO&linkCode=as2&tag=rrreeeyyy-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00GMUPAIO&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=rrreeeyyy-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=rrreeeyyy-22&l=as2&o=9&a=B00GMUPAIO" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<ul>
<li>ZOOM の TAC-2R っていうオーディオコンバータ買った

<ul>
<li>普通に使ってたけど今は諸々の事情で使ってない</li>
<li>Windows PC を家で常用するようになったりしたので

<ul>
<li>新しいオーディオコンバータほしい</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/4798116831/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=4798116831&linkCode=as2&tag=rrreeeyyy-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4798116831&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=rrreeeyyy-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=rrreeeyyy-22&l=as2&o=9&a=4798116831" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/B00XZTYMG6/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00XZTYMG6&linkCode=as2&tag=rrreeeyyy-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00XZTYMG6&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=rrreeeyyy-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=rrreeeyyy-22&l=as2&o=9&a=B00XZTYMG6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/4894714981/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=4894714981&linkCode=as2&tag=rrreeeyyy-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4894714981&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=rrreeeyyy-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=rrreeeyyy-22&l=as2&o=9&a=4894714981" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://book.impress.co.jp/books/1115101039">http://book.impress.co.jp/books/1115101039</a></p>

<ul>
<li>本もっといろいろ読んだけど大体記憶に残ってるのはこの辺</li>
<li>どっかでも喋ったけど分散システム 第二版は良かった

<ul>
<li>タネンバウム先生の本もろもろ読めてないやつあるので来年もなんか読むぞ</li>
</ul>
</li>
</ul>


<p><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/B00CDLD42U/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00CDLD42U&linkCode=as2&tag=rrreeeyyy-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00CDLD42U&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=rrreeeyyy-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=rrreeeyyy-22&l=as2&o=9&a=B00CDLD42U" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<ul>
<li>ベース買った</li>
<li>買ってすぐはすごい弾いてたけど最近全然弾いてない</li>
</ul>


<p><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/B00VDVY1C8/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B00VDVY1C8&linkCode=as2&tag=rrreeeyyy-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00VDVY1C8&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=rrreeeyyy-22" ></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=rrreeeyyy-22&l=as2&o=9&a=B00VDVY1C8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<ul>
<li><p>スプラトゥーンも買ってた</p>

<ul>
<li>いろんな人にそそのかされて買った</li>
<li>あんまりやってない(すぐ飽きた)</li>
<li>LoL にお熱なので&hellip;</li>
</ul>
</li>
<li><p>あとは各種ラノベ(主に冴えカノ・はたらく魔王さま！)</p></li>
<li>アニソン CD/BD とか(SB69/Charlotte/WA2/アイマス/デレマスなど)</li>
</ul>


<h3>活動</h3>

<ul>
<li>輪読とかいって JavaScript の本読んでた</li>
</ul>


<iframe src="https://rrreeeyyy.github.io//www.slideshare.net/slideshow/embed_code/key/dtvTbjTMyyF02V" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://rrreeeyyy.github.io//www.slideshare.net/rrreeeyyy117/20141106-44533560" title="【Topotal輪読会】JavaScript で学ぶ関数型プログラミング 2 章" target="_blank">【Topotal輪読会】JavaScript で学ぶ関数型プログラミング 2 章</a> </strong> from <strong><a href="https://rrreeeyyy.github.io//www.slideshare.net/rrreeeyyy117" target="_blank">YOSHIKAWA Ryota</a></strong> </div></p>

<ul>
<li>モニカジ #7 (前日に繰り上がって大変だった記憶がある)</li>
</ul>


<iframe src="https://rrreeeyyy.github.io//www.slideshare.net/slideshow/embed_code/key/nfCIDaLLaioBY0" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://rrreeeyyy.github.io//www.slideshare.net/rrreeeyyy117/ss-44072323" title="モニタリングシステムのこれまでとこれから (2015-01-30)" target="_blank">モニタリングシステムのこれまでとこれから (2015-01-30)</a> </strong> from <strong><a href="https://rrreeeyyy.github.io//www.slideshare.net/rrreeeyyy117" target="_blank">YOSHIKAWA Ryota</a></strong> </div></strong></p>

<ul>
<li>若手インフラエンジニア現状確認会

<ul>
<li>wakateinfra という面白ユニットが結成されてしまいました</li>
</ul>
</li>
</ul>


<p>みんな本当に優秀で、年も近いので刺激を受けることばかりなので面白ユニット結成できてよかったなあという気持ちです。引き続きよろしくお願いします。</p>

<iframe src="https://rrreeeyyy.github.io//www.slideshare.net/slideshow/embed_code/key/JOYFtCNo72Qjix" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://rrreeeyyy.github.io//www.slideshare.net/rrreeeyyy117/infra-younger" title="Infra younger" target="_blank">Infra younger</a> </strong> from <strong><a href="https://rrreeeyyy.github.io//www.slideshare.net/rrreeeyyy117" target="_blank">YOSHIKAWA Ryota</a></strong> </div></p>

<ul>
<li><p>JTF2015 で前述の若者たちと登壇した</p>

<ul>
<li><a href="http://2015.techfesta.jp/p/program.html#tech_trend_and_future">http://2015.techfesta.jp/p/program.html#tech_trend_and_future</a></li>
<li>夜な夜な hangout で話す内容を考えたりして真面目だった</li>
<li>評判もなんかそれなりに良かったっぽかったし内容としても自分は悪くなかったと思う</li>
<li>@y_uuk1 くんが PS3 当てててすごかった</li>
</ul>
</li>
<li><p>サバフェスとか ISUCON も出たけど惨敗したので来年も頑張るぞ&hellip;</p></li>
<li><p>GCPUG で喋ったり GCP の講習を受けたりした</p></li>
</ul>


<script async class="speakerdeck-embed" data-id="7eef784340a14850ba548a8ca407dbc2" data-ratio="1.77777777777778" src="https://rrreeeyyy.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>毎月社内勉強会があるんだけど全部出席して定期的に中身のある発表ができた</li>
<li>他にもプロダクト担当というのがあって Hashicorp のツール全部とコンテナ周りの担当になってる

<ul>
<li>数ヶ月に一度ぐらいで順番が回ってきて発表するけどちゃんと調べて発表出来てるはず</li>
<li>一部のスライドは公開している(社内の事情とかが書いてあるやつは公開してない)</li>
</ul>
</li>
</ul>


<script async class="speakerdeck-embed" data-id="c3636478868244ccab4733b33528fbe4" data-ratio="1.77777777777778" src="https://rrreeeyyy.github.io//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>次世代 Web カンファレンスというのに登壇させて頂いた

<ul>
<li><a href="http://nextwebconf.connpass.com/event/19699/">http://nextwebconf.connpass.com/event/19699/</a></li>
<li><a href="https://youtu.be/dxFa055NtTo?t=5h19m50s">https://youtu.be/dxFa055NtTo?t=5h19m50s</a></li>
</ul>
</li>
</ul>


<p>本当に貴重な経験で、とても大きい会場で、業界でも本当に有名な人達と同じ場所で登壇させて頂けてよかった。
普通の参加者としても有益な話がたくさん聞けたし、懇親会でも色々な方としゃべることが出来てよかった。
こういう風に喋らせていただく機会があれば今後もぜひよろしくお願いします！</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/dxFa055NtTo" frameborder="0" allowfullscreen></iframe>


<ul>
<li><p>Itamae Meetup というのでも喋った</p></li>
<li><p>Software Design の 5 月号に寄稿した</p></li>
</ul>


<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">などと言っていたら見本誌を入手できました <a href="http://t.co/GStZ2IRvRY">pic.twitter.com/GStZ2IRvRY</a></p>&mdash; れい (Yoshikawa Ryota) (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/589993073196666880">2015, 4月 20</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<ul>
<li><p>Vitess の記事書いた</p>

<ul>
<li><a href="http://qiita.com/rrreeeyyy/items/90b3b1c73d22edc913ba">http://qiita.com/rrreeeyyy/items/90b3b1c73d22edc913ba</a></li>
</ul>
</li>
<li><p>Hashicorp を支える技術の記事書いた</p>

<ul>
<li><a href="http://qiita.com/rrreeeyyy/items/6bbd1f09c96e2af4a8ce">http://qiita.com/rrreeeyyy/items/6bbd1f09c96e2af4a8ce</a></li>
<li>今年本をあまり読めなかったのはこんな感じで論文を読んでたからな気がする

<ul>
<li>継続したい</li>
<li>もちろん本も読みたい</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>私生活</h2>

<ul>
<li>引き続きアニメを見たりした

<ul>
<li>SHIROBAKO/SB69/デレマス 良かった</li>
<li>凪あす今更見たけどよかった</li>
</ul>
</li>
<li>LoL をしたり</li>
<li>綾瀬理恵さんのライブに行ったりした

<ul>
<li>綾瀬理恵さん、初のバースデーワンマンライブが最高だった</li>
<li>ワンマン本当におめでとうございます&hellip;これからも応援します&hellip;</li>
</ul>
</li>
<li>アイマスにハマった

<ul>
<li>10th ライブ本当に最高だった&hellip;最高だった&hellip;</li>
<li><a href="http://rrreeeyyy.hatenablog.com/entry/2015/07/21/200737">http://rrreeeyyy.hatenablog.com/entry/2015/07/21/200737</a></li>
<li>デレステばっかりやってる</li>
</ul>
</li>
<li>WA2 というゲームが良かった</li>
</ul>


<h2>まとめ</h2>

<ul>
<li>去年に比べて色んな所で喋らせて頂ける機会が多かった気がする

<ul>
<li>本当にありがとうございます&hellip;</li>
</ul>
</li>
<li>その分記事書いたり本読んだりする時間が少なかった気がする</li>
<li>コード書く時間も増やせると良さそう

<ul>
<li>3 月ぐらいにいろいろあるので来年はコードたくさん書くことになりそう</li>
</ul>
</li>
<li>来年も引き続きよろしくお願いします</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[若手インフラエンジニア現状確認会 #wakateinfra に参加したまとめ]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2015/02/23/infra-younger/"/>
    <updated>2015-02-23T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2015/02/23/infra-younger</id>
    <content type="html"><![CDATA[<p>若手インフラエンジニア現状確認会に参加してきた。とにかく最高だった。</p>

<!--more-->


<hr />

<h1>若手インフラエンジニア現状確認会</h1>

<p>きっかけはこれです。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/rrreeeyyy">@rrreeeyyy</a> <a href="https://twitter.com/deeeet">@deeeet</a> <a href="https://twitter.com/y_uuk1">@y_uuk1</a> 飲み会しよ <a href="http://t.co/zUehyYnP7v">pic.twitter.com/zUehyYnP7v</a></p>&mdash; okumura takahiro (@hfm) <a href="https://twitter.com/hfm/status/558265671209869312">2015, 1月 22</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><a href="http://blog-ja.mackerel.io/entry/2015/01/08/120457">Mackerel Meetup #3 Tokyo</a> に参加した辺りで若手少ないかつ交流そんなにないよね、みたいになって開催が決定した。</p>

<p>あれよあれよという間に各社から有名若手がバンバン集まってきてこの中に居ていいのか&hellip;みたいな気分はあったんだけど、参加してみたらとにかく最高だった。</p>

<h1>資料</h1>

<p>各人の発表資料(無い人もいる)とちょっとしたまとめ、思ったことを付しておく。</p>

<hr />

<iframe src="https://rrreeeyyy.github.io//www.slideshare.net/slideshow/embed_code/44922062" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://rrreeeyyy.github.io//www.slideshare.net/hifumis/20150220-wakateinfraengineergenjohkakuninkai" title="若手インフラエンジニア現状確認会 @hfm #wakateinfra" target="_blank">若手インフラエンジニア現状確認会 @hfm #wakateinfra</a> </strong> from <strong><a href="https://rrreeeyyy.github.io//www.slideshare.net/hifumis" target="_blank">Takahiro Okumura</a></strong> </div></strong></p>

<p>ペパボ、IRC の様子をみても Twitter の様子を見てもとても良い雰囲気で仕事が出来ているように見えてとても羨ましい。</p>

<p>IRC の Kernel チャンネルみたいなのはみんな「良さそう」とか「欲しい」とか言っていたので、若者は意外とカーネルに興味がある模様です(私も含め)。</p>

<p>これからやりたい事として「カーネルレイヤの勉強」という風に言っていた(構成管理ツールはもう飽きたとのこと)。</p>

<p>自動化コード化と叫ばれる中で、カーネルレイヤの勉強がやりたい！と言う若者は中々珍しいよねとか、</p>

<p>構成管理ツールのような上位レイヤだけでなく、もっと低レイヤの勉強も必要だよねとか、そんな事を話した気がする。</p>

<hr />

<script async class="speakerdeck-embed" data-id="31149b69a5274faeb04ada21eb26849d" data-ratio="1.77777777777778" src="https://rrreeeyyy.github.io//speakerdeck.com/assets/embed.js"></script>


<p>個人的な感想だけど、<a href="https://twitter.com/deeeet">@deeeet</a> くんは本当に彗星のように現れたと思っていて、</p>

<p>印象的な素晴らしい発表/ブログ記事等の発信を続けてるのはどういうモチベーションなんだろうと割と気になっていたけどそれが分かってめっちゃ良かった。</p>

<p>あと「筋肉運用」という単語がその場でめっちゃウケて、自動化されていなかったり属人でとにかく頑張るみたいな運用を指す単語だと思うんだけど的確で良かった。</p>

<p>本当に自動化/効率化に対する意欲が高くて、そういう運用に嫌悪感すら感じると言っていてすごいなと思った。</p>

<p>自分もある程度妥協してしまう点があるので、見習わなければならない。</p>

<hr />

<p><a href="http://yuuki.hatenablog.com/">ゆううきブログ</a></p>

<p>資料最初の 3 ページぐらい喋って、あとはここ数年のブログ記事読みながら話してた感じだった。</p>

<p>彼もまた良いブログ/発表のアウトプットが常日頃からできていて素晴らしいなあと思っている。</p>

<p>聞くところによるとはてなには、年間でもっともはてブがついた記事を書いた人を評価する制度があるらしい(会社のブログに書くと 2 倍の値で評価されるらしい)。</p>

<p>そうやって各個人がアウトプットした成果を定量的に評価する制度は結構珍しいような気がしていて、良いなと個人的に思った。</p>

<p>あと輪読会があって羨ましい。</p>

<p>システム系の論文をカジュアルに読める会みたいなのがもっと増えるといいよね、と若手で話していた(いくつかあるのは知っているのだけれど僕はまだあんまり参加出来てない)。</p>

<p>例えば SICP の輪読会や CTMCP の輪読会のように、タネンバウム先生の本を読むようなイベント等もあってもいいかもしれない。</p>

<p><a href="https://github.com/papers-we-love/papers-we-love">paper-we-love</a> という論文紹介のリポジトリが紹介されたのはこの辺だったかな。</p>

<hr />

<p><a href="https://twitter.com/ryot_a_rai">@ryot_a_rai</a> 氏の発表。</p>

<p>Infrataster, Itamae &hellip; と兎に角最高のツールをバンバン出してくれてる。</p>

<p>どういう理由で今の会社にいるとか、いつ IT 系にそもそも興味持ったとかの話聞けてめっちゃ良かった。</p>

<p>あとはク社のサイトの構造がどうなってるとか、中はどんな風になってるみたいな話をした。</p>

<p>実は <a href="https://github.com/ryotarai/waker">waker</a> というのも作っていてそれもどうやら動いてるらしい。</p>

<p>話の中に「NoOps」という単語が出てきてとても印象的だった。全てが自動化された究極の境地っぽい、最高。</p>

<p>インフラのテストについても喋った気がする、僕自身はもう少し色々なテストが自動になればいいなと思っていて、以下の 2 つを挙げた気がする。</p>

<ul>
<li>冗長性のテスト</li>
<li>パフォーマンステスト</li>
</ul>


<p>現場だと、この辺は未だに手動でやっていたり、半自動程度にしかなっていないことがある。</p>

<p>NoOps を目指すならこの辺りの部分もしっかりテストして確信を得て、かつ周りを説得できる材料として用意しないといけないのかも、と思っている。</p>

<p>でも NoOps とは良い言葉だ。インフラエンジニアに限らず色々な職種の人が自動化を行いここを目指す必要がある気がしている。</p>

<hr />

<script async class="speakerdeck-embed" data-id="853dba70b43c40b49068deb17ef57e29" data-ratio="1.33333333333333" src="https://rrreeeyyy.github.io//speakerdeck.com/assets/embed.js"></script>


<p><a href="http://catatsuy.hateblo.jp/entry/2015/02/21/205303">若手インフラエンジニア現状確認会で発表しました #wakateinfra &ndash; catatsuyとは</a></p>

<p>かなり現場感のある話で良かった。</p>

<p>特に、配信サーバ関連で使われているツールと、移行の時の事故で盛り上がった気がする。</p>

<p>筋肉運用にあたるんだけど、何回も発生する作業ではないし、こういう移設/移行作業をいかに自動化/効率化するかというのは結構課題かもしれない。</p>

<p>最初から自動化されているならいいんだけど、そうも言ってられないので、ここ数年はそういうことで悩むのだろうなと思った。</p>

<hr />

<iframe src="https://rrreeeyyy.github.io//www.slideshare.net/slideshow/embed_code/44931609" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://rrreeeyyy.github.io//www.slideshare.net/rrreeeyyy117/infra-younger" title="Infra younger" target="_blank">Infra younger</a> </strong> from <strong><a href="https://rrreeeyyy.github.io//www.slideshare.net/rrreeeyyy117" target="_blank">YOSHIKAWA Ryota</a></strong> </div></p>

<p>そしてこれが私の発表。</p>

<p>自動化効率化が進み、インフラエンジニアの仕事はどんどん無くなると予想している。</p>

<p>単純にインタフェースやシステムに関わるロジックを直接書くプログラマより早く、インフラエンジニアの戸口は減少すると思っている(消滅するとは全く思っていない)。</p>

<p>もちろんアプリケーションのロジックや規模にもよるが、多くの人間は GAE や Heroku を使えば十分であることが多かったり、色々よしなにやってくれるクラウドサービスも多くある。</p>

<p>その辺のサービスが発展した時に、我々はどうすれば(あるいは何をしている)のだろうね？と言うのが問いだった。</p>

<p>全く答えは出てない(出てないのでここで色々議論したかったという狙いがある)のだけど、特に悲観的になっていると言う訳ではない。</p>

<p>スライド中にあるように、提供するサービスに応じて、どのサービスを組み合わせる、どの基盤を使うとコストが最小になり、効率的に運用できるか考える人の存在というのはもちろん必要だし、</p>

<p>各種クラウドやモニタリング等のサービスを提供する側の事業者というのも勿論必要だと思う。</p>

<p>また、<a href="https://twitter.com/hfm">@hfm</a> くんが、研究開発や次世代のミドルウェアの開発で食っていく道というのもあるよね、と言っていて確かにそういえばそうだと思った。</p>

<p>Linux カーネルの勉強をすれば安全かといえば、まあそういうわけでもなく、Linux がなくなったら(しばらくはなくならないという話にはなったが)どうしようという話にもなった。</p>

<p>とにかく上っ面でなく論理的で本質的で応用の効きやすい知識(とはなんだろうね？)をしっかり学ぶ必要があるよね、という結論になったのが深夜 1 時辺りだったかもしれない。</p>

<p>僕は結構適当な人間なので、こういう問いかけをしておきながら、仕事がなくなるのは大歓迎(収入がなくなるのは歓迎でない)なので、自動化が進んだらまた考えようと思っている。</p>

<p>とはいえ考えないと仕事ばかりなくなって収入を得ることができなくなる可能性もあるので、日々うんうん悩みながら暮らすしかなさそう。結果なるようになってくれると嬉しい。</p>

<hr />

<p>とにかく最高で、普段気になってる皆がどういう成り立ちで今の活動をしているのかとか、どういう事をやっているのかというのが分かって大変良かった。</p>

<p>インフラエンジニアといっても各社様々で、全く違うことをしていたり、かと思えば同じようなことで悩んでいた。</p>

<p>そういう人たちが一同に会してビールを片手に夢や悩みや考えを共有する会が最高でないわけが無かった。</p>

<p>今までそういう機会はあまり多くなかったので、参加出来て大変良かった。次回(京都？)も絶対行くぞ！</p>

<p>最後に、企画してくれた <a href="https://twitter.com/hfm">@hfm</a> くんと参加した <a href="https://twitter.com/deeeet">@deeeet</a> くん、<a href="https://twitter.com/y_uuk1">@y_uuk1</a> くん、 <a href="https://twitter.com/ryot_a_rai">@ryot_a_rai</a> くんと、ビール/会場を準備してくれた <a href="https://twitter.com/catatsuy">@catatsuy</a> くんと会場を貸してくれた pixiv 社に感謝！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 年振り返り]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2014/12/31/2014/"/>
    <updated>2014-12-31T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2014/12/31/2014</id>
    <content type="html"><![CDATA[<p>2014 年もありがとうございました。2015 年も皆様よろしくお願いします。</p>

<!--more-->


<hr />

<h1>2014 年振り返り</h1>

<h2>技術</h2>

<h3>読んだ本</h3>

<blockquote class="twitter-tweet" lang="ja"><p>2014 年に読んだ本(物理書籍編) <a href="http://t.co/oopOFneHTb">pic.twitter.com/oopOFneHTb</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/550213629208195072">2014, 12月 31</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>2014 年に読んだ本(電子書籍編) <a href="http://t.co/GHAjbgkw6j">pic.twitter.com/GHAjbgkw6j</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/550216780602302464">2014, 12月 31</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>インフラエンジニアかどうか疑わしいラインナップだったけど来年も本はいっぱい読みたい。</p>

<p>電子書籍は ASCII のセールか何かでめっちゃいっぱい買えたやつを年末で消化する、みたいな感じだった。</p>

<p>年が明けると Effective Ruby が来るのでそのへんから読み始める。</p>

<h3>活動</h3>

<p><a href="http://rrreeeyyy.com/blog/2014/03/17/mruby-ipvs/">卒業論文</a></p>

<p><a href="https://github.com/rrreeeyyy/mruby-ipvs">mruby-ipvs</a></p>

<p><a href="http://rrreeeyyy.com/blog/2014/05/12/serverspec-and-infrataster/">Serverspec と Infrataster の記事</a></p>

<p><a href="http://rrreeeyyy.com/blog/2014/06/23/techfesta/">July Tech Festa に行った時の記事</a></p>

<p><a href="http://qiita.com/rrreeeyyy/items/da5931ec0d2d858583cf">Kubernetes 使ってみた時の記事</a></p>

<p><a href="http://qiita.com/rrreeeyyy/items/6fecd4ac05553f3e0474">mod_mruby/ngx_mruby Advent Calender 7 日目</a></p>

<p><a href="http://rrreeeyyy.com/blog/2014/12/13/webapp/">Web アプリエンジニア養成読本 Advent Calendar 13 日目</a></p>

<p><a href="http://qiita.com/rrreeeyyy/items/45c13ccf7a65bc57b608">Kubernetes Advent Calendar 20 日目</a></p>

<p><a href="http://heartbeats.jp/hbblog/2014/12/mysql-replication-overflow-table-id.html">MySQL 5.6.10 以下に存在する レプリケーションのバグと詳細について</a></p>

<p><a href="https://speakerdeck.com/rrreeeyyy/osc-20141018-infra-as-code-1">オープンソースカンファレンス2014 Tokyo/Fall「インフラの自動化・コード化 最新トレンドおさらいとはじめ方」</a></p>

<p><a href="https://speakerdeck.com/rrreeeyyy/infra-auto-2014-10-07">ITインフラ 業務自動化現状確認会 Itamae 使ってみた</a></p>

<p><a href="https://speakerdeck.com/rrreeeyyy/hbstyle-2014-12-11">MySQL 5.6.10 以下に存在する レプリケーションのバグと原因特定について (Heartbeats 社内勉強会 2014/12/11)</a></p>

<p>卒業論文書いたのもう 1 年前なの不思議な感じがする。</p>

<p>OSC で喋れたのは良かった。発表する機会とかあればまた喋りたい。</p>

<p>ブログとかはもうちょっと書くべき。</p>

<p>あと来年はコード書く時間を増やして OSS 活動を増やす事が目標。</p>

<h2>私生活</h2>

<p>ゲームは League of Legends ばっかりやってるし、しばらくこれ以外のゲームをやるつもりもあんまりないような気がする。</p>

<p>年の後半は d アニメストアに登録してアニメをダラダラ見る活動をしていた。後はライブに行ったりした。ラノベや小説も読んだ。</p>

<p>新宿区新宿に引っ越したけど電車に乗らなくて良い生活が継続できていて嬉しい。あとは乾燥機付き洗濯機欲しい。</p>

<p>綾瀬理恵さんのライブに行ってはセトリをつぶやくおじさん (22歳) になってた。</p>

<blockquote class="twitter-tweet" lang="ja"><p>占有！魔界ブロードバンド→ Poppin☆Candy☆Love→ゆいまーる☆わーるど→ラブリラ☆ジュエリラ→ SNS♡～Special Naughty Secret LOVE～ →理恵のRie☆Ring マーチ！ <a href="https://twitter.com/hashtag/%E3%81%AF%E3%81%B4%E3%82%81%E3%82%8D%E3%81%88%E3%81%B3%E3%81%99?src=hash">#はぴめろえびす</a> <a href="https://twitter.com/hashtag/%E7%B6%BE%E7%80%AC%E7%90%86%E6%81%B5?src=hash">#綾瀬理恵</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/463181007818985472">2014, 5月 5</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>ゆいまーる☆わーるど → Secret Sequence → リンクなセカイ → 透かし桜 → ALTER BLADE → SNS♡ ～ Special Naughty Love ～ <a href="https://twitter.com/hashtag/%E7%B6%BE%E7%80%AC%E7%90%86%E6%81%B5?src=hash">#綾瀬理恵</a> <a href="https://twitter.com/hashtag/NEVERLAND?src=hash">#NEVERLAND</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/493327945851621376">2014, 7月 27</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>ゆいまーる☆わーるど→ラブリラ☆ジュエリラ→Poppin☆Candy☆Love→占勇！魔界ブロードバンド→SNS♡〜Special Naughty Secret  LOVE〜 <a href="https://twitter.com/hashtag/%E7%B6%BE%E7%80%AC%E7%90%86%E6%81%B5?src=hash">#綾瀬理恵</a> <a href="https://twitter.com/hashtag/%E3%82%82%E3%81%88%E3%81%9F%E3%82%93%E3%81%AF%E3%81%84%E3%81%9F%E3%81%84%E4%B8%83%E8%91%89%E3%82%B3%E3%83%A9%E3%83%9C%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88?src=hash">#もえたんはいたい七葉コラボイベント</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/500518430554873859">2014, 8月 16</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>のみこさんと綾瀬理恵さんによるコラボで 魔法少女マジカルたん! <a href="https://twitter.com/hashtag/%E7%B6%BE%E7%80%AC%E7%90%86%E6%81%B5?src=hash">#綾瀬理恵</a> <a href="https://twitter.com/hashtag/%E3%82%82%E3%81%88%E3%81%9F%E3%82%93%E3%81%AF%E3%81%84%E3%81%9F%E3%81%84%E4%B8%83%E8%91%89%E3%82%B3%E3%83%A9%E3%83%9C%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88?src=hash">#もえたんはいたい七葉コラボイベント</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/500524378702897153">2014, 8月 16</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>ラブリラ☆ジュエリラ→キラリズム!→Immortelle→占勇！魔界ブロードバンド→ゆいまーる☆わーるど→すぺしゃる☆ぱらだいす！→リンクな世界→Shiny Destination→SNS♡ ～Special Naughty Secret-LOVE  <a href="https://twitter.com/hashtag/%E7%B6%BE%E7%80%AC%E7%90%86%E6%81%B5?src=hash">#綾瀬理恵</a> <a href="https://twitter.com/hashtag/%E3%81%AF%E3%81%B4%E3%82%81%E3%82%8D%E3%81%88%E3%81%B3%E3%81%99?src=hash">#はぴめろえびす</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/505605895611359232">2014, 8月 30</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>占有！魔界ブロードバンド→ラブリラ☆ジュエリラ→ゆいまーる☆わーるど→マテリアルの見る夢→Alter Blade→すぺしゃる☆ぱらだいす <a href="https://twitter.com/hashtag/%E7%B6%BE%E7%80%AC%E7%90%86%E6%81%B5?src=hash">#綾瀬理恵</a> <a href="https://twitter.com/hashtag/%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89?src=hash">#スピード</a>☆スター→vol.1</p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/533881968513916928">2014, 11月 16</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>Poppin☆Candy☆Love→Whip Bunny→memories -winter edit-→Alter Blade→すぺしゃる☆ぱらだいす！ <a href="https://twitter.com/hashtag/%E7%B6%BE%E7%80%AC%E7%90%86%E6%81%B5?src=hash">#綾瀬理恵</a> <a href="https://twitter.com/hashtag/%E3%81%AF%E3%81%B4%E3%82%81%E3%82%8D%E3%81%88%E3%81%B3%E3%81%99?src=hash">#はぴめろえびす</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/538585491344351232">2014, 11月 29</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>キラリズム！→Secret Sequence→形のない花→リンクなセカイ→占勇！魔界ブロードバンド→Happy☆Lucky☆Crazy☆Love ！ <a href="https://twitter.com/hashtag/%E7%B6%BE%E7%80%AC%E7%90%86%E6%81%B5?src=hash">#綾瀬理恵</a> <a href="https://twitter.com/hashtag/daylightmoon?src=hash">#daylightmoon</a></p>&mdash; れい (@rrreeeyyy) <a href="https://twitter.com/rrreeeyyy/status/546614912156332032">2014, 12月 21</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>まとめ</h2>

<p>頑張ったような気もするけど周り人の振り返りを見てから自分の振り返りを見るとまだまだだな〜と言う感想しか出てこない。</p>

<p>今年は新卒だから仕方ないという言い訳を自分にして、来年から新卒じゃなくなるのでもう少し頑張れると良いな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IT インフラエンジニアに Web アプリエンジニア養成読本をオススメする 6 個ぐらいの理由]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2014/12/13/webapp/"/>
    <updated>2014-12-13T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2014/12/13/webapp</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/advent-calendar/2014/webapp_mook">Web アプリエンジニア養成読本 Advent Calendar 2014</a> の 13 日目の記事です。</p>

<p>ここまで著者の方で連続しているので僕が普通の書評記事のようなものを書いていいのかな、と思わなくもないですが、<br/>
登録してしまったので書こうと思います (それに、本当にオススメなのです)。</p>

<!--more-->


<hr />

<h1>あなただれ</h1>

<p>書評を書く前に、僕の自己紹介をさせて頂きます。<br/>
著者の <a href="https://twitter.com/koemu">@koemu</a> さんと同じ会社で働いていて、半分同じ部署です。</p>

<p>会社、MSP を専業としていて主にお客様のサーバ・インフラをお預かりしています。<br/>
僕とこえむさんは、そんな会社の中で主にプログラムを書いて自動化・解析・便利ツールの作成や、<br/>
重た目の検証作業などを行ったりして、他の同僚の皆さんの業務効率化や業務改善を目的として活動しています。<br/>
(僕は 9 月から大体半分ぐらいこの部署で働いています。)</p>

<p>僕が今の会社に入社したのは、2010 年の 10 月ぐらいでした。</p>

<p>その時は学生アルバイトという立場で入社して、<br/>
インフラのイの字も知らない、<br/>
Linux は触ったこと無い、SSH を見て「うおーハッキングっぽい！」と興奮するような、<br/>
本当に何も知らない状態で入りました。</p>

<p>そこから研修を経て、少しはサーバの事も分かるようになり、<br/>
ずっとインフラエンジニアとして毎日サーバにログインして働いていたのですが、<br/>
今では業務時間の殆どをコーディングやコードリーディングに充てています。<br/>
(但し、プログラマになったという気分は全然なく、インフラエンジニアの仕事の一つとしてコーディングをしています。)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<hr />

<h1>インフラエンジニアとしてアプリを知るということ</h1>

<p>インフラエンジニア、社内のアプリやお客様のアプリをお預かりして運用していくわけです。</p>

<p>もちろん Apache, Nginx, MySQL, PostgreSQL &hellip; と言ったような、<br/>
Web サーバや DB サーバの設定や挙動について知ることは大事なことです。</p>

<p>しかし、アプリケーションがどんな風に作られて、どんな構造になっていて、<br/>
データベースにはどのようにアクセスして、セッションの保持はどうするのか？<br/>
セキュリティリスクになりそうなポイントはどこか？どういうクエリが危険か？<br/>
アプリケーションに対してどんなクエリが適切か？ &hellip;</p>

<p>そういったことは、実際にアプリケーションを作ってみないと分からないと思うのです。</p>

<p>実際に、お恥ずかしい話ですが、4 年前の僕には MySQL とは一体何をしているものなのか、<br/>
どうして必要なのかということも、クエリの良し悪しも全く分からなかったのです。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup><br/>
(但し、2 台の MySQL でレプリケーションし、HA クラスタを組み VIP ベースでフェイルオーバは出来た)</p>

<p>そんな僕は実際に PHP でアプリケーションを作ってみることで、<br/>
MySQL は一体何なのかから、テーブル構造がどうなっているのか、<br/>
トランザクションとは一体何なのか、どのようなクエリを書くのが良いのか学ぶことが出来たのです。</p>

<p>そうして自分でアプリを作ってみることで、<br/>
インフラエンジニアとしての知識をたくさんつけ、<br/>
プログラミングの知識もある程度つけることが出来ました。</p>

<p>とはいえ、自分一人でアプリを作るのは難しい！<br/>
まず、情報が多すぎる。多すぎる上に新しいものから古いものまで玉石混交です。<br/>
意気揚々と作っても、参照している情報源が悪くてマサカリが飛んでくることもあります。</p>

<p>そして、何を作っていいか分からない。そんな悩みもあるでしょう。</p>

<p>そこでこの、Web アプリエンジニア養成読本なのです。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<hr />

<h1>オススメポイント</h1>

<h3>基本知識から分かる</h3>

<p>割とよくあるフレームワーク入門書などとの違いがここです。</p>

<p>本書の 1 章は、「Web 技術オーバービュー」なのです。<br/>
「Web アプリエンジニア養成読本」は、特定のフレームワークや言語に依存しない、
Web アプリを作るにあたってのとても大事な基礎知識を最初に解説してくれます。</p>

<h3>対象読者はもはやインフラエンジニア</h3>

<p>インフラエンジニアの皆さん、業務でシェルスクリプトぐらいのコードは書くことあると思います。
なんなら bash ワンライナーもコードのひとつでしょう。
本書は、変数・配列・if/for などの簡単なプログラミングの知識を持っていて、
かつ Web アプリを作ってみたい人を対象としています。インフラエンジニアのあなたのことではないでしょうか？</p>

<h3>著者陣がめっちゃ豪華</h3>

<p>実際に有名 Web サービスを生み出している方々、
Ruby/PHP 界隈で知らない人は居ないであろう方々、
サーバ・インフラの専門家。</p>

<p>これが一冊の本でまとめて勉強できるのはすごいことです。</p>

<p>また、インターネットで苦しんで調べながら見つけた(正しいか分からない)情報より、はるかに正確で有益です。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<h3>インフラの勉強も出来る</h3>

<p>アプリ系の入門書で、インフラの事にこんなに深く触れている本はなかなか無いです。</p>

<p>アプリを作った後、どんな風にモニタリングして運用していけばいいのか、</p>

<p>どんな風に連携すればいいのか、障害が起きたらどうすればいいのか&hellip;。</p>

<p>もちろん、サーバ・インフラの専門家が書いているので勉強になるでしょう。同僚として保証します。</p>

<h3>言語が複数ある</h3>

<p>インフラエンジニア、色々なサービスを見ることもあると思います。</p>

<p>あるサービスでは PHP, あるサービスでは Ruby, あるサービスでは Perl&hellip;</p>

<p>そういった色々な言語の Web アプリ状況について一挙に学べる所もインフラエンジニアとしてありがたいところかなと思います。</p>

<h3>エディタの選び方からデプロイの方法まで、幅広い解説</h3>

<p>初心者が迷いがちなところ、躓きがちなところに細かい配慮がなされています。</p>

<p>環境構築方法や、ロギングやデバッグの手法、テストコードの書き方まで。</p>

<p>各項目で、読み終わった後に続く書籍が紹介されている所も良いです。</p>

<p>この本で終わらずに、オススメ書籍を読んでどんどん学習を進めることが出来そうです。</p>

<hr />

<p>等とつらつらと書きましたが、個人的に本当にオススメの本となっております。<br/>
( <a href="https://speakerdeck.com/rrreeeyyy/sawada-books?slide=17">誕生日プレゼントとして友人にプレゼントしたこともあります。</a> )</p>

<p>いかがでしょう？</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=rrreeeyyy-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774163678" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<hr />
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>インフラエンジニアはコーディングをするのです。しますよね？<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>なんかよくわかんない箱だと思ってました。今では MySQL とは割と仲良しです。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>ああ、僕もアプリを作って勉強しよう！と思った時にこの本が発売していて欲しかった<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>この業界で生きていくのは検索力や情報が正しいか取捨選択する能力も必要ですが&hellip; Web アプリを学びたいだけならノイズでしょう<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[July Tech Festa 2015 ( #jtf2015 ) に行って #wakateinfra として喋りました]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2014/06/23/techfesta/"/>
    <updated>2014-06-23T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2014/06/23/techfesta</id>
    <content type="html"><![CDATA[<p>一昨年、昨年に引き続き、July Tech Festa (2015) に行きました。</p>

<p>今年は登壇側でした。</p>

<!--more-->


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serverspec と Infrataster でサーバのテストをする]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2014/05/12/serverspec-and-infrataster/"/>
    <updated>2014-05-12T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2014/05/12/serverspec-and-infrataster</id>
    <content type="html"><![CDATA[<p>サーバの構築・運用の効率化の為に Test-Driven Infrastructure をする手法として、</p>

<p><a href="http://serverspec.org/">Serverspec</a> が登場して 1 年近く経ちました。</p>

<p>そして最近、Infrastructure Behavior Testing Framework として、</p>

<p><a href="https://github.com/ryotarai/infrataster">Infrataster</a> が登場しました。</p>

<p>今日は、上記で紹介した 2 つを組み合わせて使用し、</p>

<p>実際にどのようにサーバのテストを行うかについて書きます。</p>

<!--more-->


<hr />

<h1>書くこと・書かないこと</h1>

<h2>&ndash; 書くこと</h2>

<ul>
<li>Serverspec と Infrataster を両方使った Test-Driven Infrastructure の一手法に関して</li>
</ul>


<p>今日書くのは、Serverspec と Infrataster を組み合わせることで、</p>

<p>Serverspec がカバーしている領域と Infrataster がカバーしている領域の両方をテストする一手法に関してです。</p>

<h2>&ndash; 書かないこと</h2>

<ul>
<li>Test-Driven Infrastructure についてのベストプラクティス</li>
<li>TDD や BDD と言ったそもそものテスト手法について</li>
</ul>


<p>これらは、個々人やプロジェクト単位で、ベストプラクティス・手法が異なると思っています。</p>

<p>その為、ここに書いてある事が必ずもベストではありません。(もちろん、マッチする人も居るかもしれません)</p>

<p>また、そもそもの言葉の定義や、Test-Driven Infrastructure のあり方について等は書きません。</p>

<h1>前提</h1>

<ul>
<li>Ruby がインストールされていること <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>bundler がインストールされていること <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ul>


<h1>インストール</h1>

<p>まずは、テストを行うプロジェクト用のディレクトリを用意し、</p>

<p>Serverspec と Infrataster をインストールします。</p>

<p>また、Infrataster で MySQL のテストを行うため、</p>

<p><a href="https://github.com/ryotarai/infrataster-plugin-mysql">infrataster-plugin-mysql</a> も同時にインストールします。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir servertest
</span><span class='line'><span class="nb">cd </span>servertest
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle init
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;gem &quot;rake&quot;&#39;</span> &gt;&gt; Gemfile
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;gem &quot;serverspec&quot;&#39;</span> &gt;&gt; Gemfile
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;gem &quot;infrataster&quot;&#39;</span> &gt;&gt; Gemfile
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;gem &quot;infrataster-plugin-mysql&quot;&#39;</span> &gt;&gt; Gemfile
</span><span class='line'>
</span><span class='line'>bundle install --path vendor/bundle
</span></code></pre></td></tr></table></div></figure>


<h1>設定</h1>

<p>ホスト固有の設定値等を用いるために、</p>

<p>Serverspec のテストの実行を、</p>

<p><a href="http://serverspec.org/advanced_tips.html">advanced_tips</a> の &ldquo;How to use host specific properties&rdquo; に沿ったものにします。</p>

<p>Rakefile を以下のように書きます。</p>

<h2>&ndash; Rakefile</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$EDITOR</span> Rakefile
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">properties</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;properties.yml&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Run serverspec to all hosts&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:spec</span> <span class="o">=&gt;</span> <span class="s1">&#39;serverspec:all&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:serverspec</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:all</span> <span class="o">=&gt;</span> <span class="n">properties</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="s1">&#39;serverspec:&#39;</span> <span class="o">+</span> <span class="n">key</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">properties</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s2">&quot;Run serverspec to </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_sym</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TARGET_HOST&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">key</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;spec/{&#39;</span> <span class="o">+</span> <span class="n">properties</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="ss">:roles</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;}/*_spec.rb&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>spec_helper.rb</h2>

<p>次に spec というディレクトリを作成しておき、</p>

<p>spec 配下に spec_helper.rb を生成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir spec
</span><span class='line'><span class="nv">$EDITOR</span> spec/spec_helper.rb
</span></code></pre></td></tr></table></div></figure>


<p>ここで、Serverspec の設定と Infrataster のサーバ定義を同時に行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;serverspec&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pathname&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/ssh&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;infrataster/rspec&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;infrataster-plugin-mysql&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="ss">Serverspec</span><span class="p">:</span><span class="ss">:Helper</span><span class="o">::</span><span class="no">Ssh</span>
</span><span class='line'><span class="kp">include</span> <span class="ss">Serverspec</span><span class="p">:</span><span class="ss">:Helper</span><span class="o">::</span><span class="no">DetectOS</span>
</span><span class='line'><span class="kp">include</span> <span class="ss">Serverspec</span><span class="p">:</span><span class="ss">:Helper</span><span class="o">::</span><span class="no">Properties</span>
</span><span class='line'>
</span><span class='line'><span class="n">properties</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;properties.yml&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">properties</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">host</span><span class="o">|</span>
</span><span class='line'>  <span class="ss">Infrataster</span><span class="p">:</span><span class="ss">:Server</span><span class="o">.</span><span class="n">define</span><span class="p">(</span>
</span><span class='line'>    <span class="n">properties</span><span class="o">[</span><span class="n">host</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="n">host</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">ssh</span><span class="p">:</span> <span class="p">{</span><span class="n">host_name</span><span class="p">:</span> <span class="n">host</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="n">properties</span><span class="o">[</span><span class="n">host</span><span class="o">][</span><span class="ss">:user</span><span class="o">]</span><span class="p">,</span> <span class="ss">keys</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;~/.ssh/id_rsa&#39;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'>    <span class="ss">from</span><span class="p">:</span> <span class="n">properties</span><span class="o">[</span><span class="n">host</span><span class="o">][</span><span class="ss">:from</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">mysql</span><span class="p">:</span> <span class="p">{</span><span class="ss">user</span><span class="p">:</span> <span class="n">properties</span><span class="o">[</span><span class="n">host</span><span class="o">][</span><span class="ss">:mysql_user</span><span class="o">]</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="n">properties</span><span class="o">[</span><span class="n">host</span><span class="o">][</span><span class="ss">:mysql_password</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">host</span>  <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TARGET_HOST&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">set_property</span> <span class="n">properties</span><span class="o">[</span><span class="n">c</span><span class="o">.</span><span class="n">host</span><span class="o">]</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:SSH</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">host</span><span class="p">)</span>
</span><span class='line'>  <span class="n">user</span>    <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span> <span class="o">||</span> <span class="no">Etc</span><span class="o">.</span><span class="n">getlogin</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">ssh</span>   <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:SSH</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">os</span>    <span class="o">=</span> <span class="n">backend</span><span class="o">.</span><span class="n">check_os</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>&ndash; properties.yml</h2>

<p>ホスト毎の定義や設定値を書く yaml ですが、</p>

<p>ここでは以下のような例にします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$EDITOR</span> properties.yml
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">rrreeeyyy.com</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">base</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">:proxy</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">:rrreeeyyy</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">web-01.rrreeeyyy.com</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">base</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">web</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">:web</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">:rrreeeyyy</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">db-01.rrreeeyyy.com</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:roles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">base</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">:db</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">:rrreeeyyy</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:from</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">:web</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:mysql_user</span><span class="p-Indicator">:</span> <span class="s">&#39;username&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:mysql_password</span><span class="p-Indicator">:</span> <span class="s">&#39;password&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすることで、Serverspec では以下のホストに対し任意のテストを実行します。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<ul>
<li>rrreeeyyy.com</li>
<li>web-01.rrreeeyyy.com</li>
<li>db-01.rrreeeyyy.com</li>
</ul>


<p>また、Infrataster 側では、以下のホストが定義されたことになります。</p>

<ul>
<li>:proxy</li>
<li>:web</li>
<li>:db</li>
</ul>


<h1>テストを書く</h1>

<p>先ほど yaml ファイルで定義した role 毎にディレクトリを作成します。</p>

<p>その配下に置かれた *_spec.rb というファイルは、テスト実行時に全て実行されます。</p>

<p>spec 配下のディレクトリ構成を以下のようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">.</span>
</span><span class='line'><span class="l-Scalar-Plain">├── base</span>
</span><span class='line'><span class="l-Scalar-Plain">│   └── base_spec.rb</span>
</span><span class='line'><span class="l-Scalar-Plain">├── db</span>
</span><span class='line'><span class="l-Scalar-Plain">│   └── db_spec.rb</span>
</span><span class='line'><span class="l-Scalar-Plain">├── spec_helper.rb</span>
</span><span class='line'><span class="l-Scalar-Plain">└── web</span>
</span><span class='line'>    <span class="l-Scalar-Plain">└── web_spec.rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>それぞれの spec ファイルについて見ていきます。</p>

<h2>&ndash; base_spec.rb</h2>

<p>全てのホストの role に base がついているので、</p>

<p>この spec ファイルに書いてあるテストは、定義した全てのホストで実行されます。</p>

<p>そのため、22 番ポートが Listen しているかをテストしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">port</span><span class="p">(</span><span class="mi">22</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_listening</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>他にも、ntp や sysctl の設定などで、全ホストで共通するものを書いていくと良いと思います。</p>

<p>もちろん、ディレクトリ内にある *_spec.rb ファイルは全て実行されるため、</p>

<p>ntp_spec.rb, sshd_spec.rb, sysctl_spec.rb 等に分けても問題ありません。</p>

<p>むしろ、テストが肥大化してきたらファイルを分割するべきかと思います。</p>

<p>にも、ntp や sysctl の設定などで、全ホストで共通するものを書いていくと良いと思います。</p>

<p>もちろん、ディレクトリ内にある *_spec.rb ファイルは全て実行されるため、</p>

<p>ntp_spec.rb, sshd_spec.rb, sysctl_spec.rb 等に分けても問題ありません。</p>

<p>むしろ、テストが肥大化してきたらファイルを分割するべきかと思います。</p>

<h2>&ndash; web_spec.rb</h2>

<p>web_spec.rb は web ディレクトリ配下にあるため、</p>

<p>role に web がついている、web-01.rrreeeyyy.com サーバでのみ実行されます。</p>

<p>80 番ポートが Listen していることに加えて、</p>

<p>rrreeeyyy.com へアクセスし、レスポンスに &lsquo;rrreeeyyy &ndash; Powered by&rsquo; が含まれていること、</p>

<p>レスポンスヘッダの content-type が text/html であることをテストしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">port</span><span class="p">(</span><span class="mi">80</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_listening</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">server</span><span class="p">(</span><span class="n">property</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="n">http</span><span class="p">(</span><span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TARGET_HOST&#39;</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;web-01.&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;responds content including &#39;rrreeeyyy - Powered by&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;rrreeeyyy - Powered by&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;responds as &#39;text/html&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;content-type&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">match</span><span class="p">(</span><span class="sr">%r{^text/html}</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、Infrataster の http は Ruby HTTP クライアントライブラリである Faraday を使用しています。</p>

<p>後述の :from を用いると、特定のホストからアクセスした時にどのように表示されるか、などもテスト可能です。</p>

<p>また、Web アプリケーションのテストフレームワークである Capybara を使用することも可能なので、</p>

<p>複雑な Web アプリケーションのルーティング等もテスト可能だと思われます。</p>

<h2>&ndash; db_spec.rb</h2>

<p>db_spec.rb は db ディレクトリ配下にあるため、</p>

<p>role に db がついている、db-01.rrreeeyyy.com サーバでのみ実行されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">port</span><span class="p">(</span><span class="mi">3306</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_listening</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">server</span><span class="p">(</span><span class="ss">:db</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="n">mysql_query</span><span class="p">(</span><span class="s1">&#39;SHOW STATUS&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns positive uptime&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">row</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">r</span><span class="o">[</span><span class="s1">&#39;Variable_name&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;Uptime&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">row</span><span class="o">[</span><span class="s1">&#39;Value&#39;</span><span class="o">].</span><span class="n">to_i</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Infrataster は :from が付いていると、定義されたサーバからの振る舞いをテストします。</p>

<p>今回の場合、db サーバには :from :web が付いている為、</p>

<p>web-01 サーバから db-01 サーバへ MySQL で接続できるかをテストします。</p>

<p>仕組みとしては、db-01 サーバの 3306 番ポートを、</p>

<p>web-01 サーバを経由してローカルへ SSH ポートフォワードします。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<p>その後、Ruby の mysql2 ライブラリを用いて、クエリを発行します。</p>

<p>なお、3306 番ポートが LISTEN しているかどうかテストする部分に関しては、</p>

<p>Serverspec の管轄内になるので、内部的には db-01 サーバに SSH して、</p>

<p>netstat の結果を取得してテストしています。</p>

<h1>何がいいか、どんな風にテストを書いていくかの例</h1>

<h2>&ndash; 何がいいか</h2>

<p>Serverspec と Infrataster はテスト対象のレイヤーが少々異なっています。</p>

<p>Infrataster は 次の記事のように、nginx のルーティングをテストしたり、</p>

<ul>
<li><a href="http://apehuci-kitaitimakoto.sqale.jp/apehuci/?date=20140505">[Infrataster] InfratasterでNginxのルーティングのテスト書いてる</a></li>
</ul>


<p>MySQL のクエリを発行し、その結果をテストするなど、</p>

<p>かなりアプリケーションに近いレイヤーでのテストを行います。</p>

<p>その一方で、サーバ内にインストール済のパッケージや、設定ファイルの詳細をテストするのはやや困難です。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>

<p>Serverspec では、サーバ内の設定や、導入済みのパッケージなど、</p>

<p>Infrataster よりやや低いレイヤーにフォーカスしてテストを行うのが得意なように見えます。</p>

<p>その一方で、MySQL のクエリを発行した結果をテストするのはやや困難です。</p>

<p>この 2 つを組み合わせて使用することにより、サーバのより広いレイヤーに対してテストを行うことが可能になります。</p>

<h2>&ndash; どんな風にテストを書いていくかの例</h2>

<p>あくまで一例ですが、頭の整理的にこんな使い方も出来ます。</p>

<h3>&ndash; Web アプリをデプロイする対象のサーバ構築をテストしたい</h3>

<ul>
<li>デプロイする Web アプリは &lsquo;Hello World&rsquo; と画面に出力する</li>
</ul>


<p>まずこれを書く</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="n">http</span><span class="p">(</span><span class="s1">&#39;http://app&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;responds content including &#39;Hello World&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;Hello World&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然失敗するわけです。</p>

<ul>
<li>そうだ、Web アプリがレスポンスを返すためには 80 番ポートを Listen する必要があるなあ</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="n">port</span><span class="p">(</span><span class="mi">80</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_listening</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">http</span><span class="p">(</span><span class="s1">&#39;http://app&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;responds content including &#39;Hello World&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;Hello World&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上にテストを書きます。</p>

<ul>
<li>そうだ、80 番ポートを Listen するためには httpd が入っている必要があるなあ</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="n">package</span><span class="p">(</span><span class="s1">&#39;httpd&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_installed</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">port</span><span class="p">(</span><span class="mi">80</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_listening</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">http</span><span class="p">(</span><span class="s1">&#39;http://app&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;responds content including &#39;Hello World&#39;&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;Hello World&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>更に上にテストを書きます。</p>

<p>ここで初めて、ansible や chef の playbook や cookbook を書き始めます。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p>そしてテストをすると、一番上のテストは通るわけです、じゃあ次は 80 番ポートの Listen ,</p>

<p>じゃあ次は index.html の設置 &hellip; 等とコードベースでテストをしながらサーバを構築していく。</p>

<p>&hellip; なんて方法も、ありじゃないでしょうか？</p>

<h1>まとめ</h1>

<ul>
<li>サーバ構築のテストツールである Serverspec と Infrataster を一緒に使うテスト手法について説明

<ul>
<li>広いレイヤーでテストが出来る

<ul>
<li>Nginx のルーティングや、MySQL のクエリ実行結果 (Infrataster)</li>
<li>特定のホストから見た、他のテストの振る舞い (Infrataster)</li>
<li>サーバにインストールされているプロダクトの設定ファイルの詳細 (Serverspec)</li>
<li>サーバの iptables の設定値 (Serverspec)</li>
</ul>
</li>
</ul>
</li>
<li>Serverspec と Infrataster を使ったテスト駆動インフラ構築の一例

<ul>
<li>目的からトップダウンでテストを書いて、ボトムアップで構築していく方法</li>
<li>あくまで一例なので、合う合わないは当然ある</li>
</ul>
</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>本記事では 2.1.2 で検証しましたが、1.9 以降なら恐らく正常動作するでしょう。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>gem install bundler で入ります。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Ruby の mysql ライブラリのインストール時に、mysql-devel のようなライブラリを必要とします。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>もちろん、この時点ではまだテストを書いていないので、何も実行されません。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>ポート番号は、Infrataster::Server.define の mysql に port オプションを与えれば変更可能です。<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>ssh.exec を用いれば可能に見えます。それは serverspec の command で mysql クエリを発行すれば infrataster のテストが出来るのと同じように。<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>あるいは、涙を流しながら手で yum install httpd を実行します。<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルスクリプトを書く時覚えておくこと一選！]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2014/04/21/set-euo-pipefail/"/>
    <updated>2014-04-21T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2014/04/21/set-euo-pipefail</id>
    <content type="html"><![CDATA[<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -euo pipefail
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#18 mruby-ipvs を実装し卒業論文を書きました]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2014/03/17/mruby-ipvs/"/>
    <updated>2014-03-17T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2014/03/17/mruby-ipvs</id>
    <content type="html"><![CDATA[<p>Linux の L4 ロードバランサ機能である IPVS を、</p>

<p>mruby から利用できるようにする mruby-ipvs という mrbgem を実装し、</p>

<p>その mruby-ipvs に関して卒業論文を書きました。</p>

<!--more-->


<hr />

<h1>動機</h1>

<p><a href="http://www.uec.ac.jp/">電気通信大学</a> という大学の 4 年生に無事進級できた為、</p>

<p>卒業論文を書く必要がありました。</p>

<p>大学に通いながら、<a href="http://heartbeats.jp/">株式会社ハートビーツ</a> で学生スタッフとして働いていた経験上、</p>

<p>Linux カーネル内に実装されている L4 ロードバランサ機能である <a href="http://www.linuxvirtualserver.org/software/ipvs.html">IP Virtual Server</a> (IPVS) の、</p>

<p>インタフェースに不便しており、なんとかしたいという気持ちがありました。</p>

<p>個人的に Ruby が好きであることに加え、<a href="http://www.getchef.com/chef/">Chef</a> に代表されるような、</p>

<p>インフラストラクチャ自動化フレームワークが Ruby で書かれ始めていること、</p>

<p>更に、<a href="https://github.com/matsumoto-r/mod_mruby">mod_mruby</a> といった <a href="http://forum.mruby.org/">mruby</a> を用いたインタフェースの登場もあり、</p>

<p>卒業論文のテーマとして、IPVS のインタフェースを mruby で実装することを選択しました。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<hr />

<h1>mruby-ipvs について</h1>

<p>mruby-ipvs は、先述の通り Linux の L4 ロードバランサ機能である IPVS を、</p>

<p>mruby から操作できるようにした mrbgem です。</p>

<p>今のところ、mgem コマンドからインストールすることが出来ないため、<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>build_config.rb や gembox を直接編集し、任意の場所に下記を追記するなどしてください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  conf.gem :git =&gt; 'https://github.com/rrreeeyyy/mruby-ipvs'</span></code></pre></td></tr></table></div></figure>


<p>リポジトリの example にありますが、下記のように記述することが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="ss">IPVS</span><span class="p">:</span><span class="ss">:Service</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class='line'>  <span class="s1">&#39;addr&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;10.0.0.1:80&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;port&#39;</span> <span class="o">=&gt;</span> <span class="mi">80</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sched_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wrr&#39;</span>
</span><span class='line'><span class="p">})</span><span class="o">.</span><span class="n">add_service</span>
</span><span class='line'><span class="n">d1</span> <span class="o">=</span> <span class="ss">IPVS</span><span class="p">:</span><span class="ss">:Dest</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class='line'>  <span class="s1">&#39;addr&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;192.168.0.1&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;port&#39;</span> <span class="o">=&gt;</span> <span class="mi">80</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;weight&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="n">d2</span> <span class="o">=</span> <span class="ss">IPVS</span><span class="p">:</span><span class="ss">:Dest</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class='line'>  <span class="s1">&#39;addr&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;192.168.0.2&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;port&#39;</span> <span class="o">=&gt;</span> <span class="mi">80</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;weight&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">add_dest</span><span class="p">(</span><span class="n">d1</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">add_dest</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">d1</span><span class="o">.</span><span class="n">weight</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Service と Destination をそれぞれインスタンスとして生成します。</p>

<p>Service は add_service や del_service することで、</p>

<p>IPVS に登録したり削除したりすることが出来ます。</p>

<p>Destination は Service インスタンスの add_dest メソッドの引数に渡すことで、</p>

<p>その Service の Destination として IPVS に登録されます。</p>

<p>インスタンスを作る際の引数の与え方で、振り分けメソッドや重みなどを変更できます。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p><a href="https://github.com/rrreeeyyy/mruby-ipvs/blob/master/example/keepalived.rb">こんな感じ</a> に書くことで、Keepalived のような構文で書くことも出来たりします。</p>

<p>将来的には、他の mrbgem を用いてヘルスチェックを行いながら、</p>

<p>動的に振り分け先を追加したり、重みを変更したり、何らかのスクリプトを実行したり…など、</p>

<p>IPVS にまつわる操作を自動化する一助になればいいなと思っています。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<hr />

<h1>リポジトリ</h1>

<p><a href="https://github.com/rrreeeyyy/mruby-ipvs">mruby-ipvs</a></p>

<p>正直、コードの質が良くなかったり、未実装な部分がかなりあるのですが、</p>

<p>使えることには使えるので公開します。</p>

<p>今月で無事に大学を卒業出来るようですが、実装は続けようと思っているので、</p>

<p>pull-request やバグ報告などあれば頂けると幸いです。</p>

<p>今後にご期待ください。</p>

<p>近日中に mgem からインストールできるように pull-request を出したいと思っています。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<hr />

<h1>論文</h1>

<p><a href="http://rrreeeyyy.com/thesis/thesis.pdf">論文</a></p>

<p><a href="http://rrreeeyyy.com/thesis/GraduationSlide.pdf">発表スライド</a></p>

<p>論文に関しては、構成がめちゃくちゃだったり、</p>

<p>誤りがあるような気がする箇所がそれなりにあるのですが、</p>

<p>読めることには読めるので公開します。(あんまり見ないで下さい)</p>

<hr />

<h1>謝辞</h1>

<p>所属していた <a href="http://ipl-www.cs.uec.ac.jp/dokuwiki/public/start">岩崎・中野・鵜川研究室</a> の皆様には大変お世話になりました。</p>

<p>(特に、指導教員の皆様や、助言を頂いた諸先輩方、更に僕の論文の誤りを最も多く検出してくれた <a href="https://twitter.com/nari_ex">@nari_ex</a> さん)</p>

<p>また、<a href="http://heartbeats.jp/">株式会社ハートビーツ</a> の皆様にも大変お世話になりました。</p>

<p>(特に、誕生日プレゼントと称して研究室に物資を送り届けてくれた <a href="https://twitter.com/ka_maekawa/">@ka_maekawa</a> さん)</p>

<p>更に、<a href="https://github.com/matsumoto-r/mod_mruby">mod_mruby</a> の作者である <a href="https://twitter.com/matsumotory">@matsumotory</a> さんに、</p>

<p>直接の面識やお話したことはないものの、研究の動機を与えてくださったことに感謝申し上げます。</p>

<p>また、mruby に関する様々な情報を Web 上に公開してくださってるみなさん、大変参考になりました。</p>

<p>ありがとうございました。</p>

<hr />

<p>2014/3/18 0:16 追記</p>

<p>無事、mgem-list に pull-request を出し、<a href="https://github.com/mruby/mgem-list/pull/72">mergeされました</a></p>

<p>ので、今後は mgem コマンドから build_config.rb の追記分を生成することが出来ます。</p>

<p>mgem の使い方に関しては、<a href="http://blog.matsumoto-r.jp/?p=3310">今日からmrubyをはじめる人へ</a> が大変参考になるので、</p>

<p>そちらをご覧ください。&#8221;mruby-ipvs&#8221; という名前で登録してあります。</p>

<hr />

<p>※このブログの内容は個人の見解であり、所属する組織の公式見解でも組織を代表するものでもありません※</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>更に、C 言語で書かれた libipvs を使用するのに、mruby で実装することが都合がよかったのです<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>すみません！ ※2014/3/18 に追加されました<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>未実装のパラメータがいくつもあります<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>そのためには未実装の箇所が多すぎます<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>大阪行きの新幹線の中で書いているので、大阪から帰ってきたらにします。<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#17 最高の学内無線LANにしようぜ]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2013/12/13/uecwutn/"/>
    <updated>2013-12-13T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2013/12/13/uecwutn</id>
    <content type="html"><![CDATA[<p>こんにちわ。れいです。</p>

<p><a href="http://www.adventar.org/calendars/113">UEC Advent Calendar</a> の13日目の記事です。</p>

<p>昨日の記事は nari さんによる <a href="http://www.nari64.com/?p=441">最高のごはんにしようぜ</a> です。</p>

<p>お腹空きますね………。</p>

<!--more-->


<h1>はじめに</h1>

<p>電気通信大学に通っている学生の皆さんなら <a href="http://www.cc.uec.ac.jp/services/all/wlan.html">全学無線LAN</a> 使ってますよね？</p>

<p>今日は <a href="http://www.cc.uec.ac.jp/services/all/wlan.html">全学無線LAN</a> を今までよりちょっと便利に使う方法を紹介します。</p>

<hr />

<h1>何が不便なのか</h1>

<p>電気通信大学に通っている学生の皆さんなら、</p>

<p>一度は <a href="http://www.cc.uec.ac.jp/services/all/wlan.html">全学無線LAN</a> に不便を感じた事がありますよね？<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<blockquote class="twitter-tweet" lang="ja"><p>uecwutnはゴミ</p>&mdash; こはく (@alstamber) <a href="https://twitter.com/alstamber/statuses/400537218663460864">2013, 11月 13</a></blockquote>


<script async src="https://rrreeeyyy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>そもそも、 <a href="http://www.cc.uec.ac.jp/services/all/wlan.html">全学無線LAN</a> で割り当てられるIP帯では</p>

<p>基本的に学外のネットワークと通信する事は出来ません。</p>

<p>そこで、 proxy サーバを用いて学外のネットワークと通信を行います。</p>

<p>ここで幾つかの制限が生まれるので、不便になる訳です。</p>

<p>恐らく、普通に設定をするとWebブラウジングするのが限界です。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<h1>ssh をする</h1>

<p>電気通信大学に通っている学生の皆さんなら、</p>

<p>学外のサーバに ssh 接続をして作業がしたくて堪らないですよね？</p>

<p>先述の通り、 <a href="http://www.cc.uec.ac.jp/services/all/wlan.html">全学無線LAN</a> では学外のネットワークに直接接続することは出来ません。</p>

<p>そこで、一度学外に到達できる学内サーバに ssh をして、</p>

<p>そこから更に学外のサーバに ssh をする必要があります。</p>

<p>この辺りは賢い電気通信大学の皆さんなら経験があると思います。</p>

<p>通常ならこうしますね。</p>

<p>(学内サーバを uec , 学外サーバを server1 とします。) <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost: ~ myname<span class="nv">$ </span>ssh uec -lusername
</span><span class='line'><span class="o">[</span>username@uec ~<span class="o">]</span><span class="nv">$ </span>ssh server1 -lmyname
</span><span class='line'><span class="o">[</span>myname@server1 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>もう少し慣れた人はこうするでしょうか <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost: ~ myname<span class="nv">$ </span>ssh uec -lusername -t ssh server1 -lmyname
</span><span class='line'><span class="o">[</span>myname@server1 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>良いでしょう。でもこういうものがあります。</p>

<p><a href="http://www.cc.uec.ac.jp/info/news/2011/06/20110606-proxyssh.html">プロクシサーバにおけるSSHプロトコルサポート開始のお知らせ</a></p>

<p>proxy サーバが 2011/6/6 より ssh プロトコルをサポートしています。</p>

<p>proxy サーバを proxy-server ,ポートを 8080 とすると、こういうふうに出来ますよね。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost: ~ myname<span class="nv">$ </span>ssh -o <span class="s1">&#39;ProxyCommand nc -X connect -x proxy-server:8080 %h %p&#39;</span> server1
</span><span class='line'><span class="o">[</span>myname@server1 ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんだか良さそうですね、ただちょっと長いですね。
.bashrc に alias 定義しますか？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost: ~ myname<span class="nv">$ </span>cat ~/.bashrc | grep ssh-uec
</span><span class='line'><span class="nb">alias </span>ssh-uec<span class="o">=</span><span class="s2">&quot;ssh -o &#39;ProxyCommand nc -X connect -x proxy-east.uec.ac.jp:8080 %h %p&#39; -o &#39;ServerAliveInterval=60&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>うーん、微妙ですね。こっちのほうがいいでしょうか？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost: ~ myname<span class="nv">$ </span>cat ~/.ssh/config
</span><span class='line'>Host server1
</span><span class='line'>    ProxyCommand nc -X connect -x proxy-server:8080 %h %p
</span></code></pre></td></tr></table></div></figure>


<p>これだと server1 に行きたいときいつも proxy を経由しちゃいますね…。</p>

<p>ssh の -F オプションを使ってファイルを別管理にするか、こんな風にするしかないかな？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost: ~ myname<span class="nv">$ </span>cat ~/.ssh/config
</span><span class='line'>Host *%proxy
</span><span class='line'>    ProxyCommand nc -X connect -x proxy-server:8080 %h %p
</span><span class='line'>
</span><span class='line'>Host server1
</span><span class='line'>    User myname
</span><span class='line'>
</span><span class='line'>localhost: ~ myname<span class="nv">$ </span>ssh server1%proxy <span class="c"># 学内から自宅サーバに接続</span>
</span><span class='line'>localhost: ~ myname<span class="nv">$ </span>ssh server1 <span class="c"># 学外から自宅サーバに接続</span>
</span></code></pre></td></tr></table></div></figure>


<p>シェルスクリプトで使うコンフィグを書き換えるとか色々あると思いますが、</p>

<p>もっと良いソリューションがある人は教えて下さい。</p>

<p>ssh を手に入れてしまえばこっちのものです。</p>

<h1>http , https で接続する</h1>

<p>電気通信大学に通っている学生の皆さんなら、</p>

<p>当然ターミナル上から gem install したり brew install したいですよね？</p>

<p>しかし、Mac のターミナルは システムの proxy を引き継ぎません。 <sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>

<p>http_proxy, https_proxy, ALL_PROXY などの環境変数を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span>http://proxy-server:8080/
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span>http://proxy-server:8080/
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">ALL_PROXY</span><span class="o">=</span>http://proxy-server:8080/
</span></code></pre></td></tr></table></div></figure>


<p>お家に帰ったらこうですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">unset </span>http_proxy
</span><span class='line'><span class="nv">$ </span><span class="nb">unset </span>https_proxy
</span><span class='line'><span class="nv">$ </span><span class="nb">unset </span>ALL_PROXY
</span></code></pre></td></tr></table></div></figure>


<p>さて、 電気通信大学に通っている学生の皆さんなら、</p>

<p>当然 github を学内で使いたくなりますよね？</p>

<p>git は http_proxy を見てくれないです。なのでこうです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global http.proxy proxy-server
</span><span class='line'><span class="nv">$ </span>git config --global https.proxy proxy-server
</span><span class='line'><span class="nv">$ </span>git config --global url.<span class="s2">&quot;https://&quot;</span>.insteadOf git://
</span></code></pre></td></tr></table></div></figure>


<p>お家に帰ったらこうですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global --unset http.proxy
</span><span class='line'><span class="nv">$ </span>git config --global --unset https.proxy
</span><span class='line'><span class="nv">$ </span>git config --global --unset url.<span class="s2">&quot;https://&quot;</span>.insteadOf
</span></code></pre></td></tr></table></div></figure>


<p>徐々に快適になってきましたね。</p>

<p>しかし毎回やるのは面倒ですよね。</p>

<p>優秀な皆さんなら自動化したくなるはずです。</p>

<p>Mac には airport と言うコマンドがあり、それでネットワークの状況を取得できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I
</span></code></pre></td></tr></table></div></figure>


<p>これを使って、SSID 毎に設定を切り替えるスクリプトを書いてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">AIRPORT</span><span class="o">=</span><span class="s2">&quot;/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport&quot;</span>
</span><span class='line'><span class="k">if </span><span class="nb">test</span> <span class="s2">&quot;` ${AIRPORT} -I |grep [^B]SSID|awk &#39;{print $2}&#39;`&quot;</span> <span class="o">=</span> <span class="s2">&quot;uecwutn&quot;</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span>http://proxy-east.uec.ac.jp:8080/
</span><span class='line'>  <span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span>https://proxy-east.uec.ac.jp:8080/
</span><span class='line'>  <span class="nb">export </span><span class="nv">ALL_PROXY</span><span class="o">=</span>http://proxy-east.uec.ac.jp:8080/
</span><span class='line'>  git config --global http.proxy proxy-server
</span><span class='line'>  git config --global https.proxy proxy-server
</span><span class='line'>  git config --global url.<span class="s2">&quot;https://&quot;</span>.insteadOf git://
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">unset </span>http_proxy
</span><span class='line'>  <span class="nb">unset </span>https_proxy
</span><span class='line'>  <span class="nb">unset </span>ALL_PROXY
</span><span class='line'>  git config --global --unset http.proxy
</span><span class='line'>  git config --global --unset https.proxy
</span><span class='line'>  git config --global --unset url.<span class="s2">&quot;https://&quot;</span>.insteadOf
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>いちいち叩くの面倒そうなので、 .bashrc 辺りに書き込んであげるといいと思います。</p>

<p>さらにさらに、無線につなぐたびに認証を求められるのは面倒なので、そこも自動化しましょう。</p>

<p>curl コマンドで form に ID と Password を POST することで認証を抜けることが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -d <span class="s2">&quot;fname=wba_login&amp;username=${STUDENT_ID}&amp;key=${STUDENT_PW}&quot;</span> https://xxx.xxx.xxx.jp/aaa/login.htm
</span></code></pre></td></tr></table></div></figure>


<p>また、Mac ユーザの中には ネットワーク環境 で Proxy を使うかどうか切り替えてる方もいるかもしれません。</p>

<p>こんなコマンドがあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/usr/sbin/scselect <span class="k">${</span><span class="nv">NETENV_NAME</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、ネットワーク環境で定義された環境に変更することが出来ます。</p>

<p>但し、日本語の環境名は使えないので注意してください。</p>

<h1>メールを受信する</h1>

<p>電気通信大学に通っている学生の皆さんなら、</p>

<p>学内でももちろんメールチェックに暇がないですよね？</p>

<p>ところが、学内では先述の通りメールは受信できません…。</p>

<p>一部の賢い電気通信大学の学生の皆さんなら、</p>

<p>自宅にメールサーバがあると思うので、 Roundcube 等を構築すればいいと思います。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p>しかし、どうしても学内で Thunderbird 等のメールクライアントからメールを受信したい人も居ますよね？</p>

<p>ssh を手に入れてしまった私達に不可能はありません。</p>

<p>ssh ポートフォワーディングをしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost<span class="nv">$ </span>ssh myserver -L 10110:localhost:110
</span></code></pre></td></tr></table></div></figure>


<p>これで、 myserver の 110 番ポートと localhost の 10110 番ポートがつながります。</p>

<p>telnet で確認してみてください。<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>telnet localhost 10110
</span><span class='line'>Trying ::1...
</span><span class='line'>Connected to localhost.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'>+OK
</span></code></pre></td></tr></table></div></figure>


<p>gmail が受信したいんじゃ！！ という方はこうです。<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost<span class="nv">$ </span>ssh myserver -L 10995:pop.gmail.com:995
</span></code></pre></td></tr></table></div></figure>


<p>あとは Thunderbird で localhost 10995 などに対応するメールアカウントを作ってあげてください。<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup></p>

<p>IMAP, SMTP 等も同様の方法で出来るので割愛します。</p>

<h1>LINE する</h1>

<p>電気通信大学に通っている学生の皆さんなら、</p>

<p>超絶リア充で LINE の確認に暇がないですよね？</p>

<p>しかし学内では当然 LINE は出来ません。</p>

<p>そこで VPN を使います。<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup></p>

<p>お馴染みポートフォワードです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localhost<span class="nv">$ </span>ssh myserver -L 11194:vpn-server:1194
</span></code></pre></td></tr></table></div></figure>


<p>そして VPN につないで、適当にルーティングをいじってあげれば LINE 出来ます。<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup></p>

<p>LINE のログイン認証をするサーバは gd2.line.naver.jp なので、次のようにルーティングを変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># route -nv add -host gd2.line.never.jp ${GATEWAY_IP}</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、メールの受信なども、VPN があればルーティングでなんとかなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># route -nv add -host imap.googlemail.com ${GATEWAY_IP}</span>
</span><span class='line'><span class="c"># route -nv add -host smtp.googlemail.com ${GATEWAY_IP}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>終わりに</h1>

<p>ネットワークの知識と ssh の接続が確立できればなんでも出来ますね。</p>

<p>決して最後はめんどくさくなって手を抜いた訳ではありません。すみません。</p>

<p>明日は僕と研究室が一緒の <a href="http://flavors.me/alstamber">こはくくん</a> の記事です。楽しみです。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>こはく君の記事は明日です。乞うご期待。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>具体的にどのサービスが使えないとかは時間なかったのでちゃんと検証してないです。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>面倒なのでパスフレーズ無し公開鍵認証です。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>ssh の -t オプションは pseudo-tty を強制的に割り当てます。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>nc 周りは頑張って調べてください。<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>当然ですが…。<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>もしくは mutt など。変態色高まる気がしますが。<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p>myserver の 25番ポートが正しく動いていることが前提。<a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
<li id="fn:9">
<p>一部の経路は暗号化されないので注意してくださいね。<a href="#fnref:9" rev="footnote">&#8617;</a></p></li>
<li id="fn:10">
<p>POPS, SMTPS, IMAPS は telnet では当然確認できないです。 openssl コマンド使ってくださいね。<a href="#fnref:10" rev="footnote">&#8617;</a></p></li>
<li id="fn:11">
<p>電気通信大学に通っている学生の皆さんならVPNサーバ持ってますよね？<a href="#fnref:11" rev="footnote">&#8617;</a></p></li>
<li id="fn:12">
<p>スタンプは別のサーバから飛んでくるので別にルーティングする必要があった気がします。<a href="#fnref:12" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#16 #isucon 3 に学生枠で出て惨敗してました]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2013/11/11/isucon-3/"/>
    <updated>2013-11-11T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2013/11/11/isucon-3</id>
    <content type="html"><![CDATA[<p>こんにちわ。れいです。</p>

<p><a href="http://isucon.net/">isucon</a>というやつに出てました。</p>

<!--more-->


<h1>isucon(iikanjini speed up contest)</h1>

<blockquote><p>お題となるWebサービスを決められたレギュレーションの中で限界まで高速化を図るチューニングバトル、</p>

<p>それがISUCONです。</p></blockquote>

<p>とのことです</p>

<hr />

<h1>チーム</h1>

<p>「( (0) / (0)) ☆祝☆」という読めないチーム名で参加してました。</p>

<p>「omedeto くん」という名前が付いているらしいです。</p>

<p>詳しくは後述のnari_exさんのblogを読んでください。</p>

<p><a href="https://twitter.com/nari_ex">nari_ex</a> さん と <a href="https://twitter.com/kur_neko">kur_neko</a> さんと僕の3人チームです。</p>

<p>3人とも電気通信大学と言うところの大学生で、</p>

<p>nari_exさんと僕は学部4年生で、kur_nekoさんは入学年度が1つ下です。(※)</p>

<hr />

<h1>予選(2013/10/5)</h1>

<p>この日は確か体中に謎の腫瘍(恐らく粉瘤腫)が炎症を起こしてから3日目ぐらいで、</p>

<p>朝からロキソニンを飲んで予選に参加していた記憶があります。</p>

<p>と言ったコンディションだったので、毛ほどもチームの役に立った記憶がありません。</p>

<p>何をしていたのか定かではないですが、</p>

<p>Varnishを入れようと思って諦めたり、Redisでいくつかの値をキャッシュしようとしたりしてました。</p>

<p>(いずれも時間内に終わらずに挫折している)</p>

<p>あ、Markdownの外部プロセスの呼び出しをやめてRedcarpetを使うようにしました。</p>

<p>予選も本選もRubyを使っていました。</p>

<p>Ruby/Python/Nodeは経験があったので、</p>

<p>そのどれかにしようということだったのですが特に決めておらず、</p>

<p>予選でベンチマークを取った結果Rubyが一番早かったのでRubyにしました。</p>

<p>主にnari_exさんがクエリをチューニングして、</p>

<p>kur_nekoさんがNginxとMySQLのパラメータチューニングをしてました。</p>

<p>僕は痛みと闘いながら呻いてました。みんなありがとう。</p>

<p>お陰で途中の発表では1位になって場が沸き立ったりしました。</p>

<p>が、その後伸び悩んだのでスコアとしては全然低い感じで落ち着いてしまったのでした。</p>

<p>学生枠で確か2位(繰り上がり1位)の成績で本選出場を決めたのでした。</p>

<hr />

<h1>本選(2013/11/9)</h1>

<p>場所は渋谷ヒカリエのLINE株式会社オフィス！</p>

<p><img src="https://rrreeeyyy.github.io/images/blog/isucon-line.jpg" alt="渋谷ヒカリエLINE株式会社オフィス" /></p>

<p>めっちゃ綺麗だった。いつもLINE使ってます。ありがとうございます。</p>

<p>クリアファイル貰ったりもしました。</p>

<p><img src="https://rrreeeyyy.github.io/images/blog/isucon-filer.jpg" alt="こいつの名前なんていうんだったっけ..." /></p>

<p>始まる直前までめっちゃドキドキしてました。</p>

<p>Redbullを買ったのにモンスターエナジーを貰ってしまったので両方飲んだりして過ごしてました。</p>

<p>開会式の時にレギュレーションを聞いてから、18時になってしまうまでは一瞬のような感じでした。</p>

<p>僕らのチームがやったことは、nari_exさんが既に素晴らしくまとめてくださってました。</p>

<p><a href="http://www.nari64.com/?p=221">ISUCON 決勝に学生枠で出場してきました(惨敗)</a></p>

<p>僕は主にRubyの実装を担当してました。</p>

<p>実装スピードが単純に遅いのも反省点ですし、</p>

<p>今回目指した構成の場合、各サーバ毎にアプリケーションのコードを微妙に変えなければならなかったので、</p>

<p>その辺をうまーく調整できなかったので大分時間を食ってしまった感じがします。</p>

<p>あとは、ミドルウェアをいじってる側とかなり競合してしまい、</p>

<p>待ち時間が発生したりデバッグが困難だったりしたのでも時間を食った感じがします。</p>

<p>効率的に開発/デプロイする環境についてもう少し考えて準備しておくべきだったと反省してます。</p>

<p>(というより、この記事を書くにあたって改めて考えた結果、どんどん反省点が出てきたので書きながら反省している)</p>

<p>まあ結果はタイトルにある通り惨敗でございます。</p>

<p>(もしスコアが出ていれば学生1位のチームと同じぐらいだった気がしますが、</p>

<p>たらればの話となり負け犬の遠吠え感が出ている)</p>

<hr />

<h1>懇親会</h1>

<p>あとはビールを飲んだり(ごちそうさまです)</p>

<p><img src="https://rrreeeyyy.github.io/images/blog/isucon-beer.jpg" alt="ビールごちそうさまです" /></p>

<p>ピザを食べたり(ごちそうさまです)</p>

<p><img src="https://rrreeeyyy.github.io/images/blog/isucon-pizza.jpg" alt="ピザごちそうさまです" /></p>

<p>夜景を眺めてみたり</p>

<p><img src="https://rrreeeyyy.github.io/images/blog/isucon-build.jpg" alt="夜景眺めていたら「負けたのそんなにショックだった？飛び降りはダメだよ！！」と説かれた" /></p>

<p>あとは学生枠の方々と喋ったり、他チームの方と喋ったりしていました。</p>

<hr />

<h1>感想</h1>

<p>良くも悪くも自分(そしてチーム)の実力を定量的に評価できたと思っています。</p>

<p>そして己の無力さに打ちひしがれたのでリスヵ…ではなくて研鑽を積みたいと思います。</p>

<p>来年からは新卒1年目という肩書になってしまうので、学生枠参加は無理ですが、</p>

<p>果たせなかった学生枠1位はkur_nekoさんとその後輩達に託し、</p>

<p>社会人枠で参加して1位を目指す予定です。頑張ります。</p>

<h1>余談</h1>

<p>余談ですが、</p>

<p>ISUCON終わったあとnari_exさんと家の近くの公園で寒空の下2時間ほど反省会をした結果、</p>

<p>あまりに寒すぎて風邪を引いておよそ三日三晩寝こむ羽目になりました。</p>

<p>結果としてブログを書くのが遅れることとなりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#15 July Tech Festa( #TechFesta )に行きました]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2013/07/15/15-techfesta/"/>
    <updated>2013-07-15T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2013/07/15/15-techfesta</id>
    <content type="html"><![CDATA[<p>こんにちわ。れいです。<br/>
昨日は<a href="http://www.techfesta.jp/">July Tech Festa</a>というITエンジニア夏の祭典に行って来ました！</p>

<!--more-->


<h1>JTF(July Tech Festa)</h1>

<blockquote><p>クラウド環境が普及し，関連した話題が盛り上がり，これにしたがい，
これらを裏側で実現する開発者の技術修得の意欲が高まってきています。
また，各種ITトレンドが凄まじい速度で移り変わり，技術者同士が活発に交流し，
情報交換と人脈構築をしようという動きが顕著にみられます。
これらの意欲と活動に応じるため，ITに係るエンジニアの知的興味を満足するための夏の祭典として
「コードの中のインフラ（Infrastructure as Programming）」
をスローガンに当イベントを開催いたします。</p></blockquote>

<p>(引用: <a href="http://www.techfesta.jp/">July Tech Festa</a>)</p>

<p>※消して手抜きではありません</p>

<hr />

<p>場所は<a href="http://aiit.ac.jp/">産業技術大学院大学</a>！</p>

<p><img src="https://rrreeeyyy.github.io/images/blog/aiit.jpg" alt="AIIT" /></p>

<p>朝は<a href="http://www.uec.ac.jp/">弊大学</a>の<a href="http://www.uec.ac.jp/admission/open-department/opencampus/">オープンキャンパス</a>だったので、JTF自体はお昼からの参加でした。</p>

<hr />

<p>到着して真っ先に配布されたお弁当を食べ、chefハンズオンに向かいました！</p>

<p><img src="https://rrreeeyyy.github.io/images/blog/chef-handson.png" alt="chef-handson" /></p>

<p>オープンソースChefはちょっとだけ触ったことがあったのですが、</p>

<p>Hosted Chefを触るのは初めてで、実は<a href="http://www.opscode.com/">Opscode</a>の事も全然知りませんでした。</p>

<p>なのでOpscodeをどう使い、そこからChefをどう使っていくかの流れが分かり、大変良かったです。</p>

<p>実際、部屋には収まりきらないほど人が居て、</p>

<p>ITインフラの自動化やchefが注目を浴びている事がよく分かりました。</p>

<p>(chefの記事もそのうち書きたいですね…)</p>

<hr />

<p><img src="https://rrreeeyyy.github.io/images/blog/serverspec.jpg" alt="serverspec" /></p>

<p>続いては &ldquo;serverspec: Chef/Puppetと一緒に使うサーバテストのためのテスティングフレームワーク&rdquo;</p>

<p>お馴染み paperboy&amp;co. の <a href="http://mizzy.org/">mizzy</a> さんです。</p>

<p>実は <a href="http://connpass.com/event/2580/">hbstudy#45</a> でこの話を聞けているはずだったのですが…当日電車が止まりいけず…</p>

<p>大変悔しい思いをしていたのですが、JTFで聞ける！ということで楽しみでした。</p>

<p>内容はhbstudy#45の<a href="http://www.slideshare.net/mizzy/serverspec-hbstudy45">このスライド</a>とほぼ同じで、</p>

<p>serverspec開発の経緯や実際のデモ、サーバのCIについてなどの話でした。</p>

<hr />

<p><img src="https://rrreeeyyy.github.io/images/blog/cupa.jpg" alt="cupa" /></p>

<p>さてさて続いてはクラウド運用管理研究会のお話です。</p>

<p>まずはMySQLの冗長構成のお話でした。</p>

<p>(クラウド運用管理研究会、なのでクラウドの話からスタートかと思いきやでびっくりしました…ｗ)</p>

<p>時代の流れと共に変化するMySQLの冗長構成について、</p>

<p>それぞれのメリット/デメリットや運用上のノウハウ等を交えたお話をされてました。</p>

<p>おおまかに分けると、</p>

<ul>
<li>Heartbeat + mon</li>
<li>Heartbeat + DRBD</li>
<li>AmazonRDS</li>
<li>MHA</li>
</ul>


<p>の話をされてたかなーと思います。</p>

<p>MHAに関しては最近興味が湧いてきていたので、話が聞けてすごくラッキーだったと思います。</p>

<p>これは必ずあとで検証してみようと思います。</p>

<p>余談ですがMHAでググったら2番目に<a href="http://heartbeats.jp/hbblog/2013/05/mysql-mha-haproxy.html">弊社ブログ記事</a>がヒットしてました。</p>

<p>社内勉強会のネタとかデモとかになったりしないかな…。(チラッ)</p>

<hr />

<p>その後、オープンソースのクラウドマネジメントツール Scalrのお話がありました。</p>

<p>Scalrの存在を実は全く知らなかったのですが、いやーこれはすごい。こういうのがあるんですねぇ世の中…。</p>

<p>個人レベルだとあんまり使えないかもしれないですが、ちょっと触ってみたい、</p>

<p>と思わせてくれる魅力があるOSSでした。</p>

<hr />

<p><img src="https://rrreeeyyy.github.io/images/blog/kaju.jpg" alt="kaju" /></p>

<p>道中でスポンサーの<a href="https://www.oisix.com/">Oisix</a>さんのジュースをゲットしたりしながらラストのLTへ向かいました。</p>

<hr />

<p><img src="https://rrreeeyyy.github.io/images/blog/lt.jpg" alt="LT" /></p>

<p>Zabbixの拡張ツール <a href="http://tech-sketch.github.io/hyclops/jp/">Hyclops</a> を開発された話とか、</p>

<p>3連続でLTされた方が居たりとか(すごい話が面白い方でした)、</p>

<p>地味に嬉しかったのは馬場さんの<a href="http://www.slideshare.net/toshiak_netmark/nouka-inventry-manager">nouka</a>の話を聞けたことですかねｗ</p>

<p>(実は1回も聞いたことが無かった)</p>

<p>講演されてた方はもちろんLTの方もすごく為になる話ばっかりで、</p>

<p>いつかは前に出て話して見たいなぁと思わせてくれました。</p>

<hr />

<p><img src="https://rrreeeyyy.github.io/images/blog/beer.jpg" alt="beer" /></p>

<p>そして懇親会でビールを飲みました。</p>

<p>勉強会は懇親会が本番とよく聞きますが、そりゃもうすごい人がバンバン出てきて…</p>

<p>色んな話を聞かせて貰ってすごく楽しかったです！</p>

<p>あと年が近い方もいらっしゃって、お知り合いになれてよかったです。</p>

<p>(年が近い人と勉強会で会うことがあまり多くないので)</p>

<p>そんなこんなで大変楽しかったです。ほんとに行ってよかった。</p>

<hr />

<p><img src="https://rrreeeyyy.github.io/images/blog/end.jpg" alt="end" /></p>

<p>実は終わった後、運営の方と2次会に参加させて貰っていましたｗ</p>

<p>こちらも皆さんすごい人で、なぜ僕があそこにいたのか皆さん疑問だったと思うんですが、</p>

<p>またまたとても楽しい話を聞けて、ほんとによかったです。ありがとうございました。</p>

<hr />

<p>余談: このブログを書こうと思っていたらいつの間にかブログの移設作業をしてました。</p>

<p>何か変な所とかがあったらこっそりTwitterかなにかで教えて下さい。</p>

<p>ブログ移設に関するブログも書きたいですね…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#14 tmuxinatorで開発・運用を便利に]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2013/02/25/14-tmuxinator/"/>
    <updated>2013-02-25T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2013/02/25/14-tmuxinator</id>
    <content type="html"><![CDATA[<p>こんにちわ。れいです。<br/>
今日はtmuxinatorというtmuxのセッション管理ツールを紹介します。</p>

<!--more-->


<h1><span style="text-decoration: underline;">tmuxとは？</span></h1>

<p><a href="http://tmux.sourceforge.net/">tmux</a>は、CUI上でウィンドウを管理するために用いられるソフトウェアです。</p>

<p>いわゆるターミナルマルチプレクサというやつですね。</p>

<p>tmux以外で有名なターミナルマルチプレクサに <a href="http://www.gnu.org/software/screen/">screen </a>があります。</p>

<p>詳しく知りたい方は、ぜひ調べて貰えればと思います。</p>

<p>こちらがとっても参考になると思います。</p>

<p>→ <a href="http://atnd.org/events/22320">ターミナルマルチプレクサ Advent Calendar 2011</a></p>

<h1><span style="text-decoration: underline;">tmuxinatorとは？</span></h1>

<p>今日の本題です。</p>

<p><a href="https://github.com/aziz/tmuxinator/">tmuxinator </a>は、tmuxで起動するウィンドウやレイアウトを事前に設定しておき、</p>

<p>tmuxinatorコマンドを実行することにより設定通りのウィンドウ配置にするツールです。</p>

<p>インストールや設定方法はこちらのブログが参考になるかと思います。</p>

<p><a href="http://qiita.com/items/869b00fdde27c2225989">→tmuxinatorで一瞬で開発環境を起動する</a></p>

<p>僕が実行したインストール方法も以下に記載しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install tmuxinator
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39; [[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] &amp;&amp; source $HOME/.tmuxinator/scripts/tmuxinator &#39;</span> &gt;&gt; <span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>/.bashrc
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> <span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>/.bashrc
</span></code></pre></td></tr></table></div></figure>


<p>tmuxinatorは環境変数 $EDITOR と $SHELL を参照するので、</p>

<p>設定していない場合は設定を行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;export EDITOR=/usr/bin/vim&#39;</span> &gt;&gt; <span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>/.bashrc
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;export SHELL=/bin/bash&#39;</span> &gt;&gt; <span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>/.bashrc
</span></code></pre></td></tr></table></div></figure>


<p>tmuxinatorを使用する準備が整ったかどうかは、</p>

<p>tmuxinator doctor コマンドで確認できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tmuxinator doctor
</span><span class='line'>  checking <span class="k">if </span>tmux is <span class="nv">installed</span> <span class="o">==</span>&gt; Yes
</span><span class='line'>  checking <span class="k">if</span> <span class="nv">$EDITOR</span> is <span class="nb">set</span> <span class="o">==</span>&gt; Yes
</span><span class='line'>  checking <span class="k">if</span> <span class="nv">$SHELL</span> is <span class="nb">set</span> <span class="o">==</span>&gt; Yes
</span></code></pre></td></tr></table></div></figure>


<p>また、tmuxinatorコマンドにはmuxというaliasが貼られているので、</p>

<p>mux doctor でも同様に確認できます。</p>

<p>以降はmuxコマンドを用いて説明していきます。</p>

<h1><span style="text-decoration: underline;">設定方法</span></h1>

<p>tmuxinatorの設定を行なっていきます。</p>

<p>設定ファイルの作成は、mux new ${PROJECT_NAME} で行います。</p>

<p>コマンドを実行すると、環境変数で指定したエディタで設定ファイルが開かれます。</p>

<p>設定はyaml形式で記述していきます。</p>

<p>デフォルトの設定ファイルは以下のようになっていると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># ~/.tmuxinator/Test.yml</span>
</span><span class='line'><span class="c1"># you can make as many tabs as you wish...</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">project_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Tmuxinator</span>
</span><span class='line'><span class="l-Scalar-Plain">project_root</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">~/code/rails_project</span>
</span><span class='line'><span class="l-Scalar-Plain">socket_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">foo</span> <span class="c1"># Not needed.  Remove to use default socket</span>
</span><span class='line'><span class="l-Scalar-Plain">rvm</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1.9.2@rails_project</span>
</span><span class='line'><span class="l-Scalar-Plain">pre</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sudo /etc/rc.d/mysqld start</span>
</span><span class='line'><span class="l-Scalar-Plain">tabs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">editor</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-vertical</span>
</span><span class='line'>      <span class="l-Scalar-Plain">panes</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">vim</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="c1">#empty, will just run plain bash</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">top</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git pull</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rails db</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">server</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rails s</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">logs</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">tail -f logs/development.log</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">console</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rails c</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">capistrano</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">server</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ssh me@myhost</span>
</span></code></pre></td></tr></table></div></figure>


<p>rvm: の後にバージョンを指定する事で、</p>

<p>プロジェクトで使用するRubyのバージョンを選べます。</p>

<p>pre: の後にコマンドを記述する事で、</p>

<p>プロジェクトを起動する前に実行するコマンドを指定する事が出来ます。</p>

<p>tabs: の後にプロジェクトで起動するウィンドウを記述する事が出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">tabs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">git pull</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rails db</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">server</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">rails s</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>WINDOW名 : 実行コマンド</li>
</ul>


<p>のように記述していきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">editor</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-vertical</span>
</span><span class='line'>      <span class="l-Scalar-Plain">panes</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">vim</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="c1">#empty, will just run plain bash</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">top</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように記述した場合、main-verticalレイアウトで3つのpaneが開かれます。</p>

<p>Railsの設定ファイルの例は、</p>

<p>本記事の上部で紹介したブログを参考にされるといいかと思います。</p>

<h1><strong><span style="text-decoration: underline;">djangoの例</span></strong></h1>

<p>参考までに、僕が使用しているdjangoの開発環境での設定ファイルを紹介します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># ~/.tmuxinator/test.yml</span>
</span><span class='line'><span class="c1"># you can make as many tabs as you wish...</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">project_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Test</span>
</span><span class='line'><span class="l-Scalar-Plain">project_root</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/path/to/project</span>
</span><span class='line'><span class="l-Scalar-Plain">pre</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pgrep mysqld || mysqld_safe --log-error=${HOME}/mysqld_error.log &amp;</span>
</span><span class='line'><span class="l-Scalar-Plain">tabs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-vertical</span>
</span><span class='line'>      <span class="l-Scalar-Plain">panes</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ls</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">python manage.py shell</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">python manage.py runserver</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">models</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cd application/ &amp;&amp; vim models.py</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">view</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cd views/</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cd templates/</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">js</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cd assets/js/</span>
</span></code></pre></td></tr></table></div></figure>


<p>プロジェクトを開始する際は mux ${PROJECT_NAME} で起動します。</p>

<p>上記ファイルで mux Testを行うと、以下のようにtmuxが起動します。</p>

<p><a href="http://rrreeeyyy.com/images/blog/tmuxinator.png"><img class="alignnone size-full wp-image-452" alt="tmuxinator" src="https://rrreeeyyy.github.io/images/blog/tmuxinator.png" width="599" height="337" /></a></p>

<p>2番目のウィンドウでは vim  models.py が実行されて、</p>

<p>3,4,5番目のウィンドウでは指定のパスにcdしている状態です。</p>

<h1><strong><span style="text-decoration: underline;">運用の例</span></strong></h1>

<p>続いて運用の際の例です。</p>

<p>障害が発生した時に、</p>

<p>「Webサーバ入って、ロードアベレージ見て、プロセス見て、ログ見て…。</p>

<p>あ、DBサーバにも入らなきゃ…</p>

<p>DBサーバでもロードアベレージ見て、プロセス見て…。</p>

<p>そういえばアプリケーションサーバの調子はどうだろうか…。」</p>

<p>みたいなことはよくある話ですね。tmuxinatorでコマンド1発にしてみましょう。</p>

<p>以下のように設定ファイルを記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># ~/.tmuxinator/example.yml</span>
</span><span class='line'><span class="c1"># you can make as many tabs as you wish...</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">project_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Example</span>
</span><span class='line'><span class="l-Scalar-Plain">project_root</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">~/</span>
</span><span class='line'><span class="l-Scalar-Plain">tabs</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">web_front</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-vertical</span>
</span><span class='line'>      <span class="l-Scalar-Plain">panes</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh web-01</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh web-01 -t sudo less /var/log/nginx/error.log$(date +%Y%m%d)</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh web-01 -t top</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-vertical</span>
</span><span class='line'>      <span class="l-Scalar-Plain">panes</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh app-01</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh app-01 -t top</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">main-vertical</span>
</span><span class='line'>      <span class="l-Scalar-Plain">panes</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh db-01</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh db-01 -t mysql -u root -p</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh db-01 -t sudo less /var/lib/mysql/error.log</span>
</span></code></pre></td></tr></table></div></figure>


<p>mux example してやると以下のようになります。</p>

<p><a href="http://rrreeeyyy.com/images/blog/tmuxinator_example.png"><img class="alignnone size-full wp-image-453" alt="tmuxinator_example" src="https://rrreeeyyy.github.io/images/blog/tmuxinator_example.png" width="600" height="337" /></a></p>

<p>&nbsp;</p>

<p>もちろん2番目のwindowではappサーバにログインし、</p>

<p>3番目のwindowではdbサーバにログインしている状態になっています。</p>

<p>&nbsp;</p>

<p>どうだったでしょうか。tmuxinator、みなさん是非使ってみて下さい。</p>

<p>※ ちなみにscreenで同じ事をする <a href="https://github.com/jondruse/screeninator">screeninator </a>もあります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#13 vimでmarkdownのlive previewをする]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2013/01/09/13-vim-markdown-live-preview/"/>
    <updated>2013-01-09T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2013/01/09/13-vim-markdown-live-preview</id>
    <content type="html"><![CDATA[<p>こんばんわ。れいです。 タイトルの通り、<br/>
vimでmarkdownのlive previewをする方法を紹介します。</p>

<!--more-->


<h3>vim</h3>

<ul>
<li>言わずと知れたエディタ</li>
</ul>


<h3>Markdown</h3>

<ul>
<li>言わずと知れた軽量マークアップ言語</li>
</ul>


<h3>live preview</h3>

<ul>
<li>書いたMarkdownをリアルタイムでレンダリングする</li>
</ul>


<p>&nbsp;</p>

<p>vimはここで魅力を語るまでもない素晴らしいエディタです。</p>

<p>Markdownは簡単に装飾された文章が書けるのですごく良いです。</p>

<p>書いたMarkdownをそのままビジュアルで見れるのはハッピーです。</p>

<p>&nbsp;</p>

<h3>今まで</h3>

<p>MarkdownのLive previewをしようと思ったら、</p>

<ul>
<li>Webサイト</li>
<li>Mou</li>
<li>TextMate</li>
<li>reText</li>
</ul>


<p>などの選択肢がありました。<br/>
これらは便利でしたが、やはり使い慣れたエディタでMarkdownをlive previewで書きたかったのです。</p>

<p>&nbsp;</p>

<h3>そこで</h3>

<p><a href="https://github.com/suan/instant-markdown-d">instant-markdown-d</a> と <a href="https://github.com/chreekat/vim-instant-markdown">vim-instant-markdown</a> です。</p>

<p>&nbsp;</p>

<h4>instant-markdown-d</h4>

<ul>
<li>node.jsで作られた、markdownをlive previewする用のサーバです</li>
</ul>


<h5>インストール方法</h5>

<p>ターミナル上で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># gem install redcarpet pygments.rb
</span><span class='line'># npm -g install instant-markdown-d</span></code></pre></td></tr></table></div></figure>


<p>※ Ruby, node.jsが入ってない人は入れてください。<br/>
brew install nodejs など。</p>

<p>たったこれだけで入ります。<br/>
起動してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># instant-markdown-d </span>
</span><span class='line'>   info  - socket.io started
</span></code></pre></td></tr></table></div></figure>


<p>こんなかんじで、socket.ioが起動すればインストール成功です。<br/>
サーバがlocalhostの8090でLISTENを始めます。<br/>
PUT, DELETEメソッドを使ってmarkdownのupload、サーバの終了を行います。</p>

<p>&nbsp;</p>

<h4>vim-instant-markdown</h4>

<p>vim-instant-markdownを入れると、vimでファイルを編集中に、<br/>
ほぼ自動的に現在のバッファをinstant-markdown-dにPUTしてくれます。<br/>
instant-markdown-dはsocket.ioで自動更新されるので、live previewを味わう事ができます。</p>

<h5>インストール方法</h5>

<p>個人のvimの環境によって様々なので、適宜読み替えてください。<br/>
例はこんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># git clone git://github.com/chreekat/vim-instant-markdown.git</span>
</span><span class='line'><span class="c"># mkdir -p ~/.vim/after/ftplugin/markdown/</span>
</span><span class='line'><span class="c"># mv {vim-instant-markdown,~/.vim}/after/ftplugin/markdown/instant-markdown.vim</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;</p>

<p>さあ、これでMarkdownなファイルを開いてみましょう。<br/>
正しくインストールできていればデフォルトのブラウザでlocalhost:8090が起動するでしょう。<br/>
もし起動しなかった場合は、ファイルを開いた時にfiletypeがMarkdownでない。などの原因が考えられます。<br/>
vim-markdownプラグインを入れるか、 vimrcに以下の様にかくといいと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>autocmd <span class="nb">BufRead</span><span class="p">,</span><span class="nb">BufNewFile</span> *.mkd  <span class="k">setfiletype</span> markdown
</span><span class='line'>autocmd <span class="nb">BufRead</span><span class="p">,</span><span class="nb">BufNewFile</span> *.md  <span class="k">setfiletype</span> markdown
</span></code></pre></td></tr></table></div></figure>


<p>後は好きなだけMarkdownを書くだけです。<br/>
ちなみにgithub-flavored-markdownに対応してます。</p>

<p><a href="https://rrreeeyyy.github.io/images/blog/189c9aab7f8d3f926ad9da018f0e471a.png" rel="attachment wp-att-431"><img class="alignnone size-full wp-image-431" alt="live preview" src="https://rrreeeyyy.github.io/images/blog/189c9aab7f8d3f926ad9da018f0e471a.png" width="1057" height="476" /></a></p>

<p>&nbsp;</p>

<h3>余談</h3>

<p>今回はvimの話をしましたが、instant-markdown-d があれば、<br/>
今流行の <a href="http://www.sublimetext.com/dev">Sublime Text 2</a> でも<br/>
markdownのlive previewが出来そうですね〜。<br/>
Thread使ってcurlでPUTすれば…？みたいな事も考えられますね。</p>

<p>それでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#12 djangoにて、AjaxでPOSTをする]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2013/01/03/12-django-ajax-post/"/>
    <updated>2013-01-03T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2013/01/03/12-django-ajax-post</id>
    <content type="html"><![CDATA[<p>皆さんあけましておめでとうございます。<br/>
2013年もどうぞよろしくお願いします、れいです。</p>

<p>さて、へび年です。<br/>
へびと言えば？</p>

<p>…そう。<a href="http://ja.wikipedia.org/wiki/Python">Python</a>ですよね。</p>

<p>今日はdjangoのちょっとしたメモを残します。ただの備忘録になってますが。</p>

<!--more-->


<p>PythonのWebフレームワークと言えばお馴染み<a href="http://ja.wikipedia.org/wiki/Django">Django</a><br/>
<a href="http://docs.pylonsproject.jp/projects/pyramid-doc-ja/en/latest/index.html">Pyramid</a>もありますが、今日はdjangoの話です。</p>

<p>さて、djangoは1.2系から<a href="http://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B5%E3%82%A4%E3%83%88%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%AA">CSRF</a>を防ぐために、csrf_tokenを導入しています。</p>

<p>HTMLのformでPOSTをする際には、テンプレートに以下のように書かなければなりません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;#&quot;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span><span class="nt">&gt;</span>{\% csrf_token \%}
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="err"> </span><span class="s">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな風に書くと、実際のhtmlは以下のように出力されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;#&quot;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;display:none&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">name=</span><span class="s">&#39;csrfmiddlewaretoken&#39;</span> <span class="na">value=</span><span class="s">&#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ところで、時代はAjaxです。<br/>
非同期で、対話的で、ダイナミックで、リアルタイムなウェブサイトを作るためには、<br/>
Ajaxの力を借りるのが一般的でしょう。</p>

<p>こんな風にしましょう</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="err">\</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;data&quot;</span> <span class="na">id=</span><span class="s">&quot;data&quot;</span> <span class="err">\</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを別のページにPOSTして、<br/>
その結果をresultというIDに入れたい！</p>

<p>おそらく、こう書くでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#result&quot;</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="s2">&quot;/other/page&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="p">{</span> <span class="s1">&#39;test&#39;</span> <span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#test&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;data&#39;</span> <span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#data&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ところが、これではdjangoに怒られて、403が帰ってきてしまいます。<br/>
それもそのはず、csrf_tokenが無いからです。</p>

<p>対策はいくつかありそうですが、こんなのが推奨されていました。<br/>
jQueryのAjaxSend関数を以下のようにする方法です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jQuery</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ajaxSend</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">,</span> <span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">getCookie</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">cookieValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span> <span class="o">&amp;&amp;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">cookies</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">cookies</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">cookie</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">cookies</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="c1">// Does this cookie string begin with the name we want?</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">name</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;=&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">cookieValue</span> <span class="o">=</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">cookieValue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">sameOrigin</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// url could be relative or scheme relative or absolute</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span><span class="p">;</span> <span class="c1">// host + port</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">protocol</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">sr_origin</span> <span class="o">=</span> <span class="s1">&#39;//&#39;</span> <span class="o">+</span> <span class="nx">host</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">origin</span> <span class="o">=</span> <span class="nx">protocol</span> <span class="o">+</span> <span class="nx">sr_origin</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// Allow absolute or scheme relative URLs to same origin</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">url</span> <span class="o">==</span> <span class="nx">origin</span> <span class="o">||</span> <span class="nx">url</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="nx">origin</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>            <span class="p">(</span><span class="nx">url</span> <span class="o">==</span> <span class="nx">sr_origin</span> <span class="o">||</span> <span class="nx">url</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">sr_origin</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="nx">sr_origin</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>            <span class="c1">// or any other URL that isn&#39;t scheme relative or absolute i.e relative.</span>
</span><span class='line'>            <span class="o">!</span><span class="p">(</span><span class="sr">/^(\/\/|http:|https:).*/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">safeMethod</span><span class="p">(</span><span class="nx">method</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="sr">/^(GET|HEAD|OPTIONS|TRACE)$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">method</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">safeMethod</span><span class="p">(</span><span class="nx">settings</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">sameOrigin</span><span class="p">(</span><span class="nx">settings</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s2">&quot;X-CSRFToken&quot;</span><span class="p">,</span> <span class="nx">getCookie</span><span class="p">(</span><span class="s1">&#39;csrftoken&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>何をしているのかというと、XMLHttpRequestに対し、<br/>
X-CSRFTokenヘッダの値にcsrftokenの値を付加しています。<br/>
(※jQuery1.5以上でしか動作しない模様です)</p>

<p>上記のスクリプトを、ajaxを利用するスクリプトファイルの上部に記述しましょう。<br/>
そうすると、特に何も考えずにdjangoのページにAjaxでPOSTすることが出来るようになります。</p>

<p>これで皆さんはdjangoを使って簡単に、<br/>
そしてAjaxを使って対話的に、ダイナミックに、インタラクティブに、<br/>
Webサイトを作ることが出来るでしょう:&ndash;)<br/>
(※個人の能力によります)</p>

<p>さて、今日書いた事は実は<a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/">ここ</a>に書いてあります。<br/>
こちらを読むほうが正確でしょう。</p>

<p>へび年なので、新年の挨拶がてらpythonネタを書いてみたかっただけです。<br/>
しかしdjangoは本当に簡単でいいですね。<br/>
あとjQueryも最近覚え始めましたが、javascriptをベタ書きするより遥かに楽ですごくいいですね。</p>

<p>それでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#11 #mixi_scrap に参加してきたよ〜]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2012/12/17/11-mixi-scrap/"/>
    <updated>2012-12-17T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2012/12/17/11-mixi-scrap</id>
    <content type="html"><![CDATA[<p>こんにちわ〜。れいです。<br/>
12/15にmixi社で行われた <a href="http://mixi.co.jp/event/challenge-2012/">Scrap Challenge for security</a> なるイベントに参加してきました。</p>

<!--more-->


<h3>何？</h3>

<p>Scrap Challenge for securityは、2〜3人でチームを組んで、<br/>
仮想環境にあるセキュリティホールを見つけるイベントです！</p>

<p><a href="https://rrreeeyyy.github.io/images/blog/20121215-193752.jpg" rel="attachment wp-att-367"><img class="alignnone size-full wp-image-367" alt="20121215-193752" src="https://rrreeeyyy.github.io/images/blog/20121215-193752.jpg" width="600" height="350" /></a></p>

<h3>開始</h3>

<p>10時40分受付開始、11時過ぎぐらいにイベント開始でした。<br/>
先ずは<a href="https://twitter.com/haruyama">@haruyama</a>さんによるWebセキュリティ講座。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B005I19D0O/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;#038;camp=247&amp;#038;creative=1211&amp;#038;creativeASIN=B005I19D0O&amp;#038;linkCode=as2&amp;#038;tag=rrreeeyyy-22">ガイ・フォークスのマスク(通称:Anonymousマスク)</a><img src="http://www.assoc-amazon.jp/e/ir?t=rrreeeyyy-22&#038;l=as2&#038;o=9&#038;a=B005I19D0O" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />を付けてて驚きましたが、<br/>
講座の内容は真剣そのもので、mixiで発生した過去のセキュリティ問題について解説が行われました。<br/>
某「こんにちわこんにちわ!!」事件なんかも登場してましたｗ</p>

<h3>お昼</h3>

<p>その後昼食。<br/>
なんと昼食が用意されていたのです!!<br/>
(どこかに食べに行くだろうと思っていたので驚いた)</p>

<p><a href="https://rrreeeyyy.github.io/images/blog/20121215-130613.jpg" rel="attachment wp-att-368"><img class="alignnone size-full wp-image-368" alt="20121215-130613" src="https://rrreeeyyy.github.io/images/blog/20121215-130613.jpg" width="600" height="350" /></a></p>

<p>こんなお弁当でした。<br/>
非常に美味しかった。<br/>
<a href="https://twitter.com/haruyama">@haruyama</a>さんと同席させてもらったのですが、<br/>
普段は会社でどんな事をやってるんですか〜？とか、<br/>
今までのキャリアとかを聞けて非常に楽しかったです！<br/>
(とってもすごい人でした…。)</p>

<h3>本番</h3>

<p>お昼を食べたあとはいよいよ本番スタートです。<br/>
<a href="http://ip7.biz/wordpress/">@kodam</a>さんと <a href="https://twitter.com/hitsujisheep">@hitsujisheep</a>さんと僕の3人でBチームでした。<br/>
二人とも頼りになるしいい人だったので、非常にやりやすかったです！<br/>
ありがとうございました〜。</p>

<p>どんな事をやったかは具体的に書かないでね！と言われたので軽く説明してみると、<br/>
仮想環境に用意された、脆弱性のあるmixiをいかに攻撃するか！ということでした。<br/>
脆弱性のお題が10程あって、各お題に対して点数が決まっています。<br/>
解いたお題に対して、各チームに点数が加算されていく方式です。<br/>
時間が経つと書くお題のヒントが表示されますが、その分点数は下がってしまいます。<br/>
なので、いかにはやく！いかにおおく！脆弱性を見つけられるか！といったような感じでした。<br/>
主にXSS周りの知識があれば戦えると思います。たぶん。</p>

<p>前半/後半で5問ずつ出題されたのですが、<br/>
前半の貢献できなさがひどかったです（◞‸◟）<br/>
たぶん回答できた問題、1つぐらいしかなかったんじゃないかな…。<br/>
出来ない問題に無理にチャレンジするもんじゃないですね！<br/>
その分後半で2つ回答しました！(簡単な問題ですが)<br/>
1つ、心の底から恥ずかしいミスをしていたので、もうちょっと精進しようと思いました…。<br/>
結果は、<strong> 2位 </strong>でした！10点差で負けてしまいました〜。<br/>
僕が最後から2問目で凡ミスをしなければ…と、悔やまれるばかりですが、非常に楽しかったです！</p>

<h3>懇親会</h3>

<p>終わったあとは懇親会です！お酒です！<br/>
(こちらもなんと用意されていました…感動…。)</p>

<p><a href="https://rrreeeyyy.github.io/images/blog/20121215-175320.jpg" rel="attachment wp-att-372"><img class="alignnone size-full wp-image-372" alt="20121215-175320" src="https://rrreeeyyy.github.io/images/blog/20121215-175320.jpg" width="600" height="350" /></a></p>

<p>こんな盛り合わせがなんかいっぱいあったしお酒もあったし豪華だった。<br/>
美味しかった。</p>

<p>mixiエンジニアの方とか、参加者の方といっぱいお話できて楽しかったです。<br/>
参加者の方、みんなすごいエンジニア感あってなんか刺激受けましたね…頑張りたいと思います…。</p>

<h3>終わり</h3>

<p>そんなこんなで終わりました。<br/>
交通費も実は支給されていたり、ご飯が美味しかったりしたのに普通に楽しかったので、<br/>
なんでこんないい待遇受けてるんだろ？と思いましたが、<br/>
まあ楽しかったので、問題ないかなと思ってイマス。</p>

<p>あと、いっぱいおみやげもらいました！<br/>
<a href="https://rrreeeyyy.github.io/images/blog/20121217-025925.jpg" rel="attachment wp-att-375"><img src="https://rrreeeyyy.github.io/images/blog/20121217-025925.jpg" alt="20121217-025925" width="600" height="350" class="alignnone size-full wp-image-375" /></a></p>

<p>楽しかったので、みなさん是非参加するといいと思います。<br/>
そんなに知識がないからちょっと…と思う人は、<br/>
XSSって何かとか、CSRFって何かとか、どんな風に行われるかとか、<br/>
そのへんを三日前ぐらいに勉強すればなんとかなると思います。楽しいのでぜひ。</p>

<p>次回は2013年1月開催予定だそうです。<br/>
<a href="http://mixi.co.jp/event/challenge-2012/">http://mixi.co.jp/event/challenge-2012/</a><br/>
興味がある方はどうぞ。</p>

<h3>結びに</h3>

<p>いやー本当に楽しかったです。あと悔しかった。<br/>
開催運営のmixiの皆様と、<br/>
参加者の皆さん(特にチームを組んでくれた2人)は本当にありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#10 ウサギィ見てきました]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2012/09/11/10-usagee/"/>
    <updated>2012-09-11T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2012/09/11/10-usagee</id>
    <content type="html"><![CDATA[<p>こんにちわ、れいです。</p>

<p>友人と一緒に株式会社ウサギィ(<a title="usagee.co.jp" href="http://usagee.co.jp/" target="_blank">usagee.co.jp</a>)の見学に行って来ました。</p>

<!--more-->


<p>電車に揺られること大体1時間ぐらい。<br/>
台東区の割とレガシーを感じさせる街並みの中にあるタワーの中にありましたー。</p>

<p>UIの悪いと言うエレベータに乗って8階へ。<br/>
ロゴの入った表札が迎えてくれます。</p>

<p><a href="https://rrreeeyyy.github.io/images/blog/IMG_20120911_162057.jpg" target="_blank"><img class="alignnone size-full wp-image-318" title="ウサギィの表札" src="https://rrreeeyyy.github.io/images/blog/IMG_20120911_162057.jpg" alt="" width="400" height="400" /></a></p>

<p>中の写真は撮るの忘れたんでありません。<br/>
(ちょっと緊張してました)</p>

<p>キレイな熱帯魚が居たことと、<br/>
結構いろんなところにウサギの何かがあったこと、<br/>
壁に飾ってある2枚のウサギの絵が印象的でした。</p>

<p>どちらかと言うと、&#8221;会社！&#8221;と言うよりかは&#8221;お部屋&#8221;な印象でしたが、<br/>
部屋の中の雰囲気が良くてキレイにしてあったので、<br/>
最終的には「おおっ、ITベンチャーっぽい・・・！」という感じでした。</p>

<p>社長と喋ったときは割と緊張してたのであんまり覚えてませんｗ<br/>
ウサギィの社名の由来とか、<br/>
どんな人が働いてるとか、<br/>
最近どんなものを作ったとか、<br/>
今までの見学者の方の話とか、<br/>
そんな感じの事を聞きました。</p>

<p><a href="http://usagee.co.jp/works.html" title="会社の事業概要" target="_blank">会社の事業概要</a>から、<br/>
Webとかスマートフォンアプリたくさんやってるのかなーと思いましたが、<br/>
実は「えっ、そんなこともやってるの？」と思うようなものも割とありましたー。</p>

<p>お昼は噂のアレをご馳走になってしまいました。</p>

<p><a href="https://rrreeeyyy.github.io/images/blog/IMG_20120911_121836.jpg" target="_blank"><img src="https://rrreeeyyy.github.io/images/blog/IMG_20120911_121836.jpg" alt="海鮮丼" title="海鮮丼" width="400" height="400" class="alignnone size-full wp-image-337" /></a></p>

<p>めっちゃ美味しかったです。<br/>
ご馳走様でした。</p>

<p>午後はかずー氏(<a href="https://twitter.com/kazoo04" title="@kazoo04" target="_blank">@kazoo04</a>)とお話しさせてもらいましたー。<br/>
Twitterからもうちょっとヤバい人かと思ってましたが、<br/>
普通にカッコいいしまともでした。悔しい。<br/>
あとアイコンに似てます。</p>

<p>ちょっと技術的な話とか、<br/>
今作ってる物の話とか聞きましたー。<br/>
「うおーすげーなー」って感じでした。</p>

<p>驚いたのは、デザインもキッチリ自分でやってる事でした。<br/>
紙に簡単な絵をおこして、PCに落として、コーディングにうつるそうです。<br/>
まー当然といえば当然なんですが、<br/>
この流れをぬるっと出来る人はすごいと思いました。<br/>
それに加えてコーディング力もサーバの知識もあって、感動しました。</p>

<p>カッコいいと思ったサイトをトレスして分析してみるといいよー<br/>
なんてアドバイスも貰えたので、参考にしようと思います。</p>

<p>大体こんな感じでした。<br/>
とにかく自由な感じでしたが、<br/>
それを許されるだけの力があるんだなーとも思いました。<br/>
僕もあんな感じになりたいですね〜。</p>

<p>普通の学生をちゃんとおもてなししてくれてありがとうございました〜。<br/>
(もっと変な人も来てるらしいですが)</p>

<p>ウサギィはいいとこでした。</p>

<p><a href="https://rrreeeyyy.github.io/images/blog/IMG_20120911_162232.jpg" target="_blank"><img src="https://rrreeeyyy.github.io/images/blog/IMG_20120911_162232.jpg" alt="うさぎ" title="うさぎ" width="400" height="400" class="alignnone size-full wp-image-348" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#9 phpのsession storeをredisにする]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2012/06/12/9-php-session-store-redis/"/>
    <updated>2012-06-12T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2012/06/12/9-php-session-store-redis</id>
    <content type="html"><![CDATA[<p>こんにちわ。れいです。</p>

<p>今日はphpのsession storeをredisにしてみようと思います。</p>

<!--more-->


<p>負荷分散するときに、セッション、どうしてますか？<br/>
keepalivedやapacheのmod_proxy_balancerを使ってバランシングする時に、<br/>
バックエンドのAPサーバでセッションを管理していると、困りますよね。</p>

<p>従来は、DBやnfsやmemcachedやrepcachedに入れる方法が主流でしたね。<br/>
でも、ちょっと遅かったり再起動をしたら消えてしまったり負荷が心配だったり&#8230;<br/>
といくつか問題があったようにも思います。</p>

<p>そこで、最近流行りのKVSにphpのセッションを入れて<br/>
管理する方法を紹介します。<br/>
今回使うのはRedisです。<br/>
色んなKVSの中でかなり早い部類に入るのと、<br/>
レプリケーションを組むのが非常に簡単であること、<br/>
あと僕が使ったことがあるKVSがMongoDBとRedisしかないので、<br/>
なんとなく選びました。<br/>
(余談ですが、TopotalではRedisを使っています)</p>

<p>phpとRedisのインストールは、もっと詳細に紹介している他サイトさんがあると思うので、<br/>
そこに任せます。<br/>
(需要があったら書きます)</p>

<p>phpとredisはインストール済みとして話を進めます。<br/>
まず、phpでredisを使うために、<br/>
phpredisを入れます。<br/>
→phpredis( <a href="http://github.com/owlient/phpredis" title="http://github.com/owlient/phpredis">http://github.com/owlient/phpredis</a> )</p>

<p>多分phpizeが要ります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># git clone https://github.com/owlient/phpredis.git
</span><span class='line'># cd phpredis
</span><span class='line'># phpize
</span><span class='line'># ./configure</span></code></pre></td></tr></table></div></figure>


<p>僕はphpをソースからインストールしていたので、<br/>
php-configがどこにあるか指定しろのエラーが出ました。<br/>
ので、以下のようにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ./configure --with-php-config=/usr/local/php/bin/php-config
</span><span class='line'># make
</span><span class='line'># make install</span></code></pre></td></tr></table></div></figure>


<p>これで終わりです。<br/>
php-fpmを使っていたのでrestartしておきました。<br/>
apacheを使っている人はapacheをrestartしておくと、<br/>
よいかもしれません。</p>

<p>phpとredisが正常に連携できているか調べるために、<br/>
こんな感じのことをしました。<br/>
[php]php -r &#8216; $redis = new Redis();<br/>
$redis->connect(&#8220;127.0.0.1&#8243;,6379);<br/>
$redis->set(&#8220;redis-test&#8221;,&#8221;test&#8221;);<br/>
echo $redis->get(&#8220;redis-test&#8221;); &#8216;[/php]<br/>
これで、test と表示されればOKです。<br/>
(redisが127.0.0.1:6379で待ち受けていることが必要です。)</p>

<p>次に、php.iniの設定をします。<br/>
普通は/etc/php.iniとかに入ってるような気がします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /usr/local/php/lib/php.ini</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>extension=redis.so</span></code></pre></td></tr></table></div></figure>


<p>の記述があることを確認します。無ければ追記します。<br/>
(ないと多分phpとredisの連携テストでこけますが…)</p>

<p>次に、session.save_handlerを以下のように変更します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>session.save_handler = redis</span></code></pre></td></tr></table></div></figure>


<p>そして、session.save_pathを例えばこんな感じに書きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>session.save_path = "tcp://127.0.0.1:6379?weight=1"</span></code></pre></td></tr></table></div></figure>


<p>基本的な記法は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tcp://${HOST_ADDRESS}:${HOST_PORT}?${OPTION1}&#038;${OPTION2}...</span></code></pre></td></tr></table></div></figure>


<p>のような感じです。</p>

<p>使えるオプションは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>weight
</span><span class='line'>timeout
</span><span class='line'>persistent
</span><span class='line'>prefix
</span><span class='line'>auth</span></code></pre></td></tr></table></div></figure>


<p>にだと思います。<br/>
・weight<br/>
weight=INT で指定して、複数のサーバにバランシングすることが出来るみたいです。<br/>
デフォルト値は1になってます。<br/>
・timeout<br/>
timeout=FLOAT で指定して、redisサーバとのタイムアウト値を設定します。<br/>
デフォルト値は86400と長いです。<br/>
・persistent<br/>
0か1を指定出来ます、が、ちょっとちゃんと動いてるか検証出来なかった上に、<br/>
公式で実験的な設定というふうな記述があるので、今は触らないほうがいいでしょう。<br/>
・prefix<br/>
prefix=STRINGで指定して、redisにsessionを格納する際のkey値を指定できます。<br/>
デフォルトは&#8221;PHPREDIS_SESSION:&#8221;になってます。<br/>
・auth<br/>
redis-serverでAUTHが設定されてる時に設定します。<br/>
デフォルトは設定されてません。</p>

<p>3つのサーバにsessionをバランシングしたい時は、次のように書くのがいいでしょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>session.save_path = "tcp://10.0.0.1:6379?weight=1&#038;timeout=3.0,tcp://10.0.0.2:6379?weight=2&#038;timeout=3.0,tcp://10.0.0.3:6379?weight=2&#038;timeout=3.0"</span></code></pre></td></tr></table></div></figure>


<p>こーんなテストページを作って、実際にSESSIONが入ってるか見てみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;count&quot;</span><span class="p">]</span> <span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;count&quot;</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;count&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;count&quot;</span><span class="p">])</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>redis-cliに入って、monitorコマンドを実行して、ページにアクセスしてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="nx">root</span><span class="o">@</span><span class="nx">coco</span><span class="o">-</span><span class="mo">01</span> <span class="o">~</span><span class="p">]</span><span class="c1"># redis-cli </span>
</span><span class='line'><span class="nx">redis</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="o">:</span><span class="mi">6379</span><span class="o">&gt;</span><span class="p">;</span> <span class="nx">monitor</span>
</span><span class='line'><span class="nx">OK</span>
</span><span class='line'><span class="s2">&quot;monitor&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>作ったテストページに実際にアクセスしてみると、こんな感じになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s2">&quot;GET&quot;</span> <span class="s2">&quot;PHPREDIS_SESSION:~~~~~&quot;</span>
</span><span class='line'><span class="s2">&quot;SETEX&quot;</span> <span class="s2">&quot;PHPREDIS_SESSION:~~~~~&quot;</span> <span class="s2">&quot;1440&quot;</span> <span class="s2">&quot;count|i:2;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>どうですか？ちゃんとredisにセッションは入ったでしょうか？</p>

<p>ここに書いたことは、実は大体このページを見れば分かることです。↓<br/>
<a href="https://github.com/nicolasff/phpredis" title="https://github.com/nicolasff/phpredis">https://github.com/nicolasff/phpredis</a></p>

<p>それではみなさん愉快なセッションライフを！<br/>
(記事の中に間違いとかがあったら、どんどん指摘してくださいね！)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#8 トラブルしゅーたーずに参加してきたんだよ]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2012/04/08/8-trouble-shooters/"/>
    <updated>2012-04-08T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2012/04/08/8-trouble-shooters</id>
    <content type="html"><![CDATA[<p>こんにちわ。れいです。<br/>
長らく(4ヶ月)日記書いてなかったですねーごめんなさい。<br/>
(いろいろ書きたいこととか溜まってるんですけどね…<br/>
ブログの未公開記事がどんどん溜まっていく…)</p>

<p>さて、今日は昨日(4/7)に行われた<br/>
hbstudy , ncstudy , odstudy 合同開催勉強会の<br/>
「トラブル☆しゅーたーず」に参加してきたのでそのお話です〜。</p>

<!--more-->


<p><a href="http://www.zusaar.com/event/231008">トラブルしゅーたーず</a>、どんな勉強会だったかというと、</p>

<p><strong>障害が起こったサイトを復旧させて、障害報告書を書く！</strong></p>

<p>ちょっと簡単にまとめすぎた感ありますが、<br/>
これをやってグループごと発表！<br/>
っていうような感じでした。</p>

<p>僕はチーム5に分けられたのですが、<br/>
なんとも素晴らしいチームに巡りあうことが出来まして、<br/>
とても楽しく障害復旧・究明・報告書作成まで行うことが出来ました！<br/>
(これらがあんなに明るく楽しくできるなんて一生であと何回あるか………)</p>

<p>さて、どんなことをしたかーですが、<br/>
まず、障害対応前に資料として、<br/>
<a href="https://docs.google.com/presentation/d/1aIAh6JAzHHufsc_O1Xb0o_CY1pnJQgXxYfhep1rp-n0/edit?pli=1#slide=id.p28">これ</a> を渡されますｗ</p>

<p><em>あとはチームごとに自由にやってください！</em></p>

<p>で、発表。</p>

<p>という感じだったので、かなりリアルな障害対応と言った感じでした…。</p>

<p>ちなみに、自分のチーム(チーム5)で作成した障害対応報告書は<br/>
<a href="https://docs.google.com/document/d/1RMlPbkkKpHksoXCNOBJrSdQqv9I_7FbaLhjgy2ZPc5c/edit?pli=1">こんな感じ</a> でした。<br/>
(かなり本気で作り込んであって、<br/>
作成過程を見ながら感心しっぱなしでした……)</p>

<p>(具体的な解答編は、<a href="https://docs.google.com/presentation/d/117SdD0NjMaunm1UfFBFPPaXxdrgvvkeXnmMETConnMI/edit?pli=1#slide=id.p22">こちら</a> から見れます。)</p>

<p>その後の懇親会では、<br/>
技術の話とか<del datetime="2012-04-08T03:16:36+00:00">合コンの話とか</del>色々聞けて本当に楽しかったです！</p>

<p>さて、ここから先は感じた事とか反省とかです！<br/>
(面倒なので箇条書きにしてしまいました。。)</p>

<ul>
<li><strong>普段業務でやっているような事だったので、</strong><br/>
<strong> 思っていたよりちゃんとできた！</strong></li>
</ul>


<p>(それでもまだまだだなーと思うところが<br/>
ボロボロボロボロ出てきましたが。。。<br/>
でも褒めてくださる方もいてちょっと自信がつきました)</p>

<ul>
<li><strong>全く見知らぬサーバ(とその構成)に出会った時に、</strong><br/>
<strong> 最も大事なのは &#8220;基本&#8221; だなと感じた。</strong></li>
</ul>


<p>(頭からデータフローを追う、ってやつですね<br/>
どんな風にパケットが流れてどこに問題があるのか、<br/>
を意識しないと、関係ないものに惑わされる…)</p>

<ul>
<li><strong>チームの中での連携・情報共有がうまくいっていると</strong><br/>
<strong> 作業効率が何倍にでも上がるなーと思った。</strong></li>
</ul>


<p>(それぞれの得意分野があってできることがあって、<br/>
リーダがそれをまとめて…ってするとすごく楽になる)</p>

<ul>
<li><strong>常に エンジニア目線 だけじゃなくて、</strong><br/>
<strong> 必ず お客さん目線 を持たないとダメだなーと思った。</strong></li>
</ul>


<p>(今回これが一番ずっしり来ました…。<br/>
お客さんにとってどうなのか、なんなのかが非常に重要。)</p>

<ul>
<li><strong>文章を書くのも技術の一環だなーと思った。</strong></li>
</ul>


<p>(乱雑に書いた作業メモのような物がどんどん障害報告書に<br/>
姿を変えていくのを眺めて本当にそう感じました…。)</p>

<ul>
<li><strong>障害対応は落ち着いてやろう</strong></li>
</ul>


<p>(決められたタイムリミットの中でいかに早く・冷静に対応出来るか<br/>
っていうのはめちゃくちゃ大事なスキルですね…<br/>
実際に終わって緊張がとれてから「あー！あれはああだった…」<br/>
とか思うことが結構多かったです…深呼吸大事)</p>

<p>&#8230;と、大体こんな感じでした。<br/>
また思いついたら随時追加しようかなと思います！</p>

<p>本当に楽しく、そして勉強になる勉強会でした。<br/>
同じチームとなった皆さん、運営の方々、<br/>
懇親会でお話ししてくださった方々、<br/>
素晴らしい発表を聞かせてくれた参加者の方々、<br/>
本当にありがとうございました！<br/>
次回があったらぜひまた参加したいと思います！</p>

<p>それではー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#7 nagios+lighttpd]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2011/12/29/7-nagioslighttpd/"/>
    <updated>2011-12-29T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2011/12/29/7-nagioslighttpd</id>
    <content type="html"><![CDATA[<p>今日はさくっと設定の紹介をして終わりです。</p>

<p>nagiosをlighttpdで動かすときの設定例です。</p>

<!--more-->


<p>アレコレ説明するのは面倒なので、はりつけちゃいます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$HTTP["url"] =~ "^/nagios" {
</span><span class='line'>        server.document-root = "/usr/local/nagios-3.2.3/share/"
</span><span class='line'>        server.indexfiles    = ( "index.php" )
</span><span class='line'>        var.servername = "coco-01"
</span><span class='line'>        accesslog.filename = "/var/log/lighttpd/" + var.servername + "_nagios_access.log"
</span><span class='line'>        server.errorlog = "/var/log/lighttpd/" + var.servername + "_nagios_error.log"
</span><span class='line'>
</span><span class='line'>        cgi.assign = ( ".cgi" =&gt; "" ,
</span><span class='line'>        )
</span><span class='line'>        fastcgi.server = (
</span><span class='line'>                ".php" =&gt; (
</span><span class='line'>                        "localhost" =&gt; (
</span><span class='line'>                                 "host" =&gt; "127.0.0.1",
</span><span class='line'>                                "port" =&gt; "9000"
</span><span class='line'>                                )))
</span><span class='line'>
</span><span class='line'>        alias.url = (
</span><span class='line'>        "/nagios/cgi-bin" =&gt; "/usr/local/nagios-3.2.3/sbin/",
</span><span class='line'>        "/nagios" =&gt; "/usr/local/nagios-3.2.3/share/"
</span><span class='line'>        )
</span><span class='line'>
</span><span class='line'>        auth.backend = "htpasswd"
</span><span class='line'>        auth.backend.htpasswd.userfile = "/usr/local/lighttpd-1.4.29/.nagiospw"
</span><span class='line'>        auth.require = ( "/" =&gt;
</span><span class='line'>        (
</span><span class='line'>        "method" =&gt; "basic",
</span><span class='line'>        "realm" =&gt; "Nagios Secret Zone",
</span><span class='line'>        "require" =&gt; "valid-user"
</span><span class='line'>        )
</span><span class='line'> )      
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>大体こんな感じです。<br/>
nagiosは3.2.3をソースから入れてます<br/>
prefixを/usr/local/nagios-3.2.3でconfigureしてます。</p>

<p>lighttpdはprefixを/usr/local/lighttpd-1.4.29でconfigureしてます</p>

<p>phpはphp-fpmを使って、localhostの9000番ポートがlistenしてる状態です。</p>

<p>標準のlighttpdのconfigの書式を知っている人なら、そんなに難しくないでしょう。</p>

<p>ポイントは2点ぐらいです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias.url = (
</span><span class='line'>   "/nagios/cgi-bin" =&gt; "/usr/local/nagios-3.2.3/sbin/",
</span><span class='line'>   "/nagios" =&gt; "/usr/local/nagios-3.2.3/share/"
</span><span class='line'> )
</span></code></pre></td></tr></table></div></figure>


<p>ここと、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cgi.assign = ( ".cgi" =&gt; "" ,
</span><span class='line'> )
</span></code></pre></td></tr></table></div></figure>


<p>ここだけです。<br/>
nagiosは、サイト自体を表示する部分が<br/>
/usr/local/nagios-3.2.3/share/<br/>
に置いてあって、<br/>
cgiを司る部分が、<br/>
/usr/local/nagios-3.2.3/sbin/<br/>
に置いてあります、ので、<br/>
/nagios/cgi-binのディレクトリにアクセスされた場合にはcgiの方を読みに行き、<br/>
/nagiosのサイト表示部分にアクセスされたら普通のindex.php等が置いてあるフォルダを読みに行くように設定しているだけです。</p>

<p>次いでcgi.assignの設定ですが、少々お行儀が悪い設定です。<br/>
が、しかし、nagiosのcgiを見て頂ければ分かる通り、<br/>
(/usr/local/nagios-3.2.3/sbin/の中身を見てみてね)<br/>
nagiosのcgiは何とバイナリファイルです。<br/>
ソースを見てみると、C言語です。<br/>
(ソースのフォルダの中のnagios-3.2.3/cgi配下にあります)</p>

<p>と言う事で、関連づけせずにそのままlighttpdのcgiモジュールに投げてます。</p>

<p>…これで実行出来るから驚きなのですが…。</p>

<p>他にも、mailmanとかのコンパイル済みのバイナリファイル等のcgiをlighttpd上で実行したい場合は、<br/>
上のような設定にすると動作します。<br/>
(友人はUPSのWeb設定画面をこの方法で動かしていたような気がします。。。)</p>

<p>実は脱apacheでnagiosを動かしたい！と思い立ってから、<br/>
nginxで動かそうと試行錯誤して1週間程度やっていましたが、結局あきらめてlighttpdに乗り換えたら、こんな簡単な設定で出来たので正直拍子抜けしました。<br/>
(nginxで動かそうとしたときは、nagiosのcgiのソースコードをfcgi化してfcgiwrapperで動かそうとして結局失敗&#8230;)</p>

<p>なので、apacheじゃないwebサーバを検討している方々で、apacheみたいにcgiを動かしたい！って方は、lighttpdがオススメなんじゃないでしょうか。<br/>
nginxは確かに軽量で高速なwebサーバなのですが、cgiの実行に関しては全く外部委託せざるを得ないので…<br/>
(fcgiwrapperやphp-fpm,spawn-fcgiなど)</p>

<p>速度に関して言えば、nginxとlighttpdでほぼ大差はないように感じます(実際に厳密なベンチを取ったわけではないですが&#8230;)</p>

<p>これからはもしかしたら、nginx+lighttpdなんていう構成が流行るかもしれませんね？</p>

<p>設定ファイルもそこそこ簡単なので、lighttpdは割とオススメです！</p>

<p>そんな感じで、次回はもっとちゃんとした事を書こうと思います。<br/>
(恐らく時期的に自サーバの再構築が終わってるので、その構成とかについて書きたいなあなんて考えてます…)</p>

<p>それでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#6 20歳までにやりたいこと]]></title>
    <link href="https://rrreeeyyy.github.io/blog/2011/12/15/6-20th-infra/"/>
    <updated>2011-12-15T00:00:00+09:00</updated>
    <id>https://rrreeeyyy.github.io/blog/2011/12/15/6-20th-infra</id>
    <content type="html"><![CDATA[<p>こんばんわ、れいです。<br/>
今日は20歳までにやってみたい事について書こうと思います。<br/>
(あと1ヶ月+αで20歳なので)</p>

<!--more-->


<p>構成<br/>
物理サーバ3台 + 仮想サーバ</p>

<p>rrreeeyyy.com(P) &#8211; coco-01(V)<br/>
nari64.com(P) &#8211; webdb02(V)<br/>
bonjour-01(P) &#8211; &#8230;9 hosts(V)</p>

<p>やりたい:<br/>
いわゆる HAクラスタ と言うやつを組みたい</p>

<p>やらなきゃいけない:<br/>
今現在2台の物理サーバで動いているサービスをそのまま、再構築してHAクラスタ化。</p>

<p>→ NagiosとかMuninとかblogとかmailを一晩程度止める事はご勘弁願いたい&#8230;<br/>
(誰も使ってないし)</p>

<p>そもそも出来るかどうか分かりませんが、<br/>
想定手順をちょっと書いてみました。</p>

<p>想定手順:</p>

<h2>(0) &#8211; 準備編 &ndash;</h2>

<p>(0-1) rrreeeyyy.com上で動作しているnagios,munin,blog,mail,svn等のほぼ同様の環境をcoco-01上に構築する</p>

<p>(0-2)[必要なら] nari64.com上で動作しているblog,mail等のほぼ同様の環境をwebdb02上に構築する</p>

<h2>(1) &#8211; nari64.com再構築編 &ndash;</h2>

<p>(1-1)[必要なら] nari64.com上のwebdb02のimg,xmlファイルをrrreeeyyy.com上に退避(scp or rsync等&#8230;)させ、nari64.comを再インストール</p>

<p>(1-2) nari64.comにNICを実装</p>

<p>(1-3)[必要なら] nari64.com上でKVMを再構築し、img,xmlファイルを差し戻し、起動を確認する。</p>

<p>(1-4) nari64.com上でルータ化できるような構成にしておく(dhcpd,pppoe等)</p>

<h2>(2) &#8211; rrreeeyyy.com再構築編 &ndash;</h2>

<p>(2-1) rrreeeyyy.com上のiptables,pppoe接続等の設定ファイルを確認し、使用出来そうなファイルはnari64.com上に転送しておく。</p>

<p>(2-2) rrreeeyyy.com上のcoco-01のimg,xmlファイルをnari64.com上に退避させる。</p>

<p>(2-3) rrreeeyyy.comをシャットダウンし、nari64.comにてpppoe接続、iptables,dhcp等のルータ化設定を実施</p>

<p>(2-4) rrreeeyyy.comのOSを再インストールし、KVMを再構築する。[必要があればcoco-01のimg,xmlを差し戻して動作確認]</p>

<p>&#8211;(ここからHAクラスタの構築)&#8211;</p>

<h2>(3) &#8211; keepalivedの構築編 &ndash;</h2>

<p>(3-1) nari64.com上でkeepalivedの構築を実施</p>

<p>(3-2) nari64.com上でkeepalivedの振り分け設定を実施</p>

<p>(3-3) rrreeeyyy.com上でkeepalivedの構築を実施</p>

<p>(3-4) rrreeeyyy.com上で (3-2) の設定ファイルを持ってくる</p>

<p>(3-5) master-slaveの設定を実施</p>

<p>(3-6) failover-failbackの確認</p>

<h2>(4) &#8211; glusterFSの構築編</h2>

<p>(4-1) rrreeeyyy.com上でglusterFSの構築</p>

<p>(4-2) nari64.com上でglusterFSの構築</p>

<p>(4-3) 上記2サーバでdistributeの構成を取る</p>

<p>(4-4) bonjour-01上でglusterFSの構築</p>

<p>(4-5) rrreeeyyy.com,nari64.comの両サーバのファイルをbonjour-01上にreplica構成(geo-replica?)を取る</p>

<p>&#8211;出来るか分からない所&#8211;</p>

<p>(4-6) rrreeeyyy.com(or nari64.com)上にHDDを実装</p>

<p>(4-7) bonjour-01,rrreeeyyy.com,nari64の3サーバでdistributeの構成を取る</p>

<p>(4-8) rrreeeyyy.com,nari64,bonjour-01のそれぞれのhostで実装したHDDにreplicaを取る</p>

<p>&#8211;出来るか分からない所&#8211;</p>

<p>(4-9) 色々確認</p>

<p>(終了)</p>

<p>/<em> 最後の方ちょっと面倒になって適当…<br/>
* もしかしたら仮想サーバ周りも色々いじるのかも…<br/>
* そもそも出来るか分からない<br/>
* 3,4の工程の鬼畜度がすごい<br/>
</em>/</p>

<p>(買うもの)<br/>
・[必要なら]HDD1〜2台 洪水…<br/>
・スイッチングハブ(Gigabitで) 3000円くらいらしい<br/>
・LANケーブル数本(Gigabitで) たぶんやすい<br/>
・NIC1枚 3000円ぐらいだと思う</p>

<p>他にははもっといろんな人と仲良くなりたいです！<br/>
みなさんよろしくお願いします！！</p>

<p>なんかこうした方がもっとよろしげな構成だよとかあったら教えてください…</p>

<p>あと仲良くなってくださる方もよろしくお願いします…。</p>
]]></content>
  </entry>
  
</feed>
